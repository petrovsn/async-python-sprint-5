        status = super().get_status()
        status["stockpile_raw"] = self.stockpile_raw.storage
        status["stockpile_raw_capacity"] = self.stockpile_raw.capacity
        status["stockpile_raw_occupied"] = self.stockpile_raw.occupied
#==SPACE==#

        status["stockpile_items"] = self.stockpile_items.storage
        status["stockpile_items_capacity"] = self.stockpile_items.capacity
        status["stockpile_items_occupied"] = self.stockpile_items.occupied
#==SPACE==#

        status["items_volume"] = self.stockpile_items.items_volume
        status['items_cost'] = self.stockpile_items.items_cost
        status["production_task"] = ""
        status["production_progress"] = 0
        status["production_queue"] = self.production_queue.queue
        if self.production_task:
            status["production_task"] = self.production_task.item_name
            status["production_progress"] = self.production_task.get_progress()
        return status
#==SPACE==#

#==SPACE==#

#==SPACE==#
        
    def proceed_command(self, command:Command):
        super().proceed_command(command)
        action = command.get_action()
        params = command.get_params()
        match action:
            case "change_amount":
                res_name = params["resource_name"]
                res_amount = params["resource_amount"]
                self.add_resource(res_name,res_amount)
#==SPACE==#

            case "produce_item":
                item_name = params["item_name"]
                self.production_queue.add(item_name)
#==SPACE==#

            case "remove_item_from_production_queue":
                item_name = params["item_name"]
                item_idx = params["item_idx"]
                self.production_queue.remove(item_name,item_idx)
#==SPACE==#

            case 'cancel_item_production':
                self.production_task = ""
                self.production_progress = 0
#==SPACE==#

            case "clear_production":
                self.production_queue.clear()
#==SPACE==#

            case "save_projectile_blueprint":
                bp_name = command.get_params()["bp_name"]
                if bp_name:
                    bp_content = command.get_params()["bp_content"]
                    self.save_projectile_blueprint(bp_name, bp_content)
#==SPACE==#

#==SPACE==#

#==SPACE==#
                    
            case "delete_projectile_blueprint":
                bp_name = command.get_params()["bp_name"]
                if bp_name:
                    self.delete_projectile_blueprint(bp_name)
#==SPACE==#

    def delete_projectile_blueprint(self, bp_name):
        available_bps = self.projectile_constructor.get_blueprints_list(self.mark_id)
        if bp_name not in available_bps: return
        volume, cost = self.stockpile_items.get_volume_and_cost(bp_name)
        current_amount = self.stockpile_items.storage[bp_name]
        metal_cost = current_amount*cost*0.5
        self.stockpile_items.del_item(bp_name)
        self.stockpile_raw.add_item("metal",metal_cost)
        self.trigger_launcher_update()
#==SPACE==#

    def save_projectile_blueprint(self, bp_name, bp_content):
        available_bps = self.projectile_constructor.get_blueprints_list(self.mark_id)
        if bp_name in available_bps:
            volume, cost = self.stockpile_items.get_volume_and_cost(bp_name)
            current_amount = self.stockpile_items.storage[bp_name]
            metal_cost = current_amount*cost*0.5
            self.stockpile_items.del_item(bp_name)
            self.stockpile_raw.add_item("metal",metal_cost)
        self.projectile_constructor.append_blueprint(self.mark_id, bp_name, bp_content)
        self.update_blueprints(bp_name)
        self.trigger_launcher_update()
#==SPACE==#

    def trigger_launcher_update(self):
        GlobalShipSystemController().get(self.mark_id, "launcher_sm").update_available_projectile()
#==SPACE==#

#==SPACE==#

#==SPACE==#
                
    def spend_resource(self, resource_name, resource_amount):
        stockpile:Stockpile = self.get_appropriate_stockpile(resource_name)
        result = stockpile.take_item(resource_name, resource_amount)
        return result
#==SPACE==#

    def add_resource(self, resource_name,resource_amount):
        stockpile:Stockpile = self.get_appropriate_stockpile(resource_name)
        result = stockpile.add_item(resource_name, resource_amount)
        self.get_system("launcher_sm").update_available_projectile()
        return result
#==SPACE==#

    def get_appropriate_stockpile(self, resource_name):
        if resource_name in self.stockpile_items.storage:
            return self.stockpile_items
        elif resource_name in self.stockpile_raw.storage:
            return self.stockpile_raw
        else:
            assert False, "no appropriate storage"
#==SPACE==#

#==SPACE==#

    def upgrade(self):
        super().upgrade()
        self.get_system("med_sm").upgrade()
        self.stockpile_items.set_capacity(self.capacity_levels[self.upgrade_level])
        self.stockpile_raw.set_capacity(self.capacity_levels[self.upgrade_level])
#==SPACE==#

    def downgrade(self):
        super().downgrade()
        self.get_system("med_sm").downgrade()
        self.stockpile_items.set_capacity(self.capacity_levels[self.upgrade_level])
        self.stockpile_raw.set_capacity(self.capacity_levels[self.upgrade_level])
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#
        
#==SPACE==#


###===###.\back01\modules\ship\systems\sm_RnD.py
from modules.physEngine.core import lBodyPool_Singleton
from modules.physEngine.world_constants import WorldPhysConstants
from modules.physEngine.projectiles.projectile_selector import ProjectileSelector
from modules.utils import Command
#==SPACE==#

from modules.ship.systems.sm_core import BasicShipSystem
from modules.ship.shipPool import ShipPool_Singleton
from modules.utils import Command
from modules.utils import Command, CommandQueue, ConfigLoader
#==SPACE==#

#==SPACE==#

ship_level_configs = {
    1:{
            "engine_sm":2,
            "launcher_sm":1,
            "damage_sm":1
    },
    2:{
            "engine_sm":3,
            "launcher_sm":3,
            "damage_sm":2
    },
    3:{
            "engine_sm":3,
            "launcher_sm":6,
            "damage_sm":3
    }
}
#==SPACE==#

class ResearchAndDevSystem(BasicShipSystem):
    def __init__(self, mark_id, NPC=False):
        super().__init__(mark_id, "RnD_sm")
        self.systems_upgrades = {}
        system_names = ["engine_sm", "launcher_sm", "energy_sm", "radar_sm", "resources_sm"]
        if NPC:
            system_names = ["engine_sm", "launcher_sm", "energy_sm", "radar_sm", "resources_sm", "damage_sm"]
        for system_name in system_names:
            upgrade_scale = [int(a) for a in ConfigLoader().get(f"sm_RnD.{system_name}", str).split()]
            self.systems_upgrades[system_name] = {
                'current_level':upgrade_scale[0],
                'maximal_level':upgrade_scale[1],
                'cost':upgrade_scale[2:]
            }
#==SPACE==#

    def get_short_description(self):
        result = {}
        for system_name in self.systems_upgrades:
            curr = self.systems_upgrades[system_name]['current_level']
            max = self.systems_upgrades[system_name]['maximal_level']
            result[system_name] = f"{curr}/{max}"
        return result
#==SPACE==#

    def upgrade_to_config_state(self):
        for system_name in ["engine_sm", "launcher_sm", "energy_sm", "radar_sm", "resources_sm"]:#, "resources_sm"]:
            upgrade_scale = [int(a) for a in ConfigLoader().get(f"sm_RnD.{system_name}", str).split()]
            current_level = upgrade_scale[0]
            self.set_upgrade_level(system_name, current_level)
#==SPACE==#

    def set_upgrade_level(self, system_name, upgrade_level):
        try:
            system = self.get_system(system_name)
            level_delta = upgrade_level - system.upgrade_level
            if not system:
                print("ALERT")
            foo = system.upgrade
            if level_delta<0:
                foo = system.downgrade
            for i in range(abs(level_delta)):
                foo()
            self.systems_upgrades[system_name]["current_level"] = upgrade_level
        except Exception as e:
            print("set_upgrade_level", system_name, upgrade_level, repr(e))
#==SPACE==#

    def set_initial_ship_level(self):
        pass
#==SPACE==#

    def get_ship_level_config(self, ship_level):
        return ship_level_configs[int(ship_level)]
#==SPACE==#

    def set_ship_level(self, ship_level):
        ship_upgrade_config = self.get_ship_level_config(ship_level)
        for system_name in ship_upgrade_config:
            if system_name in self.systems_upgrades:
                self.set_upgrade_level(system_name, ship_upgrade_config[system_name])
#==SPACE==#

#==SPACE==#
        
    def get_upgrade_level(self,system_name):
        return self.systems_upgrades[system_name]['current_level']
#==SPACE==#

    def update_upgrades_state(self):
        for sm_name in ["engine_sm", "launcher_sm", "energy_sm", "radar_sm"]:
            self.systems_upgrades[sm_name]['current_level'] = self.get_system(sm_name).upgrade_level
#==SPACE==#

    def next_step(self):
        pass
#==SPACE==#

    def get_status(self):
        status = super().get_status()
        status["systems_upgrades"] = self.systems_upgrades
        return status
#==SPACE==#

#==SPACE==#

#==SPACE==#
        
#==SPACE==#

    def upgrade_system(self, system_name, free = False):
#==SPACE==#

        #cant upgrade damaged systems
        if not free:
            if not self.get_system("damage_sm").can_be_upgraded(system_name):
                return
#==SPACE==#

        resources_sm = self.get_system("resources_sm")
        system_state = self.systems_upgrades[system_name]
        upgrade_cost = system_state["cost"][system_state["current_level"]]
        if not free:
            success = resources_sm.spend_resource("metal",upgrade_cost)
            if not success: return
            self.get_system("damage_sm").inform_system_upgrade(system_name)
        system_obj = self.get_system(system_name)
        system_obj.upgrade()
        self.systems_upgrades[system_name]["current_level"] = system_obj.upgrade_level
#==SPACE==#

    def downgrade_system(self, system_name):
        system_obj = self.get_system(system_name)
        system_obj.downgrade()
#==SPACE==#

#==SPACE==#

#==SPACE==#
            
        self.systems_upgrades[system_name]["current_level"] = system_obj.upgrade_level
        self.get_system("resources_sm").trigger_launcher_update()
#==SPACE==#

    def proceed_command(self, command:Command):
        super().proceed_command(command)
        params = command.get_params()
        match command.get_action():
            case 'upgrade_system':
                system_name = params["system"]
                self.upgrade_system(system_name)
#==SPACE==#

            case "set_ship_level":
                level = params["value"]
                self.set_ship_level(int(level))
#==SPACE==#

            case 'upgrade_system_admin':
                system_name = params["system"]
                self.upgrade_system(system_name, free = True)
#==SPACE==#

            case "downgrade_system":
                system_name = params["system"]
                self.downgrade_system(system_name)

###===###.\front01\src\Administration.js
#==SPACE==#

import React from 'react'
#==SPACE==#

import { send_command, get_solarflare } from './modules/network/connections.js'
import { AdminRadarWidget } from './modules/widgets/AdminRadar.js';
import { PerformanceViewer } from './modules/widgets/PerformanceWidget.js';
import './styles/Administration.css'
import { ShipsStateWidget } from './modules/widgets/ShipsStateWidget.js';
#==SPACE==#

import { CommandEditorWidget } from './modules/widgets/CommandEditor.js';
import { timerscounter } from './modules/utils/updatetimers.js';
import { QuestPointsController } from './modules/widgets/QuestPointsController.js';
#==SPACE==#

export class Administration extends React.Component {
 constructor(props) {
 super(props);
 this.state = {
  selected: null,
  "sf_timer_value":0
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(() => {
  this.forceUpdate()
 }, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

 restart_simulation = () => {
 send_command("server", null, "restart", null, true)
 }
#==SPACE==#

 autoUpdateMap = (value) => {
 send_command("hBodiesPool", "admin", "set_realtime_update", { 'value': value })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#

 render() {
 return (<div
#==SPACE==#

  className='Administration'>
  <b>Administration</b>
  <div className='AdminControlPanel'>
#==SPACE==#

#==SPACE==#
   
  </div>
  <div
  style={{
   "display": "flex",
   "flex-directin": "row"
  }}>
  <AdminRadarWidget />
  <div className='SystemsSection'>
   <div className='SystemsSectionLevel'>
   <PerformanceViewer>
#==SPACE==#

   </PerformanceViewer>
   </div>
#==SPACE==#

#==SPACE==#
   
   <QuestPointsController />
  </div>
  </div>
#==SPACE==#

 </div>)
 }
}

###===###.\front01\src\App.js
#==SPACE==#

import './styles/App.css'
#==SPACE==#

// import the socket
import React from 'react'
#==SPACE==#

import { Administration } from './Administration';
import { PilotStation } from './PilotStation';
import { MapEditor } from './MapEditor';
import './styles/basic.css'
import { is_local } from './modules/configs/configs';
import { ConfigEditor } from './ConfigEditor';
import { MedicStation } from './MedicStation';
import { CommonRadarStation } from './CommonRadarStation';
#==SPACE==#

import { send_command } from './modules/network/connections';
import './styles/InteractionControlWidget.css'
import './styles/Widgets.css'
import './styles/RndControlWidget.css'
import './styles/basic.css'
import './styles/AdminSystemViewer.css'
import './styles/common.css'
import './styles/ProjectileBuilderWidget.css'
import './styles/CrewControlWidget.css'
import './styles/EngineerControllerWidget.css'
import './styles/ProductionSM.css'
import './styles/ShipsDisplay.css'
#==SPACE==#

import { get_http_address } from './modules/network/connections';
import { timerscounter } from './modules/utils/updatetimers';
import { get_locales } from './modules/locales/locales';
import { GameMastering } from './GameMastering';
class LoginController {
    constructor() {
        this.username = "admin"
        this.available_modules = []
    }
    login = (username) => {
        this.username = username
        this.update_available_roles()
    }
#==SPACE==#

    get_username = () => {
        return this.username
    }
#==SPACE==#

    is_logged = () => {
        return this.username
    }
#==SPACE==#

    get_available_roles = () => {
        return this.available_modules
    }
#==SPACE==#

    update_available_roles = () => {
        var myInit = {
            method: "GET",
            headers: { "username": this.username },
        }
#==SPACE==#

        return fetch(get_http_address() + "/users/roles/list", myInit)
            .then(response => {
                let code = response.status;
                if (code === 200) {
                    return response.json()
                }
            }).then(data => {
                this.available_modules = data
                //console.log(this.available_modules)
            }).catch(data => {
                //console.log(data)
            })
    }
}
#==SPACE==#

let loginController = new LoginController()
#==SPACE==#

class LoginWindow extends React.Component {
    constructor() {
        super()
        this.state = {
            "Username": "",
            "Password": ""
        }
    }
#==SPACE==#

    onLogin = () => {
        var myInit = {
            method: "GET",
            headers: this.state
        }
#==SPACE==#

        return fetch(get_http_address() + "/users/login", myInit)
            .then(response => {
                let code = response.status;
                if (code === 200) {
                    return code
                }
#==SPACE==#

            }).then(code => {
                if (code === 200) {
                    //console.log("login", this.state.Username)
                    loginController.login(this.state.Username)
                    send_command("ship.med_sm", "Sirocco", "log_in", { "role": this.state.Username }, true)
                    this.props.onLogin()
                }
            })
    }
#==SPACE==#

#==SPACE==#

    render() {
        return <div className='LoginWindow'>
            <label>username:<input onChange={(e) => { this.setState({ "Username": e.target.value }) }}></input></label>
            <label>password:<input onChange={(e) => { this.setState({ "Password": e.target.value }) }}></input></label>
            <button onClick={this.onLogin}>login</button>
        </div>
    }
}
#==SPACE==#

#==SPACE==#

class Navigation extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            available_modules: [],
            selected_module: "admin"
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.update_available_modules, 1000)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    update_available_modules = () => {
        loginController.update_available_roles()
        this.forceUpdate()
    }
#==SPACE==#

    run_simulation = () => {
        send_command("server", null, "run", null, true)
    }
#==SPACE==#

    onSelectModule = (module) => {
        this.setState({ 'selected_module': module })
        this.props.on_module_selection(module)
    }
#==SPACE==#

    render() {
        let list = loginController.get_available_roles()
#==SPACE==#

        if (!this.state.selected_module) {
            this.onSelectModule(list[0])
        }
        else {
            if (!list.includes(this.state.selected_module)) {
                this.onSelectModule(null)
            }
        }
        let list_nav = []
        for (let i in list) {
            let val = get_locales(list[i])
            if (list[i] === this.props.module) {
                val = <b>{get_locales(list[i])}</b>
#==SPACE==#

            }
#==SPACE==#

            list_nav.push(<label className="Navigation_item" onClick={() => {
                this.onSelectModule(list[i])
#==SPACE==#

            }}>{val}</label>)
#==SPACE==#

#==SPACE==#

        }
#==SPACE==#

        list_nav.push(<button
            onClick={this.props.onLogout}>
            LOGOUT
        </button>)
#==SPACE==#

        /*list_nav.push(<button
         onClick={(e) => {
         send_command("server", null, "run", null, true)
         }}>
         RUN
        </button>)
#==SPACE==#
       
        list_nav.push(<button
         onClick={(e) => {
         send_command("server", null, "pause", null, true)
         }}>
         PAUSE
        </button>)*/
#==SPACE==#

#==SPACE==#

        return (<div
            className="Navigation">
            <b>Navigation:</b>
#==SPACE==#

            {list_nav}
#==SPACE==#

        </div>)
    }
}
#==SPACE==#

#==SPACE==#

class ModuleRenderer extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
#==SPACE==#

        }
    }
#==SPACE==#

    render() {
#==SPACE==#

#==SPACE==#

        switch (this.props.module) {
            case 'map_editor':
                return (<MapEditor></MapEditor>)
            case 'admin':
                return (<Administration
                    on_module_selection={this.props.on_module_selection}
                ></Administration>)
#==SPACE==#

#==SPACE==#

            case 'game_master':
                return (<GameMastering
                    on_module_selection={this.props.on_module_selection}
                ></GameMastering>)
#==SPACE==#

            case 'pilot':
                return (<PilotStation
                    admin={true}
                ></PilotStation>)
#==SPACE==#

            case 'navigator':
                return (<PilotStation
                    username={loginController.get_username()}
                    navigator={true}
                ></PilotStation>)
#==SPACE==#

            case 'engineer':
                return (<PilotStation
                    username={loginController.get_username()}
                    engineer={true}
                ></PilotStation>)
#==SPACE==#

            case 'cannoneer':
                return (<PilotStation
                    username={loginController.get_username()}
                    cannoneer={true}
                ></PilotStation>)
#==SPACE==#

            case 'engineer_old':
                return (<PilotStation
                    username={loginController.get_username()}
                    engineer_old={true}
                ></PilotStation>)
#==SPACE==#

            case 'captain':
                return (<PilotStation
                    username={loginController.get_username()}
                    captain={true}
                ></PilotStation>)
#==SPACE==#

            case "config editor":
                return (<ConfigEditor key="ConfigEditor" />)
#==SPACE==#

            case 'NPC_pilot':
                return (<PilotStation
                    NPC_pilot={true}
                ></PilotStation>)
#==SPACE==#

            case 'medic':
                return (<MedicStation
                    username={loginController.get_username()}
                ></MedicStation>)
#==SPACE==#

            case 'common_radar':
                return  (<CommonRadarStation/>)
#==SPACE==#

            default:
                return (<div>
                    "Module not available"
                </div>)
        }
#==SPACE==#

    }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

class MainApp extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            "module": "config editor"
        }
    }
#==SPACE==#

    on_module_selection = (module_name) => {
        this.setState({
            "module": module_name
        })
    }
#==SPACE==#

    render() {
        if (is_local()) {
            if (window.location.host.split(':')[0] !== "localhost") return <div>Test NPM Server</div>
        }
#==SPACE==#

        return (<div className='App'
            key="App">
            <Navigation
                onLogout={this.props.onLogout}
                module={this.state.module}
                on_module_selection={this.on_module_selection}
            >
#==SPACE==#

            </Navigation>
            <ModuleRenderer
                key="ModuleRenderer"
                module={this.state.module}
                on_module_selection={this.on_module_selection}
            >
            </ModuleRenderer>
        </div>)
#==SPACE==#

    }
}
#==SPACE==#

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            "logged": true
        }
    }
    onLogout = (e) => {
        this.setState({ "logged": false })
        send_command("ship.med_sm", "Sirocco", "log_out", { "role": loginController.get_username() }, true)
    }
    render() {
        if (this.state.logged) {
            return <MainApp onLogout={this.onLogout} />
        }
        return <LoginWindow onLogin={() => {
            this.setState({ "logged": true })
        }} />
    }
}
#==SPACE==#

export default App;

###===###.\front01\src\CommonRadarStation.js
#==SPACE==#

import React from 'react'
#==SPACE==#

#==SPACE==#

import { PlayersRadarWidget } from './modules/widgets/PlayerRadar.js';
import './styles/PilotStation.css'
import { get_observer_id, get_system_state } from './modules/network/connections.js';
import { timerscounter } from './modules/utils/updatetimers.js';
#==SPACE==#

import { take_control } from './modules/network/connections.js';
export class CommonRadarStation extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#
        
        this.state = {
            selected: null,
            is_taking_damage: false,
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
        if (this.props.captain | this.props.navigator | this.props.cannoneer | this.props.engineer | this.props.medic) {
            if (!get_observer_id()) {
                take_control("Sirocco")
            }
        }
#==SPACE==#

    }
#==SPACE==#

#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
    render() {
        return (<div
            className={'CommonRadarStation'}>
            <PlayersRadarWidget
            />
        </div >)
    }
}
###===###.\front01\src\ConfigEditor.js
#==SPACE==#

import React from 'react'
#==SPACE==#

import { send_command, get_http_address } from './modules/network/connections.js'
#==SPACE==#

import { timerscounter } from './modules/utils/updatetimers.js';
#==SPACE==#

#==SPACE==#

import './styles/Administration.css'
import './styles/ConfigEditor.css'
#==SPACE==#

#==SPACE==#

#==SPACE==#

export class ConfigEditor extends React.Component {
 constructor(props) {
 super(props);
 this.state = {
  config_list: [],
  config_data: {},
  configfile_name:""
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get("ConfigEditor")
#==SPACE==#

 if (!timer_id) {
  //clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
  timer_id = setInterval(this.updateConfigList, 1000)
  timerscounter.add("ConfigEditor", timer_id)
  this.updateConfigList()
 }
#==SPACE==#

 componentWillUnmount() {
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 let timer_id = timerscounter.get("ConfigEditor")
#==SPACE==#

 clearInterval(timer_id)
 }
#==SPACE==#

 updateConfigList = () => {
 var myInit = {
  method: "GET",
  headers: {
  },
 }
#==SPACE==#

 return fetch(get_http_address() + "/admin/configs", myInit)
  .then(response => {
  let code = response.status;
#==SPACE==#

  switch (code) {
   case 200:
   let data = response.json()
   return data
   default:
   break;
  }
  })
  .then(data => {
#==SPACE==#

  this.setState({
   config_list: data
  })
  })
  .catch(error => {
#==SPACE==#

  });
 }
#==SPACE==#

#==SPACE==#

 getConfig = (filename) =>{
 var myInit = {
  method: "GET",
  headers: {
  },
 }
#==SPACE==#

 return fetch(get_http_address() + "/admin/configs/"+filename, myInit)
  .then(response => {
  let code = response.status;
#==SPACE==#

  switch (code) {
   case 200:
   let data = response.json()
   return data
   default:
   break;
  }
  })
  .then(data => {
#==SPACE==#

  this.setState({
   configfile_name: filename.split('.')[0],
   config_data: data
  })
  })
  .catch(error => {
#==SPACE==#

  });
 }
#==SPACE==#

 get_configs_list = () => {
 let result = []
 for (let i in this.state.config_list) {
  let conf = this.state.config_list[i]
  result.push(
  <label onClick={() => { 
   this.getConfig(conf)
   send_command("config_loader", "admin", "load", { "filename": conf })
   }} >{conf}</label>
  )
 }
 return <div className='map_selector'>{result} </div>
 }
#==SPACE==#

 onSaveCurrent = () => {
 send_command("config_loader", "admin", "save", { "filename": this.state.configfile_name, "config_data":this.state.config_data })
 //send_command("config_loader", "admin", "load", { "filename": this.state.configfile_name })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#

 get_config_list = () => {
 return (<div
  className='FileLoader'
 >
  <b>ConfigLoader</b>
  {this.get_configs_list()}
#==SPACE==#

  <input onChange={(e) => { this.setState({ "configfile_name": e.target.value }) }} value={this.state.configfile_name}></input>
  <button onClick={this.onSaveCurrent}>SAVE</button>
 </div>)
 }
#==SPACE==#

 get_config_content = () =>{
 let result = []
 for(let section_name in this.state.config_data){
  result.push(this.get_config_section(section_name))
 }
 return <div className = "configContent"> {result} </div>
 }
#==SPACE==#

 change_option = (section_name, param_name, value) =>{
 let tmp_config = this.state.config_data
 tmp_config[section_name][param_name] = value
 this.setState({"config_data":tmp_config})
 }
#==SPACE==#

 get_config_section = (section_name) =>{
 let result = []
 for (let label in this.state.config_data[section_name]){
  result.push(<label>{label}<input onChange={(e)=>{this.change_option(section_name, label, e.target.value)}} value={this.state.config_data[section_name][label]}></input></label>)
 }
 return <div className='configSection'>
  <label><b>{section_name}</b></label>
  {result}
 </div>
 }
#==SPACE==#

 render() {
 return (<div
  className='ConfigEditor'
 >
  {this.get_config_list()}
  {this.get_config_content()}
#==SPACE==#

 </div>)
 }
}

###===###.\front01\src\GameMastering.js
#==SPACE==#

import React from 'react'
#==SPACE==#

import { send_command, get_solarflare, take_control } from './modules/network/connections.js'
import { AdminRadarWidget } from './modules/widgets/AdminRadar.js';
import { PerformanceViewer } from './modules/widgets/PerformanceWidget.js';
import './styles/Administration.css'
import { ShipsStateWidget } from './modules/widgets/ShipsStateWidget.js';
#==SPACE==#

import { CommandEditorWidget } from './modules/widgets/CommandEditor.js';
import { timerscounter } from './modules/utils/updatetimers.js';
import { QuestPointsController } from './modules/widgets/QuestPointsController.js';
import { ShipsDisplay, StationsDisplay } from './modules/widgets/ShipsDisplay.js';
import { FlaresController } from './modules/widgets/FlaresController.js';
#==SPACE==#

#==SPACE==#

export class GameMastering extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selected: null,
      "sf_timer_value": 0
    }
    take_control(null)
  }
#==SPACE==#

  componentDidMount() {
    let timer_id = timerscounter.get(this.constructor.name)
    if (!timer_id) {
      clearInterval(timer_id)
    }
    timer_id = setInterval(() => {
      this.forceUpdate()
    }, 30)
    timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

  componentWillUnmount() {
    let timer_id = timerscounter.get(this.constructor.name)
    clearInterval(timer_id)
  }
#==SPACE==#

#==SPACE==#

  restart_simulation = () => {
    send_command("server", null, "restart", null, true)
  }
#==SPACE==#

  autoUpdateMap = (value) => {
    send_command("hBodiesPool", "admin", "set_realtime_update", { 'value': value })
  }
#==SPACE==#

  toogleSolarFlare = (value) => {
    send_command("solar_flare", "admin", "set_solar_flare", { 'state': value })
  }
#==SPACE==#

  toogleSolarFlareTimer = (value) => {
    send_command("solar_flare", "admin", "set_timer_state", { 'state': value })
  }
#==SPACE==#

#==SPACE==#

  setSolarFlareTimer = () => {
    send_command("solar_flare", "admin", "set_timer_value", { 'value': this.state.sf_timer_value })
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#
   
#==SPACE==#

  render() {
    return (<div
#==SPACE==#

      className='Administration'>
      <b>Administration</b>
      <div
        style={{
          "display": "flex",
          "flex-directin": "row"
        }}>
        <AdminRadarWidget />
        <div className='SystemsSection'>
          <ShipsDisplay on_module_selection = {this.props.on_module_selection}/>
          <StationsDisplay />
          <CommandEditorWidget />
          <FlaresController />
          <QuestPointsController />
#==SPACE==#

        </div>
      </div>
#==SPACE==#

    </div>)
  }
}

###===###.\front01\src\index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
#==SPACE==#

#==SPACE==#

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
 <React.StrictMode>
 <App />
 </React.StrictMode>
);
#==SPACE==#

#==SPACE==#


###===###.\front01\src\MapEditor.js
#==SPACE==#

import React from 'react'
#==SPACE==#

import { send_command } from './modules/network/connections.js'
#==SPACE==#

import { MapEditorRadarWidget } from './modules/widgets/MapEditorRadar.js';
import { HBodiesSelector, BodyEditor, BodySpawner, MapLoader } from './modules/widgets/BodiesSelector.js';
import { PerformanceViewer } from './modules/widgets/PerformanceWidget.js';
import { MapEditorBrushesWidget } from './modules/widgets/MapEditorBrushes.js';
import './styles/Administration.css'
import './styles/MapEditor.css'
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class MapEditor extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      selected_body_idx: "asdas",
      highlighted_body_idx: "",
      brush_state:{"active": false,},
    }
  }
#==SPACE==#

  componentDidMount() {
    this.take_control(null)
    send_command("hBodiesPool", "admin", "set_realtime_update", { 'value': true })
  }
  componentWillUnmount() {
    send_command("hBodiesPool", "admin", "set_realtime_update", { 'value': false })
  }
#==SPACE==#

  take_control = (key) => {
    send_command("connection", key, "take_control_on_entity", { 'target_id': key })
  }
#==SPACE==#

#==SPACE==#

  restart_simulation = () => {
    send_command("server", null, "restart", null, true)
  }
#==SPACE==#

  onBodyHighlight = (mark_id) => {
#==SPACE==#

    this.setState({ "highlighted_body_idx": mark_id })
  }
  onBodySelect = (mark_id) => {
    this.setState({ "selected_body_idx": mark_id })
  }
#==SPACE==#

  onBrushChange = (brush_state) => {
    this.setState({"brush_state":brush_state})
  }
#==SPACE==#

  render() {
    return (<div
#==SPACE==#

      className='Administration'>
      <h4>Administration</h4>
      <div>
#==SPACE==#

      </div>
      <div
        style={{
          "display": "flex",
          "flex-directin": "row"
        }}>
        <MapLoader></MapLoader>
        <MapEditorRadarWidget
          selected_body_idx={this.state.selected_body_idx}
          highlighted_body_idx={this.state.highlighted_body_idx}
          onBodySelect={this.onBodySelect}
          brush_state = {this.state.brush_state}
        />
        <div className='BodiesInteractorSection'>
          <HBodiesSelector
            onBodySelect={this.onBodySelect}
            onBodyHighlight={this.onBodyHighlight} />
#==SPACE==#

          <BodyEditor
            selected_body_idx={this.state.selected_body_idx}
#==SPACE==#

          />
          <BodySpawner
            onBodySelect={this.onBodySelect}
          />
          <MapEditorBrushesWidget
              onBrushChange = {this.onBrushChange}
          />
          <PerformanceViewer>
#==SPACE==#

          </PerformanceViewer>
        </div>
      </div>
#==SPACE==#

    </div>)
  }
}

###===###.\front01\src\MedicStation.js
#==SPACE==#

import React from 'react'
import { take_control } from './modules/network/connections';
import './styles/MedicStation.css'
import { get_locales } from './modules/locales/locales';
#==SPACE==#

import { send_command, get_system_state, get_observer_id } from './modules/network/connections';
import { timerscounter } from './modules/utils/updatetimers';
#==SPACE==#

export class MedicStation extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

  this.state = {
   data: {
#==SPACE==#

   },
   hided: true,
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
#==SPACE==#

  if (!get_observer_id()) {
   take_control("Sirocco")
  }
#==SPACE==#

 }
#==SPACE==#

 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
  let med_data = get_system_state("med_sm")
  if (med_data) this.setState({ "data": med_data })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#

 get_playerole_cards = () => {
  let result = [<b>{get_locales("Hospital Crew Control")}</b>]
  for (let rolename in this.state.data.roles) {
   result.push(<PlayerRoleHealthCard
    username={this.props.username}
    rolename={rolename}
    data={this.state.data.roles[rolename]}
   />)
  }
  return result
 }
#==SPACE==#

 remove_unit_from_hospital = () => {
  send_command("ship.med_sm", get_observer_id(), "remove_unit_from_hospital", { "value": 1 })
 }
 toogle_med_activity = ()=>{
  send_command("ship.med_sm", get_observer_id(), "toogle_activity", {})
 }
#==SPACE==#

 get_hospital_crew_control = () => {
  if (this.state.data) {
   if (!this.state.data.hospital)
    return []
  }
#==SPACE==#

  return <div style={{
   "display": "flex",
   "flex-direction": "column",
   "padding-bottom": "5px"
  }}>
   <b>{get_locales("Hospital NPC Crew Control")}</b>
   <label>{get_locales("humans in hospital")}: {this.state.data["hospital"]["units"]}/{this.state.data["hospital"]["capacity"]}</label>
   <progress value = {this.state.data["hospital"]["progress"]} max={100}></progress>
   {((this.props.username === "admin") | (this.props.username === "master_medic")) ?
    <button onClick={(e) => { this.remove_unit_from_hospital() }}> return to active crew </button> :
    <none></none>
   }
   <button onClick={(e) => { this.toogle_med_activity() }}> toogle_med_activity </button>
#==SPACE==#

  </div>
#==SPACE==#

 }
#==SPACE==#

#==SPACE==#

 render() {
  return (
   <div
    className='SystemControlWidget'>
#==SPACE==#

#==SPACE==#

    {this.get_hospital_crew_control()}
    {this.get_playerole_cards()}
   </div>
  )
 }
#==SPACE==#

}
#==SPACE==#

#==SPACE==#

class PlayerRoleHealthCard extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

  this.state = {
   selected_plague_state: null
  }
 }
 apply_cure = (scale_name, cure_type) => {
  send_command("ship.med_sm", get_observer_id(), "apply_" + cure_type + "_cure", { role: this.props.rolename, "axis": scale_name })
 }
#==SPACE==#

 add_points = (scale_name, points) => {
  send_command("ship.med_sm", get_observer_id(), "add_points", { role: this.props.rolename, "axis": scale_name, "value": points })
 }
#==SPACE==#

 username_is_master = () => {
  return (["master_medic", "admin"].includes(this.props.username))
 }
#==SPACE==#

 get_cure_block = (scale_name) => {
  if (!this.username_is_master()) return []
  let result = []
  let cures = ['light', 'hard', 'crit']
  for (let i in cures) {
   result.push(<button onClick={(e) => {
    this.apply_cure(scale_name, cures[i])
   }}>{cures[i]}</button>)
  }
  return result
 }
#==SPACE==#

 get_control_block = (scale_name) => {
  if (!this.username_is_master()) return []
  let result = []
  let cures = [-1, 1]
  for (let i in cures) {
   result.push(<button onClick={(e) => {
    this.add_points(scale_name, cures[i])
   }}>{cures[i]}</button>)
  }
  return result
 }
#==SPACE==#

 get_regulator = (scale_name) => {
  return (
   <div>
    <label>
     {scale_name}:{this.props.data[scale_name]} ({get_locales("health_state_" + scale_name + this.props.data[scale_name].toString())})
    </label>
    {this.get_cure_block(scale_name)}
    {this.get_control_block(scale_name)}
   </div>
  )
 }
#==SPACE==#

 send_plague_state = (value) => {
  send_command("ship.med_sm.plague", get_observer_id(), "set_plague_phase", { role: this.props.rolename, "phase":value })
 }
#==SPACE==#

 get_plague_phase_setter = () => {
  let plague_phases = [
   null,
   "incubation",
   "initial",
   "active",
   "active_terminal",
   "active_regen",
   "active_regen_terminal",
   "active_mental",
   "active_mental_terminal",
  ]
#==SPACE==#

  let options = []
  for (let i in plague_phases) {
   options.push(<option
    value={plague_phases[i]}
   >{plague_phases[i]}</option>)
  }
  return <div>
   <select onChange={(e) => { this.setState({ "selected_plague_state": e.target.value }) }}>{options}</select>
   <button onClick={(e) => { this.send_plague_state(this.state.selected_plague_state) }}> set plague state </button>
  </div>
#==SPACE==#

 }
#==SPACE==#

 get_plague_state = () => {
  if (!this.username_is_master()) return []
  let control_btn_layers = []
#==SPACE==#

#==SPACE==#

  return <div style={{"display":"flex",
  "flex-direction":"column"}}>
   <label>{get_locales("plague_phase")}: {this.props.data["plague"]["phase"]?this.props.data["plague"]["phase"]:"None"}</label>
   <label>{get_locales("time to next phase")}: {this.props.data["plague"]["time2next"]?this.props.data["plague"]["time2next"]:"None"}</label>
   {this.get_plague_phase_setter()}
  </div>
 }
#==SPACE==#

 get_curation_availability = () =>{
  return    <label>{get_locales("can_be_cured")}: {this.props.data["can_be_cured"].toString()}</label>
 }
#==SPACE==#

#==SPACE==#

 render() {
  return (<div className='PlayerRoleHealthCard'>
   <label>{this.props.rolename}</label>
   {this.get_regulator('HP')}
   {this.get_regulator('MP')}
   {this.get_curation_availability()}
   {this.get_plague_state()}
  </div>)
 }
}

###===###.\front01\src\PilotStation.js
#==SPACE==#

import React from 'react'
#==SPACE==#

#==SPACE==#

import { PlayersRadarWidget } from './modules/widgets/PlayerRadar.js';
import { DamageControlWidget } from './modules/systems/damage_sm.js';
import { EnergyControlWidget } from './modules/systems/energy_sm.js';
import { ResourcesControlWidget } from './modules/systems/resources_sm.js';
import { InteractionControlWidget } from './modules/systems/interact_sm.js';
import { RnDControlWidget } from './modules/systems/RnD_sm.js';
import { EngineControlWidget } from './modules/systems/engine_sm.js';
import { ShaftsControlWidget } from './modules/systems/launcher_sm.js';
import { ProjectileBuilderWidget } from './modules/systems/projectile_builder.js';
import './styles/PilotStation.css'
import { get_observer_id, get_system_state } from './modules/network/connections';
import { timerscounter } from './modules/utils/updatetimers';
import { CrewControlWidget } from './modules/systems/crew_sm.js';
import { EngineerControllerWidget } from './modules/widgets/ShipOverview.js';
import { RadarControlWidget } from './modules/systems/radar_sm.js';
import { CapMarksControlWidget } from './modules/widgets/CapMarksControlWidget.js';
import { ShipOvervieweWidgetLayer } from './modules/widgets/ShipOverview.js';
import { RoleManagerWidget } from './modules/widgets/RolesManager.js';
import { get_medicine_state } from './modules/network/connections';
#==SPACE==#

import { take_control } from './modules/network/connections';
export class PilotStation extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            selected: null,
            is_taking_damage: false,
            mental_stamina_level: 8
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
        if (this.props.captain | this.props.navigator | this.props.cannoneer | this.props.engineer | this.props.medic) {
            if (!get_observer_id()) {
                take_control("Sirocco")
            }
        }
#==SPACE==#

    }
#==SPACE==#

    set_MP_stamina_level = (mental_stamina_level) => {
        this.setState({ "mental_stamina_level": mental_stamina_level })
    }
#==SPACE==#

    get_MP_visual_effects_class = () => {
        if (this.state.mental_stamina_level > 5) return ""
        if (this.state.mental_stamina_level > 3) return "PilotStation_light_MP_fatigue"
        if (this.state.mental_stamina_level > 1) return "PilotStation_hard_MP_fatigue"
        return "PilotStation_crit_MP_fatigue"
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    proceed_data_message = () => {
        return
    }
#==SPACE==#

    get_current_panel = () => {
        if (this.props.captain) return "captain"
        if (this.props.navigator) return "navigator"
        if (this.props.cannoneer) return "cannoneer"
        if (this.props.engineer) return "engineer"
    }
#==SPACE==#

    render() {
        let is_taking_damage_class = ""
        if (this.state.is_taking_damage) {
            is_taking_damage_class = "is_taking_damage_class"
        }
#==SPACE==#

        let result = []
        if (this.props.admin) {
            result.push(<div className={'SystemsLayer SystemsLayerShort'}>
#==SPACE==#

                <CrewControlWidget />
                <RnDControlWidget />
                <DamageControlWidget />
                <EnergyControlWidget />
#==SPACE==#

#==SPACE==#

#==SPACE==#

            </div>)
#==SPACE==#

            result.push(<div className='ControlLayer'>
                <div className="engineControlSection">
                    <EngineControlWidget />
                    <InteractionControlWidget />
                    <RadarControlWidget />
                </div>
                <ShaftsControlWidget />
            </div>)
        }
#==SPACE==#

        if (this.props.engineer) {
            result.push(<EngineerControllerWidget
                role={"engineer"}
            />)
        }
        if (this.props.navigator) {
            result.push(<div className='ControlLayer'>
                <div className="engineControlSection">
                    <EngineControlWidget />
                    <InteractionControlWidget />
                </div>
            </div>)
        }
        if (this.props.cannoneer) {
            result.push(<div className='ControlLayer'>
                <ShaftsControlWidget />
                <ProjectileBuilderWidget />
                <ResourcesControlWidget />
            </div>)
        }
#==SPACE==#

        if (this.props.engineer_old) {
            let clname = 'SystemsLayer'
            result.push(<div className={clname}>
                <DamageControlWidget />
                <CrewControlWidget />
                <ResourcesControlWidget />
                <RnDControlWidget />
                <EnergyControlWidget />
#==SPACE==#

            </div>)
        }
        if (this.props.captain) {
            let clname = ''
            result.push(<div className={clname}>
                <ShipOvervieweWidgetLayer
                    role={"captain"}
                />
                <div style={{
                    'display': 'flex',
                    'flex-direction': 'row',
                    'height': 'fit-content'
                }}>
                    <CrewControlWidget />
                    <RoleManagerWidget />
                </div>
#==SPACE==#

                <CapMarksControlWidget />
            </div>)
        }
#==SPACE==#

#==SPACE==#

        if (this.props.NPC_pilot) {
            result.push(<div className={'SystemsLayer'}>
#==SPACE==#

                <DamageControlWidget />
                <EnergyControlWidget />
#==SPACE==#

#==SPACE==#

#==SPACE==#

            </div>)
#==SPACE==#

            result.push(<div className='ControlLayer'>
                <div className="engineControlSection">
                    <EngineControlWidget />
                    <RadarControlWidget />
                </div>
                <ShaftsControlWidget />
            </div>)
        }
#==SPACE==#

#==SPACE==#

        let add_className = this.get_MP_visual_effects_class()
#==SPACE==#

#==SPACE==#

#==SPACE==#

        return (<div
            className={'PilotStation ' + add_className}>
            <PlayersRadarWidget
                arrow_scaling = {this.props.navigator}
                can_aim={this.props.cannoneer | this.props.admin | this.props.NPC_pilot}
                cap_control={this.props.captain}
            />
#==SPACE==#

            <div className={"PilotStationControlSection " + is_taking_damage_class}>
                {result}
#==SPACE==#

            </div>
#==SPACE==#

            <MedicineStateWidget
                set_MP_stamina_level={this.set_MP_stamina_level}
                username={this.props.username}
            />
#==SPACE==#

#==SPACE==#

        </div >)
    }
}
#==SPACE==#

#==SPACE==#

class MedicineStateWidget extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            "active": true
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.define_state, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    define_state = () => {
#==SPACE==#

        if (["captain", "engineer", "navigator", "cannoneer"].includes(this.props.username)) {
            let state = get_medicine_state(this.props.username)
            let med_state = get_system_state("med_sm")
            let user_stats_MP = 8
            if (med_state) {
                user_stats_MP = med_state["roles"][this.props.username]["MP"]
            }
            this.props.set_MP_stamina_level(user_stats_MP)
            this.setState({ "active": state })
        }
#==SPACE==#

    }
    render() {
        if (!this.state.active)
            return (
                <Modal>
                    <label>{this.props.username}: ВЫ ПОЛУЧИЛИ РАНЕНИЕ! ОБРАТИТЕСЬ К МЕДИКУ!</label>
                </Modal>
            )
        return (<div></div>)
    }
}
#==SPACE==#

#==SPACE==#

export const Modal = ({ handleClose, show, children }) => {
    const showHideClassName = show ? "display-block" : "display-none modal";
    //////console.log("MODAL", show, children, typeof (children))
#==SPACE==#

    let child_elem = React.cloneElement(children, {
        cancel_button: <button className='button_grey' onClick={handleClose}>close</button>,
    })
#==SPACE==#

    return (
        <div className={showHideClassName}>
            <section className="modal_page">
#==SPACE==#

                <div className="modalcontent">
                    {child_elem}
                </div>
#==SPACE==#

            </section>
        </div>
    );
};

###===###.\front01\src\modules\configs\configs.js
#==SPACE==#

export const ip = "localhost"
//export const ip = "192.168.1.4"
#==SPACE==#

export function is_local(){
 //return false
 return ip==="localhost"
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\src\modules\locales\locales.js
#==SPACE==#

#==SPACE==#

const locales = {
    //shafts
    "ProjectileLauncher Control": "Торпедный аппарат",
    "load": "Загрузить",
    "unload": "Выгрузить",
    "SHAFT": "ПУСКОВАЯ",
    "auto_toggle": "авто-переключение",
    "auto_reload": "авто-перезарядка",
#==SPACE==#

#==SPACE==#

    //Projectile constructor
    "Projectile constructor": "Конструктор торпед",
    //Projectile Components
    "thruster": "Двигатель",
    "timer": "Таймер активации",
    "inhibitor": "Замедлитель",
    "explosive": "Взрывчатка",
    "emp": "ЭМП-излучатель",
    "entities_detection": "Детектор кораблей",
    "projectiles_detection": "Детектор снарядов",
    "buster": "Ускоритель",
    "detonator": "Детонатор",
    "decoy": "Приманка",
    //blueprints
    "SAVE": "Сохранить",
    "DELETE": "Удалить",
#==SPACE==#

#==SPACE==#

    //Projectile Stats
    "activation_time": "Макс.время до активации",
    "cost": "Стоимость",
    "emp_radius": "Радиус ЭМП-поражения",
    "explosion_radius/damage": "Радиус/Макс.урон взрыва",
    "projectiles_detection_radius": "Радиус обнаружения снарядов",
    "ship_detection_radius": "Радиус обнаружения кораблей",
    "speed_up": "Скорость",
    "ttl_time": "Активное время",
    "details": "К-во деталей",
    "velocity_penalty": "Управляемость",
#==SPACE==#

    //Production sm
    "Production_sm": "Автофабрика",
    "metal": "Металл",
    "volume": "Склад изделий",
    "cancel_item": "Отменить производство",
    "clear_production": "Очистить очередь",
#==SPACE==#

#==SPACE==#

    //Radar control
    "Radar control": "Сканеры дальнего радиуса действия",
    "distant_arc": "Фокусировка",
    "distant_dir": "Направление",
#==SPACE==#

#==SPACE==#

    //Medic station
    "Hospital Crew Control": "Состояние здоровья экипажа мостика",
    "Hospital NPC Crew Control": "Состояние здоровья рядового экипажа",
    "humans in hospital": "Мест в лазарете(занято/всего)",
    "plague_phase": "Фаза чумы",
    "plague_time2next_level": "До следующей фазы",
#==SPACE==#

    "health_state_HP9": "???",
    "health_state_HP8": "Норма",
    "health_state_HP7": "Легкое ранение",
    "health_state_HP6": "Легкое ранение",
    "health_state_HP5": "Легкое ранение",
    "health_state_HP4": "Тяжелое ранение",
    "health_state_HP3": "Тяжелое ранение",
    "health_state_HP2": "Тяжелое ранение",
    "health_state_HP1": "!Критическое!",
#==SPACE==#

#==SPACE==#

    "health_state_MP9": "",
    "health_state_MP8": "Норма",
    "health_state_MP7": "Норма",
    "health_state_MP6": "Норма(признаки скорой усталости)",
    "health_state_MP5": "Легкая усталость",
    "health_state_MP4": "Легкая усталость",
    "health_state_MP3": "Сильная усталость",
    "health_state_MP2": "Сильная усталость",
    "health_state_MP1": "!Критическое!",
#==SPACE==#

    //Названия систем
    "engine_sm": "Двигатели",
    "launcher_sm": "Торпедный аппарат",
    "radar_sm": "Сканеры",
    "resources_sm": "Внутренние системы",
    "energy_sm": "Реактор",
#==SPACE==#

    //Energy control
    "Energy control": "Реактор",
#==SPACE==#

#==SPACE==#

    //Crew control
    "CrewControl": "Экипаж корабля",
    "total_crew": "Общая численность",
    "free_crew": "Свободно",
    "hospital": "В госпитале",
    "idle":"Отдых",
#==SPACE==#

    //CrewTeams
    "smith":"Лт.Смит",
    "johnson":"Лт.Джонсон",
    "wake":"Лт.Уэйк",
    "sharp":"Лт.Шарп",
#==SPACE==#

    //Engineer 
    "assign_team": "Назначить рем.команду",
    "hp": "Целостность",
    "upgrade_level": "Уровень апгрейда",
    "Release_team":"Отправить на отдых",
#==SPACE==#

    //Engine system
    "Acceleration Control": "Управление двигателем",
    "speed": "Скорость",
    "direction": "Курс",
    "deltaV": "дельта-V",
#==SPACE==#

    "prediction_depth": "Прогноз",
    "engine_power": "Мощность",
    "overheat": "Перегрев",
#==SPACE==#

    //InteractionControl
    "InteractionControl": "Управление захватом",
#==SPACE==#

    //roles
    "username": "Офицер",
    "captain": "Капитан",
    "navigator": "Навигатор",
    "cannoneer": "Канонир",
    "engineer": "Инженер",
    "medic": "Медик",
#==SPACE==#

#==SPACE==#

    //radar
    "toogle_id_labels": "Просмотр идентифкаторов",
    "POS": "Координаты",
    "CURSOR_POS": "Координаты курсора",
    "SCALE": "Масштаб",
    "common_radar":"Общий радар",
#==SPACE==#

#==SPACE==#

    //CapPointsController
    "CapPointsController": "Навигационные метки",
    "MarkLetter": "Метка",
    "Position": "Координаты",
    "Status": "Статус",
    "select": "Поставить",
    "deaсtivate": "Сбросить",
#==SPACE==#

    //solar_flares
    "time_to_next_sf_phase": "До следующей Вспышки[c]"
}
#==SPACE==#

#==SPACE==#

export function get_locales(s) {
    if (s in locales) {
        return locales[s]
    }
    return s
}

###===###.\front01\src\modules\network\connections.js
#==SPACE==#

#==SPACE==#

import { ip } from "../configs/configs";
#==SPACE==#

let path2server_ws = "ws://" + ip + ":5000/"
let path2server_http = "http://" + ip + ":1924/"
#==SPACE==#

#==SPACE==#

let websocket = new WebSocket(path2server_ws);
let input_message_string = ""
let input_message_last_timestamp = ""
#==SPACE==#

export function addEventListener(f) {
    if (websocket) websocket.addEventListener("message", f)
}
export function removeEventListener(f) {
    if (websocket) websocket.removeEventListener("message", f)
}
#==SPACE==#

function receive_message({ data }) {
    input_message_string = data
    input_message_last_timestamp = new Date()
}
#==SPACE==#

websocket.addEventListener("message", receive_message)
#==SPACE==#

#==SPACE==#

function check_connection_and_update() {
    //console.log("check_connection_and_update", websocket)
    send_command("connection", "admin", "ping", {})
    if (new Date() - input_message_last_timestamp > 300) {
        websocket.removeEventListener("message", receive_message)
        try {
            websocket = new WebSocket(path2server_ws);
            websocket.addEventListener("message", receive_message)
        }
        catch (error) {
#==SPACE==#

        }
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    }
}
#==SPACE==#

//setInterval(check_connection_and_update, 1000)
#==SPACE==#

export function get_websocket() {
    return websocket
}
#==SPACE==#

#==SPACE==#

export function get_http_address() {
    return path2server_http
}
#==SPACE==#

export let current_mark_id = null
#==SPACE==#

export function send_command(level, target_id, command, params, null_confirmed = false) {
    if (websocket.readyState !== 1) return
    if (!null_confirmed) if (!target_id) if (command !== "take_control_on_entity") return
    if (command === "take_control_on_entity") current_mark_id = target_id
#==SPACE==#

#==SPACE==#

#==SPACE==#

    let res = {
        "level": level,
        "target_id": target_id,
        "action": command,
        "params": params
    }
#==SPACE==#

    websocket.send(JSON.stringify(res));
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

export function get_system_state(system_name) {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("state_data" in message_data_json)) return null
    if (!message_data_json['state_data']) return null
    if (!(system_name in message_data_json['state_data'])) return null
    return message_data_json['state_data'][system_name]
}
#==SPACE==#

#==SPACE==#

export function get_navdata() {
    try {
        let message_data_json = JSON.parse(input_message_string)
        if (typeof (message_data_json) != typeof ({})) return null
        if (!("nav_data" in message_data_json)) return null
        if (!("hBodies" in message_data_json['nav_data'])) return null
        if (!("lBodies" in message_data_json['nav_data'])) return null
        return message_data_json['nav_data']
    } catch (error) {
        return null
    }
#==SPACE==#

#==SPACE==#

#==SPACE==#

}
#==SPACE==#

#==SPACE==#

export function get_performance() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("performance" in message_data_json)) return null
    return message_data_json['performance']
}
#==SPACE==#

#==SPACE==#

export function get_server_systems_state() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("systems_state" in message_data_json)) return null
#==SPACE==#

#==SPACE==#

#==SPACE==#

    return message_data_json['systems_state']
}
#==SPACE==#

#==SPACE==#

export function get_ships_state() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("ships_state" in message_data_json)) return null
    return message_data_json['ships_state']
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

export function get_stations_state() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("stations_state" in message_data_json)) return null
    return message_data_json['stations_state']
}
#==SPACE==#

export function get_observer_id() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("observer_id" in message_data_json)) return null
    return message_data_json['observer_id']
#==SPACE==#

#==SPACE==#

#==SPACE==#

}
#==SPACE==#

export function get_capmarks() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("cap_marks" in message_data_json)) return null
    return message_data_json['cap_marks']
}
#==SPACE==#

export function get_solarflare() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("solar_flare" in message_data_json)) return null
    return message_data_json['solar_flare']
}
#==SPACE==#

#==SPACE==#

export function get_medicine_state(username) {
    let message_data_json = get_system_state("med_sm")
    if (!message_data_json) return true
    if (!("roles" in message_data_json)) return true
    return !message_data_json["roles"][username]["disabled"]
#==SPACE==#

}
#==SPACE==#

export function take_control(key) {
    send_command("connection", key, "take_control_on_entity", { 'target_id': key })
}
#==SPACE==#

#==SPACE==#

export function is_taking_damage() {
    let message_data_json = get_system_state("damage_sm")
    if (!message_data_json) return false
    return message_data_json["is_taking_damage"]
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

export function get_map_border() {
    let message_data_json = JSON.parse(input_message_string)
    if (typeof (message_data_json) != typeof ({})) return null
    if (!("map_border" in message_data_json)) return null
    return message_data_json['map_border']
}
###===###.\front01\src\modules\renderers\CursorRenderer.js
#==SPACE==#

import { useLoader } from '@react-three/fiber'
import React, { useRef } from 'react'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { useFrame, useThree } from '@react-three/fiber'
import { Vector3 } from 'three'
import { MarkerCircle } from './GraphicsCoreMeshes'
#==SPACE==#

class EntityRendererCursor {
#==SPACE==#

 get_objects_from_data = (onUseFrame, onClick) => {
  let objects = []
  objects.push(<CursorMarker
   position={[0, 0, 0]}
   //size = {600}
   onUseFrame={onUseFrame}
   onClick={onClick}
  ></CursorMarker>)
  return objects
 }
}
export const entityRendererCursor = new EntityRendererCursor()
#==SPACE==#

export function get_brush_object(brush_params, scale_factor) {
 if (!brush_params["active"]) return []
 let color = 0xffffff
 if (brush_params["mode"]=="deleter"){
  color = 0xff0000
 }
 if (brush_params["mode"]=="obstacles_creator"){
  color = 0x00ff00
 }
 if (brush_params["mode"]=="selector"){
  color = 0x00ffff
 }
 return ([
  <MarkerCircle
   position={brush_params["position"]}
   thickness={"thin"}
   color = {color}
   scale_factor={scale_factor}
   radius={brush_params["radius"]}
   level={0}>
  </MarkerCircle>
 ])
}
#==SPACE==#

export function CursorMarker(props) {
 const texture = useLoader(TextureLoader, 'markers/crosschair.png')
 const meshRef = useRef()
 const { pointer } = useThree()
#==SPACE==#

#==SPACE==#

 // Subscribe this component to the render-loop, rotate the mesh every frame
#==SPACE==#

#==SPACE==#

 useFrame((state, delta) => {
  const vector = new Vector3(pointer.x * 300, pointer.y * 300, 0);
  meshRef.current.position.set(vector.x, vector.y, 3);
  props.onUseFrame(pointer)
 })
#==SPACE==#

 return (
  <mesh
   {...props}
   ref={meshRef}
   onClick={(event) => (props.onClick())}
  >
   <boxGeometry args={[40, 40, 0.1]} />
   <meshStandardMaterial map={texture} color={props.color ? props.color : 0xffffff} transparent={true} />
  </mesh>
 )
}

###===###.\front01\src\modules\renderers\EntityRenderer.js
import React from 'react'
#==SPACE==#

import { MeshObject, GuiMeshObject, MarkerCircleDash, MarkerCircle, MarkerDot } from './GraphicsCoreMeshes.js'
import { getDistantScanArc } from './RadarRenderer.js'
import { TextMesh } from './TextCoreMeshes.js'
#==SPACE==#

class EntityRenderer {
#==SPACE==#

  get_objects_from_data = (data, scale_factor, gui_settings = []) => {
#==SPACE==#

    if (!data) { return [] }
#==SPACE==#

    let objects_list = []
#==SPACE==#

    let scale_params = {
      "scale_factor": scale_factor,
      "scale_offset": data["observer_pos"]
    }
#==SPACE==#

    let show_gravity = false
    if ("show_gravity" in gui_settings)
      if (gui_settings["show_gravity"])
        show_gravity = true
#==SPACE==#

    let show_id_labels = false
    if ("show_id_labels" in gui_settings)
      if (gui_settings["show_id_labels"])
        show_id_labels = true
#==SPACE==#

    let arrow_scaling = false
    if ("arrow_scaling" in gui_settings) arrow_scaling = gui_settings["arrow_scaling"]
#==SPACE==#

    if ("map_border" in gui_settings)
      if (gui_settings["map_border"])
        objects_list.push(<MarkerCircle
#==SPACE==#

          position={[0,0]}
          scale_factor={scale_factor}
          scale_offset={scale_params["scale_offset"]}
          radius={gui_settings["map_border"]}
          color={0xffff00}
        />)
#==SPACE==#

#==SPACE==#

    for (let hbody_id in data["hBodies"]) {
      let tmp = get_Rendered_hBody(hbody_id, data["hBodies"][hbody_id], scale_params, show_gravity)
      objects_list = objects_list.concat(tmp)
    }
#==SPACE==#

    for (let lbody_id in data["lBodies"]) {
      let tmp = get_Rendered_lBody(data["mark_id"], lbody_id, data["lBodies"][lbody_id], data["visible_ships"], scale_params, show_id_labels, arrow_scaling)
      objects_list = objects_list.concat(tmp)
    }
#==SPACE==#

    objects_list.push(<ScaleMarker scale_factor={scale_params["scale_factor"]} />)
#==SPACE==#

    return objects_list
  }
#==SPACE==#

#==SPACE==#

  get_selection_marker = (data, scale_factor, selected_body_idx) => {
    if (!data) { return [] }
    if (!selected_body_idx) return []
#==SPACE==#

    let objects_list = []
#==SPACE==#

    let scale_params = {
      "scale_factor": scale_factor,
      "scale_offset": data["observer_pos"]
    }
#==SPACE==#

    for (let hbody_id in data["hBodies"]) {
      if (hbody_id === selected_body_idx) {
        let descr = data["hBodies"][hbody_id]
        objects_list.push(<MarkerCircle
          thickness={"bold"}
          position={descr["pos"]}
          scale_factor={scale_params["scale_factor"]}
          scale_offset={scale_params["scale_offset"]}
          radius={30}
          color={0x00ff00}
        ></MarkerCircle>)
        return objects_list
      }
#==SPACE==#

    }
#==SPACE==#

    for (let body_id in data["lBodies"]) {
      if (body_id === selected_body_idx) {
        let descr = data["lBodies"][body_id]
        objects_list.push(<MarkerCircle
          thickness={"bold"}
          position={descr["pos"]}
          scale_factor={scale_params["scale_factor"]}
          scale_offset={scale_params["scale_offset"]}
          radius={30}
          color={0x00ff00}
        ></MarkerCircle>)
        return objects_list
      }
#==SPACE==#

    }
#==SPACE==#

#==SPACE==#

    return objects_list
  }
}
#==SPACE==#

#==SPACE==#

export class ScaleMarker extends React.Component {
  render() {
    const texture = 'markers/scale_line.png'
    return (
      <GuiMeshObject
        texture={texture}
        position={[-280, -280, 0]}
        size={100}
        level={3}
        //rotation={this.props.rotation}
        //color={this.props.color}
        scale_offset={[-240 * this.props.scale_factor, -240 * this.props.scale_factor, 0]}
        scale_factor={this.props.scale_factor}
      //scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export const entityRenderer = new EntityRenderer()
#==SPACE==#

/*{
 "pos":[self.position[0].item(), self.position[1].item()], 
 "mass":self.mass, 
 "gr": self.gravity_well_radius
 }*/
#==SPACE==#

let get_Rendered_hBody = (id, descr, scale_params, show_gravity) => {
  let global_position_x = descr["pos"][0] * scale_params["scale_factor"] - scale_params["scale_offset"][0] * scale_params["scale_factor"]
  if (global_position_x > 400) return []
  if (global_position_x < -400) return []
  let global_position_y = descr["pos"][1] * scale_params["scale_factor"] - scale_params["scale_offset"][1] * scale_params["scale_factor"]
  if (global_position_y > 400) return []
  if (global_position_y < -400) return []
  let objects = []
  let level = 0
  if (!descr) return
  if ("mapped" in descr) {
    if (descr["mapped"]) {
      level = 2
    }
  }
#==SPACE==#

  let marker_type = descr['marker_type']
#==SPACE==#

  if (["hBody", "ResourceAsteroid"].includes(marker_type)) {
    objects.push(<MarkerAsteroid
      position={descr["pos"]}
      size={descr["critical_r"]}
      scale_factor={scale_params["scale_factor"]}
      scale_offset={scale_params["scale_offset"]}
      level={level}
    ></MarkerAsteroid>)
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#

  if (show_gravity) {
    objects.push(<MarkerCircle
      position={descr["pos"]}
      thickness={"thin"}
      scale_factor={scale_params["scale_factor"]}
      scale_offset={scale_params["scale_offset"]}
      radius={descr["gr"]}
      level={level}
    ></MarkerCircle>)
  }
#==SPACE==#

  if ('critical_r' in descr) {
    objects.push(<MarkerCircle
      position={descr["pos"]}
      thickness={"thin"}
      scale_factor={scale_params["scale_factor"]}
      scale_offset={scale_params["scale_offset"]}
      radius={descr["critical_r"]}
      color={0xff0000}
      level={level}
    ></MarkerCircle>)
  }
#==SPACE==#

  if ('mining_radius' in descr) {
    objects.push(<MarkerCircle
      position={descr["pos"]}
      thickness={"thin"}
      scale_factor={scale_params["scale_factor"]}
      scale_offset={scale_params["scale_offset"]}
      radius={descr["mining_radius"]}
      color={0x00ffff}
      level={level}
    ></MarkerCircle>)
  }
  return objects
#==SPACE==#

}
#==SPACE==#

/* [
{
   "id": self.mark_id, 
   "type": self.type,
   "alias": "neutral", 
   "pos": [self.positions[1][0].item(), self.positions[1][1].item()],
   "vel": [self.velocities[1][0].item(),self.velocities[1][1].item()],
   "predictions": self.get_prediction() - optional
  }
  ] - relative code on back */
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

let get_Rendered_lBody = (observer_id, id, descr, visible_ships, scale_params, show_id_labels, arrow_scaling) => {
#==SPACE==#

  let global_position_x = descr["pos"][0] * scale_params["scale_factor"] - scale_params["scale_offset"][0] * scale_params["scale_factor"]
  if (global_position_x > 400) return []
  if (global_position_x < -400) return []
  let global_position_y = descr["pos"][1] * scale_params["scale_factor"] - scale_params["scale_offset"][1] * scale_params["scale_factor"]
  if (global_position_y > 400) return []
  if (global_position_y < -400) return []
  let alias = "neutral"
  if (observer_id) {
    if (observer_id === id) {
      alias = "self"
    }
    else {
      if ((descr["marker_type"] === "projectile") || (descr["marker_type"] === "io_Drone")) {
        alias = "enemy"
        if (descr["master_id"] === observer_id) alias = "friend"
      }
      else if (descr["marker_type"] === "ae_Ship") {
        alias = "enemy"
      }
    }
  }
#==SPACE==#

  let alias_levels = {
    "neutral": 15,
    "self": 10,
    "friend": 5,
    "enemy": 0,
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

  let objects = []
  let color = 0xffffff
  if (alias === "self") color = 0x00ff00
  if (alias === "friend") color = 0xffff00
  if (alias === "enemy") color = 0xff0000
#==SPACE==#

  if (show_id_labels)
    if (visible_ships.includes(id)) {
#==SPACE==#

      objects.push(<MarkerShipIdentifierP1
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerShipIdentifierP1>)
#==SPACE==#

      objects.push(<MarkerShipIdentifierP2
        color={color}
        text={id}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerShipIdentifierP2>)
    }
#==SPACE==#

#==SPACE==#

  switch (descr["marker_type"]) {
    case "ae_Ship": {
      objects.push(<MarkerShip
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerShip>)
#==SPACE==#

      break
    }
#==SPACE==#

    case "ShipDebris": {
      objects.push(<MarkerShipDebris
        color={0xffffff}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerShipDebris>)
#==SPACE==#

      break
    }
#==SPACE==#

    case 'Kraken': {
      objects.push(<MarkerKraken
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerKraken>)
#==SPACE==#

      break
    }
#==SPACE==#

#==SPACE==#

    case "SpaceStation": {
      objects.push(<MarkerSpaceStation
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerSpaceStation>)
      break
    }
#==SPACE==#

    case "SpaceStationDebris": {
      objects.push(<MarkerSpaceStationDebris
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerSpaceStationDebris>)
      break
    }
#==SPACE==#

#==SPACE==#

    case 'QuantumShadow': {
      objects.push(<MarkerShip
        color={0x00ffff}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
        level={0}
      ></MarkerShip>)
      break
    }
#==SPACE==#

    case "projectile": {
      objects.push(<MarkerProjectile
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerProjectile>)
      break
    }
#==SPACE==#

    case 'ae_BasicZone': {
      color = 0xff0000
      if (descr['blast_type'] === "ae_EMPZone") color = 0x00ffff
      objects.push(<MarkerDangerZone
        color={color}
        position={descr["pos"]}
        level={-1}
        radius={descr["danger_radius"] * 1.1}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerDangerZone>)
      break
    }
#==SPACE==#

    case 'MeteorsCloud': {
      objects.push(<MarkerMeteorsCloud
        position={descr["pos"]}
        radius={descr["danger_radius"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerMeteorsCloud>)
      break
    }
#==SPACE==#

    case "io_Drone":
      objects.push(<MarkerDrone
        color={color}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerDrone>)
      break
#==SPACE==#

    case 'interactable_object':
      objects.push(<MarkerInteractableObject
        color={0xffffff}
        position={descr["pos"]}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerInteractableObject>)
      break
    default: break;
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#

  if (alias_levels[alias] >= 5) {
#==SPACE==#

    let p = 0
    if ("predictions" in descr) {
#==SPACE==#

#==SPACE==#

      for (p in descr["predictions"]) {
        objects.push(<MarkerDot
          color={color}
          level={3}
          position={descr["predictions"][p]}
          scale_factor={scale_params["scale_factor"]}
          scale_offset={scale_params["scale_offset"]}
        ></MarkerDot>)
      }
      if ('explosion_radius' in descr) {
        if (descr["predictions"][p]) {
          objects.push(<MarkerCircle
            thickness={"normal"}
            level={3}
            radius={descr["explosion_radius"]}
            position={descr["predictions"][p]}
            color={0xffff00}
            scale_factor={scale_params["scale_factor"]}
            scale_offset={scale_params["scale_offset"]}
          ></MarkerCircle>)
        }
      }
    }
#==SPACE==#

    if ('detection_radius' in descr) {
      objects.push(<MarkerCircle
        thickness={"normal"}
        radius={descr["detection_radius"]}
        position={descr["pos"]}
        color={0x00ffff}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerCircle>)
    }
#==SPACE==#

    if ('detonation_radius' in descr) {
      objects.push(<MarkerCircle
        thickness={"bold"}
        radius={descr["detonation_radius"]}
        position={descr["pos"]}
        color={0xff0000}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerCircle>)
    }
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    if ("close_scanrange" in descr) {
      objects.push(<MarkerCircleDash
        radius={descr["close_scanrange"]}
        position={descr["pos"]}
        level={2}
        color={0x00ffff}
        scale_factor={scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerCircleDash>)
    }
#==SPACE==#

    if ("distant_scanrange" in descr) {
      let scan_params = descr["distant_scanrange"]
      let radar_arcs = getDistantScanArc(scan_params.close_range, scan_params.distant_range, scan_params.distant_arc, scan_params.distant_dir, descr["pos"], scale_params["scale_factor"], scale_params["scale_offset"])
      objects = objects.concat(radar_arcs)
    }
#==SPACE==#

    if ("direction" in descr) {
      objects.push(<MarkerDirection
        level={2}
        color={color}
        rotation={descr["direction"]}
        position={descr["pos"]}
        scale_factor={arrow_scaling ? 1 : scale_params["scale_factor"]}
        scale_offset={scale_params["scale_offset"]}
      ></MarkerDirection>)
    }
  }
#==SPACE==#

  return objects
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

//контейнеры и дроны
export class MarkerInteractableObject extends React.Component {
  render() {
    const texture = 'markers/interactable.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={15}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

#==SPACE==#

export class MarkerDrone extends React.Component {
  render() {
    const texture = 'markers/drone.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={15}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

#==SPACE==#

//опасные зоны
export class MarkerDangerZone extends React.Component {
  render() {
    const texture = 'markers/explosion.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={this.props.radius * 2}
        color={this.props.color}
        level={this.props.level}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

#==SPACE==#

export class MarkerMeteorsCloud extends React.Component {
  render() {
    const texture = 'markers/meteors_cloud.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={this.props.radius * 2}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

//снаряды
export class MarkerProjectile extends React.Component {
  render() {
    const texture = 'markers/projectile.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={15}
        level={-1}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

//корабли
export class MarkerShip extends React.Component {
  render() {
    const texture = 'markers/ship.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1] + 5, 0]}
        size={30}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export class MarkerKraken extends React.Component {
  render() {
    const texture = 'markers/Kraken.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1] + 5, 0]}
        size={30}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export class MarkerShipDebris extends React.Component {
  render() {
    const texture = 'markers/ship_debris.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1] + 5, 0]}
        size={30}
        color={0xffffff}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export class MarkerSpaceStation extends React.Component {
  render() {
    const texture = 'markers/space_station.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1] + 5, 0]}
        size={40}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export class MarkerSpaceStationDebris extends React.Component {
  render() {
    const texture = 'markers/space_station_debris.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1] + 5, 0]}
        size={40}
        color={0xffffff}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

#==SPACE==#

export class MarkerShipIdentifierP1 extends React.Component {
  render() {
    const texture = 'markers/ship_name.png'
    let size_x = 40
    let size_y = 30
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0] + size_x / 2, this.props.position[1] + 2 + size_y / 2, 0]}
        size={40}
        level={3}
#==SPACE==#

#==SPACE==#

        color={this.props.color}
        size_array={[size_x, size_y, 5]}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export class MarkerShipIdentifierP2 extends React.Component {
  render() {
    let size_x = 40
    let size_y = 30
    return (
      <TextMesh
        text={this.props.text}
        position={[this.props.position[0] + size_x / 2, this.props.position[1] + 5 + size_y, 0]}
        level={3}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

export class MarkerDirection extends React.Component {
  render() {
    const texture = 'markers/direction.png'
    return (
      <MeshObject
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={50}
        rotation={this.props.rotation}
        color={this.props.color}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

//Гравитационные колодцы, радиусы досягаемости, etc
export class MarkerAsteroid extends React.Component {
  render() {
    const texture = 'asteroids/1.png'
    let size = this.props.size ? this.props.size : 15
    return (
      <MeshObject
        level={this.props.level}
        texture={texture}
        position={[this.props.position[0], this.props.position[1], 0]}
        size={size * 2}
        scale_factor={this.props.scale_factor}
        scale_offset={this.props.scale_offset}
      />
    )
  }
}

###===###.\front01\src\modules\renderers\GraphicsCoreMeshes.js
import { useLoader } from '@react-three/fiber'
import React, { useRef} from 'react'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
#==SPACE==#

//Гравитационные колодцы, радиусы досягаемости, etc
export class MarkerCircleDash extends React.Component {
 render() {
 const texture = 'markers/circle_dash.png'
 return (
  <MeshObject
  texture={texture}
  level = {this.props.level}
  color={this.props.color}
  position={[this.props.position[0], this.props.position[1], 0]}
  size={this.props.radius * 2}
  scale_factor={this.props.scale_factor}
  scale_offset={this.props.scale_offset}
  />
 )
 }
}
#==SPACE==#

#==SPACE==#

//Гравитационные колодцы, радиусы досягаемости, etc
export class MarkerCircle extends React.Component {
 render() {
 let texture = 'markers/circle_normal.png'
 if (this.props.thickness) texture = 'markers/circle_'+this.props.thickness+'.png'
 return (
  <MeshObject
  texture={texture}
  level = {this.props.level}
  color={this.props.color}
  position={[this.props.position[0], this.props.position[1], 0]}
  size={this.props.radius * 2}
  scale_factor={this.props.scale_factor}
  scale_offset={this.props.scale_offset}
  />
 )
 }
}
#==SPACE==#

export class MarkerDot extends React.Component {
 render() {
 const texture = 'markers/dot.png'
 return (
  <MeshObject
  texture={texture}
  position={[this.props.position[0], this.props.position[1], 0]}
  size = {2}
  no_scale_size={true}
  level = {this.props.level}
  color={this.props.color}
  scale_factor={this.props.scale_factor}
  scale_offset={this.props.scale_offset}
  />
 )
 }
}
#==SPACE==#

/*
texture = file with pict
scale_factor - for rescaling 
size - size of image
position = [x, y]
color = color of lines
*/
export function MeshObject(props) {
 const texture = useLoader(TextureLoader, props.texture)
 const meshRef = useRef()
 let scale_factor = props.scale_factor ? props.scale_factor : 1
 let scale_offset = props.scale_offset ? props.scale_offset : [0, 0]
 props.position[0] = props.position[0] * scale_factor - scale_offset[0] * scale_factor
 props.position[1] = props.position[1] * scale_factor - scale_offset[1] * scale_factor
 props.position[2] = props.level ? props.level:0
#==SPACE==#

 let rotation = props.rotation ? props.rotation : 0
 rotation = rotation/180*3.1415
#==SPACE==#

 let size_array = [props.size, props.size]
 if (props.size_array){
 size_array = props.size_array
#==SPACE==#

 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 if (!props.no_scale_size){
 for(let i in size_array){
  size_array[i] = size_array[i]* scale_factor
 }
 }
#==SPACE==#

 let min_size = props.min_size?props.min_size:1
#==SPACE==#

 for(let i in size_array){
 if (size_array[i]<min_size){
  size_array[i] = min_size
 }
 }
 size_array = [size_array[0], size_array[1], 0.1]
#==SPACE==#

 return (
 <mesh
  {...props}
  ref={meshRef}
  rotation = {[0,0,rotation]}
 >
  <boxGeometry args={size_array} />
  <meshStandardMaterial map={texture} color={props.color ? props.color : 0xffffff} transparent={true} />
 </mesh>
 )
}
#==SPACE==#

#==SPACE==#

export function GuiMeshObject(props) {
    const texture = useLoader(TextureLoader, props.texture)
    const meshRef = useRef()
    let scale_factor = props.scale_factor ? props.scale_factor : 1
    let scale_offset = props.scale_offset ? props.scale_offset : [0, 0]
#==SPACE==#

#==SPACE==#
    
#==SPACE==#
   
    let rotation = props.rotation ? props.rotation : 0
    rotation = rotation/180*3.1415
#==SPACE==#
   
    let size_array = [props.size, props.size]
    if (props.size_array){
    size_array = props.size_array
#==SPACE==#
   
    }
#==SPACE==#
   
#==SPACE==#
   
#==SPACE==#
     
    if (!props.no_scale_size){
    for(let i in size_array){
     size_array[i] = size_array[i]* scale_factor
    }
    }
#==SPACE==#
   
    let min_size = props.min_size?props.min_size:1
#==SPACE==#
   
    for(let i in size_array){
    if (size_array[i]<min_size){
     size_array[i] = min_size
    }
    }
    size_array = [size_array[0], size_array[1], 0.1]
#==SPACE==#
   
    props.position[0] = props.position[0]+size_array[0]/2
    props.position[1] = props.position[1]+size_array[1]/2
    props.position[2] = props.level ? props.level:0
#==SPACE==#

    return (
    <mesh
     {...props}
     ref={meshRef}
     rotation = {[0,0,rotation]}
    >
     <boxGeometry args={size_array} />
     <meshStandardMaterial map={texture} color={props.color ? props.color : 0xffffff} transparent={true} />
    </mesh>
    )
   }
###===###.\front01\src\modules\renderers\RadarRenderer.js
#==SPACE==#

import React from 'react'
#==SPACE==#

import { MeshObject, MarkerDot } from './GraphicsCoreMeshes.js'
import { Vector2 } from 'three'
#==SPACE==#

#==SPACE==#

class RadarRenderer {
#==SPACE==#

 get_objects_from_data = (data, scale_factor) => {
#==SPACE==#

 if (!data) { return [] }
#==SPACE==#

 let objects_list = []
#==SPACE==#

#==SPACE==#

#==SPACE==#

 let scale_params = {
  "scale_factor": scale_factor,
  "scale_offset": data["observer_pos"]
 }
#==SPACE==#

#==SPACE==#

 for (let id in data["scan_marks"]) {
  let tmp = get_scanMark(data["scan_marks"][id], scale_params)
  objects_list = objects_list.concat(tmp)
 }
#==SPACE==#

 objects_list = objects_list.concat(this.get_radar_shades(data, scale_factor))
#==SPACE==#

#==SPACE==#

#==SPACE==#

 return objects_list
 }
#==SPACE==#

 get_radar_shades = (data, scale_factor) => {
 let result = []
 let scan_radius = data["observer_radius"]
 let sides = ["left", "right", "top", "bottom"]
 for (let i in sides)
  result.push(
  <RadarShadeBorder
   side={sides[i]}
   side_offset={scan_radius}
   scale_factor={scale_factor}
  />
  )
 result.push(
  <RadarCentralShade
  size={scan_radius}
  scale_factor={scale_factor}
  />
 )
#==SPACE==#

#==SPACE==#

 return result
 }
#==SPACE==#

 get_capmarks = (cap_marks, data, scale_factor) => {
#==SPACE==#

 if (!data) { return [] }
 let scale_params = {
  "scale_factor": scale_factor,
  "scale_offset": data["observer_pos"]
 }
#==SPACE==#

 let result = []
#==SPACE==#

 if (!cap_marks) return result
#==SPACE==#

 for (let char in cap_marks) {
  if (cap_marks[char]["active"]) {
  result.push(
   <CapMarkMarker
   char={char}
   position={cap_marks[char]['position']}
   scale_factor={scale_params["scale_factor"]}
   scale_offset={scale_params["scale_offset"]}
   />
  )
  }
 }
#==SPACE==#

#==SPACE==#

 return result
 }
#==SPACE==#

 get_solar_flares_shades = (solar_flare_state) => {
 if (!solar_flare_state) return []
 if (!solar_flare_state["state"]) return []
 return [
  <MeshObject
  texture={'markers/solar_shades/solar_shade.png'}
  level={4}
  position={[-250, 0, 2]}
  size_array={[100, 600, 1]}
  color={0xff8000}
  />,
  <MeshObject
  texture={'markers/solar_shades/solar_shade.png'}
  level={4}
  position={[250, 0, 2]}
  rotation={180}
  size_array={[100, 600, 1]}
  color={0xff8000}
  />,
  <MeshObject
  texture={'markers/solar_shades/solar_shade.png'}
  level={4}
  position={[0, 250, 2]}
  rotation={-90}
  size_array={[100, 600, 1]}
  color={0xff8000}
  />,
  <MeshObject
  texture={'markers/solar_shades/solar_shade.png'}
  level={4}
  position={[0, -250, 2]}
  rotation={90}
  size_array={[100, 600, 1]}
  color={0xff8000}
  />,
 ]
 }
#==SPACE==#

 get_damage_shades = (state) => {
 console.log("get_damage_shades", state)
 if (!state) return []
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 return [<MeshObject
  texture={'markers/damage_shade.png'}
  level={4}
  position={[0, 0, 0]}
  size_array={[600, 600, 0.1]}
  color={0xff0000}
 />]
#==SPACE==#

 }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export const radarRenderer = new RadarRenderer()
#==SPACE==#

#==SPACE==#

#==SPACE==#

export class CapMarkMarker extends React.Component {
 render() {
#==SPACE==#

 return (
  <MeshObject
  texture={'capmarks/' + this.props.char + '.png'}
  level={3}
  position={[this.props.position[0], this.props.position[1], 2]}
  size={30}
  no_scale_size={true}
  color={0xFF00dd}
  scale_factor={this.props.scale_factor}
  scale_offset={this.props.scale_offset}
  />
 )
 }
}
#==SPACE==#

#==SPACE==#

let get_scanMark = (descr, scale_params) => {
#==SPACE==#

 let objects = []
 let color = 0xffffff
 let mark_type = descr[0]
 let texture = 'markers/radar/hbody.png'
#==SPACE==#

 switch (mark_type) {
 case "pole": {
  color = 0x00ffff
  texture = 'markers/radar/pole.png'
  break;
 }
 case "activity": {
  color = 0xff0000
  texture = 'markers/radar/activity.png'
  break;
 }
 case "resource": {
  color = 0x00ffff
  texture = 'markers/radar/resource.png'
  break
 }
 default: {
  break;
 }
 }
#==SPACE==#

#==SPACE==#

 //if (descr["alias"] === "self") color = 0x00ff00
 //if (descr["alias"] === "friend") color = 0x00ffff
 //if (descr["alias"] === "enemy") color = 0xff0000
#==SPACE==#

#==SPACE==#

#==SPACE==#

 objects.push(<MarkerRadarMark
 color={color}
 texture={texture}
 type={descr[0]}
 position={descr[1]}
 scale_factor={scale_params["scale_factor"]}
 scale_offset={scale_params["scale_offset"]}
 ></MarkerRadarMark>)
#==SPACE==#

 return objects
}
#==SPACE==#

#==SPACE==#

export class MarkerRadarMark extends React.Component {
 render() {
#==SPACE==#

 return (
  <MeshObject
  texture={this.props.texture}
  level={3}
  position={[this.props.position[0], this.props.position[1], 2]}
  size={30}
  min_size={20}
  color={this.props.color}
  scale_factor={this.props.scale_factor}
  scale_offset={this.props.scale_offset}
  />
 )
 }
}
#==SPACE==#

class RadarShadeBorder extends React.Component {
 render() {
 let texture = 'markers/radar_shades/radar_shade.png'
 let position = [0, 0, 2]
 if (this.props.side === "left") {
  position[0] = -300 - this.props.side_offset * this.props.scale_factor
 }
 else if (this.props.side === "right") {
  position[0] = 300 + this.props.side_offset * this.props.scale_factor
 }
 else if (this.props.side === "top") {
  position[1] = 300 + this.props.side_offset * this.props.scale_factor
 }
 else if (this.props.side === "bottom") {
  position[1] = -300 - this.props.side_offset * this.props.scale_factor
 }
 //texture = 'markers/radar/activity.png'
 return (
  <MeshObject
  texture={texture}
  ///position={[this.props.position[0], this.props.position[1], 1]}
  position={position}
  size={600}
  color={0xffff00}
  level={2}
  />
 )
 }
}
#==SPACE==#

class RadarCentralShade extends React.Component {
 render() {
 let texture = 'markers/radar_shades/radar_central_shade.png'
#==SPACE==#

 //texture = 'markers/radar/activity.png'
 return (
  <MeshObject
  texture={texture}
  ///position={[this.props.position[0], this.props.position[1], 1]}
  position={[0, 0, 1]}
  size={this.props.size * this.props.scale_factor * 2}
  color={0xffffff}
  level={2}
#==SPACE==#

  />
 )
 }
}
#==SPACE==#

function get_LinePoints(angle_degrees, length_from, length_to, position, scale_factor, scale_offset) {
 let result = []
 let step = (length_to - length_from) / 25
#==SPACE==#

 let step_vector = new Vector2(step, 0)
 let center = new Vector2(0, 0)
 let angle_rad = angle_degrees * 3.14 / 180
 step_vector.rotateAround(center, angle_rad)
 let start_point = new Vector2(length_from, 0)
 start_point.rotateAround(center, angle_rad)
 for (let i = 0; i < 25; i++) {
 result.push(<MarkerDot
  position={[position[0] + start_point.x + step_vector.x * i, position[1] + start_point.y + step_vector.y * i]}
  level={3}
  scale_factor={scale_factor}
  scale_offset={scale_offset}
 />)
 }
 return result
}
#==SPACE==#

function get_ArcPoints(angle_degrees_from, angle_degrees_to, length, position, scale_factor, scale_offset) {
 let result = []
 let step_vector = new Vector2(length, 0)
 let angle_rad = angle_degrees_from * 3.14 / 180
 let angle_step_rad = -3.14 / (180 / 5)
 let angle_step_count = (angle_degrees_to * 3.14 / 180 - angle_degrees_from * 3.14 / 180) / angle_step_rad
 let center = new Vector2(0, 0)
 step_vector.rotateAround(center, angle_rad)
#==SPACE==#

 for (let i = 0; i < angle_step_count; i++) {
#==SPACE==#

 result.push(<MarkerDot
  position={[position[0] + step_vector.x, position[1] + step_vector.y]}
  level={3}
  scale_factor={scale_factor}
  scale_offset={scale_offset}
#==SPACE==#

 />)
 step_vector.rotateAround(center, angle_step_rad)
 }
 return result
}
#==SPACE==#

#==SPACE==#

export function getDistantScanArc(close_range, distant_range, distant_arc, distant_dir, position, scale_factor, scale_offset) {
 let radar_pulse_interval = 2000 //[ms]
 let radar_phase = (Date.now() % radar_pulse_interval) / radar_pulse_interval
#==SPACE==#

 let angle_from = distant_dir + distant_arc / 2
 let angle_to = distant_dir - distant_arc / 2
 let result = get_LinePoints(angle_from, close_range, distant_range, position, scale_factor, scale_offset)
 result = result.concat(get_LinePoints(angle_to, close_range, distant_range, position, scale_factor, scale_offset))
 result = result.concat(get_ArcPoints(angle_from, angle_to, distant_range, position, scale_factor, scale_offset))
 result = result.concat(get_ArcPoints(angle_from, angle_to, close_range + radar_phase * (distant_range - close_range), position, scale_factor, scale_offset))
 return result
}

###===###.\front01\src\modules\renderers\TextCoreMeshes.js
import { extend } from '@react-three/fiber'
import { FontLoader } from 'three/examples/jsm/loaders/FontLoader'
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'
import myFont from './fonts/Poppins Medium_Regular.json'
#==SPACE==#

extend({ TextGeometry })
#==SPACE==#

export function TextMesh(props) {
 const font = new FontLoader().parse(myFont);
 let text = props.text ? props.text : "no text"
#==SPACE==#

#==SPACE==#

 let scale_factor = props.scale_factor ? props.scale_factor : 1
 let scale_offset = props.scale_offset ? props.scale_offset : [0, 0]
#==SPACE==#

 let position = [0, 0, 0]
 if (props.position) {
  position[0] = props.position[0] * scale_factor - scale_offset[0] * scale_factor
  position[1] = props.position[1] * scale_factor - scale_offset[1] * scale_factor
  position[2] = props.level ? props.level : 0
 }
 //let size = props.no_scale_size ? props.no_scale_size : props.size * scale_factor
#==SPACE==#

#==SPACE==#

 return (
  <mesh position={position}>
   <textGeometry args={[text, { font, size: 10, height: 1 }]} />
   <meshLambertMaterial attach='material' color={'white'} />
  </mesh>
 )
}

###===###.\front01\src\modules\systems\crew_sm.js
import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales.js'
#==SPACE==#

export class CrewControlWidget extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            data: {
                total_crew: -1,
                teams: {}
            },
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    proceed_data_message = () => {
        let crew_data = get_system_state("crew_sm")
        let med_data = get_system_state("med_sm")
        if (med_data) {
            crew_data["wounded"] = med_data["hospital"]["units"]
            crew_data["hospitale_cap"] = med_data["hospital"]["capacity"]
        }
        this.setState({ "data": crew_data })
    }
#==SPACE==#

    get_teams_list = () => {
        let result = []
        for (let team_name in this.state.data.teams) {
            result.push(<RepairTeamWidget mark_id={this.state.data.mark_id} team_data={this.state.data.teams[team_name]} />)
        }
        return result
    }
#==SPACE==#

#==SPACE==#

    render() {
        if (!this.state.data) return <div className='SystemControlWidget'><b>CrewControl</b></div>
        return (
            <div className='SystemControlWidget'>
                <b>{get_locales("CrewControl")}</b>
                <label>{get_locales("total_crew")}:{this.state.data["total_crew"]}</label>
                <label>{get_locales("free_crew")}:{this.state.data["free_crew"]}</label>
                <label>{get_locales("hospital")}:{this.state.data["wounded"]}/{this.state.data["hospitale_cap"]}</label>
                {this.get_teams_list()}
            </div>
        )
    }
#==SPACE==#

}
#==SPACE==#

#==SPACE==#

export class RepairTeamWidget extends React.Component {
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    onRemoveCrewMember = (e) => {
        send_command("ship.crew_sm", this.props.mark_id, "remove_crew_from_team", { "team_name": this.props.team_data["name"] })
    }
    onAddCrewMember = (e) => {
        send_command("ship.crew_sm", this.props.mark_id, "add_crew_to_team", { "team_name": this.props.team_data["name"] })
    }
#==SPACE==#

    render() {
        let header = <span><b>{get_locales(this.props.team_data["name"])}: </b><i>{get_locales(this.props.team_data["state"])}</i></span>
        if (this.props.mode === "engineer") {
            header = <b>{get_locales(this.props.team_data["name"])}</b>
        }
        return (
            <div className='RepairTeamWidget'>
                <img src={"portraits/" + this.props.team_data["name"] + ".jpg"} alt='face'></img>
                <div className='RepairTeamWidget_data'>
                    {header}
                    <progress value={this.props.team_data["loadout"]} max={1}></progress>
                    {this.props.mode !== "engineer" ?
                        <div>
                            <button onClick={this.onRemoveCrewMember}>-</button>
                            <label>{this.props.team_data["crew"]}/10</label>
                            <button onClick={this.onAddCrewMember}>+</button>
                        </div> :
                        <div>
#==SPACE==#

                            <label>{this.props.team_data["crew"]}/10</label>
#==SPACE==#

                        </div>}
                </div>
            </div>
        )
    }
#==SPACE==#

}

###===###.\front01\src\modules\systems\damage_sm.js
import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

export class DamageControlWidget extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

#==SPACE==#
   
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
  this.state = {
  data: {},
  hided: true,
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
  clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 proceed_data_message = () => {
  let perf_data = get_system_state( "damage_sm")
  this.setState({ "data": perf_data })
 }
#==SPACE==#

 onRepair = (system_name) =>{
  send_command("ship.damage_sm", this.state.data.mark_id, "repair_system", { "system_name": system_name })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 get_systems_hp = () => {
  let result = []
  if (this.state.data) {
  if ("systems_hp" in this.state.data) {
   for (let system_name in this.state.data.systems_hp) {
   let current_hp = this.state.data["systems_hp"][system_name]["current_hp"].toFixed(2)
   result.push(
    <label>{system_name}:{current_hp}/{this.state.data["systems_hp"][system_name]["max_hp"]}</label>
   )
   }
  }
  }
  return result
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
#==SPACE==#

 render() {
  return (
  <div className='SystemControlWidget'>
   <b>DamageControl</b>
   {this.get_systems_hp()}
  </div>
  )
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 }

###===###.\front01\src\modules\systems\energy_sm.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
#==SPACE==#

export class EnergyControlWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

#==SPACE==#

 this.state = {
  data: {
  systems_energy: {}
  },
  hided: true,
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.proceed_data_message, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
 let perf_data = get_system_state("energy_sm")
 if (perf_data) this.setState({ "data": perf_data })
 }
#==SPACE==#

 onIncreaseEnergy = (system_name) => {
 send_command("ship.energy_sm", this.state.data.mark_id, "increase_energy_level", { "system": system_name })
 }
#==SPACE==#

 onDecreaseEnergy = (system_name) => {
 send_command("ship.energy_sm", this.state.data.mark_id, "decrease_energy_level", { "system": system_name })
 }
#==SPACE==#

#==SPACE==#

 get_energy_limit = () => {
 let result = [<button disabled>{">>"}</button>]
 let free_energy = this.state.data.energy_free
 for (let i = 0; i < free_energy; i++) {
  result.push(<button className='back_green' disabled> {i + 1} </button>)
 }
 return <div className="systemUpgradeUnit">{result}</div>
 }
#==SPACE==#

 get_energy_controls = () => {
 let result = []
 for (let system_name in this.state.data.systems_energy) {
  let energy_level = this.state.data.systems_energy[system_name]
  let level_widgets = []
#==SPACE==#

#==SPACE==#

  level_widgets.push(<button onClick={(e) => { this.onDecreaseEnergy(system_name) }}>
  -
  </button>)
#==SPACE==#

  for (let i = 0; i < Number.parseInt(energy_level); i++) {
  let classname = ""
  if (i >= 4) classname = 'back_red'
  level_widgets.push(<button className={classname} disabled> {i + 1} </button>)
  }
#==SPACE==#

  level_widgets.push(<button onClick={(e) => { this.onIncreaseEnergy(system_name) }}>
  +
  </button>)
#==SPACE==#

#==SPACE==#

  result.push(
  <div className="systemUpgradeUnit">
   <label>{get_locales(system_name)}</label>
   <div>
   {level_widgets}
#==SPACE==#

   </div>
  </div>
  )
 }
#==SPACE==#

 return result
 }
#==SPACE==#

 render() {
 return (
  <div
  className='SystemControlWidget'>
  <b>{get_locales("Energy control")}</b>
  {this.get_energy_limit()}
  {this.get_energy_controls()}
  </div>
 )
 }
#==SPACE==#

}

###===###.\front01\src\modules\systems\engine_sm.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { NumericControlWidjet } from '../widgets/NumericControlWidget.js';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
#==SPACE==#

export class EngineControlWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

#==SPACE==#

#==SPACE==#

 this.state = {
  "engine_power": 1,
#==SPACE==#

  "prediction_depth": 10,
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.proceed_data_message, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
#==SPACE==#

 let system_state = get_system_state("engine_sm")
 this.setState({
  "data": system_state
 })
 }
#==SPACE==#

 is_disabled = () => {
 if (this.state.data) {
  if ((this.state.data.status === "OK") && (this.state.data.mark_id)) return false
 }
 return true
 }
#==SPACE==#

 //accPrograde, accNormal
 send_acceleration = (engine_key, direction_scalar) => {
 let params = {
  [engine_key]: direction_scalar
 }
 if (this.state.data) send_command("ship.engine_sm", this.state.data.mark_id, "set_acceleration", params)
#==SPACE==#

 }
#==SPACE==#

 send_prediction_depth = (prediction_depth) => {
 if (this.state.data) send_command("ship.engine_sm", this.state.data.mark_id, "set_prediction_depth", { "value": prediction_depth })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#

 get_buttons_block = () => {
 return (<div
  className='AccelerationController_btnblock'>
  <button disabled> {"<<<<"} </button>
  <button
  disabled={this.is_disabled()}
#==SPACE==#

  onMouseUp={(e) => { this.send_acceleration("acceleration", 0) }}
  onMouseDown={(e) => { this.send_acceleration("acceleration", 1 * this.state["engine_power"]) }}
  onMouseLeave={(e) => { this.send_acceleration("acceleration", 0) }}
  > Forw </button>
  <button disabled> {">>>>"} </button>
#==SPACE==#

  <button
  disabled={this.is_disabled()}
  onMouseUp={(e) => { this.send_acceleration("rotation", 0) }}
  onMouseDown={(e) => { this.send_acceleration("rotation", 1) }}
  onMouseLeave={(e) => { this.send_acceleration("rotation", 0) }}
  > TLeft </button>
  <button
  disabled={this.is_disabled()}
  onMouseUp={(e) => { this.send_acceleration("acceleration", 0) }}
  onMouseDown={(e) => { this.send_acceleration("acceleration", -1 * this.state["engine_power"]) }}
  onMouseLeave={(e) => { this.send_acceleration("acceleration", 0) }}
  > Back </button>
  <button
  disabled={this.is_disabled()}
  onMouseUp={(e) => { this.send_acceleration("rotation", 0) }}
  onMouseDown={(e) => { this.send_acceleration("rotation", -1) }}
  onMouseLeave={(e) => { this.send_acceleration("rotation", 0) }}
  > TRight </button>
 </div>)
 }
#==SPACE==#

 render() {
 return (<div className='AccelerationController'>
  <b> {get_locales("Acceleration Control")}</b>
  <label> {get_locales("speed")}: {this.state.data ? this.state.data.velocity : 0}</label>
  <label>{get_locales("direction")}: {this.state.data ? this.state.data.direction : 0}</label>
  <label>{get_locales("deltaV")}: {this.state.data ? this.state.data.deltaV : 0}</label>
  {this.get_buttons_block()}
  <NumericControlWidjet
  disabled={this.is_disabled()}
  label={"prediction_depth"}
  init_value={10}
  min={5}
  max={60}
  step={1}
  onChange={this.send_prediction_depth}
  />
  <NumericControlWidjet
  disabled={this.is_disabled()}
  label={"engine_power"}
  init_value={1}
  min={0}
  max={1}
  step={0.001}
  onChange={(value) => {
   this.setState({ "engine_power": value })
  }}
  />
  <span className='AccelerationHeatbar'>
  <label>{get_locales("overheat")}:</label>
  <progress value={this.state.data ? this.state.data.heat_level : 0} max={100}></progress>
  </span>
 </div>)
 }
}

###===###.\front01\src\modules\systems\interact_sm.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
export class InteractionControlWidget extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#
  
  this.state = {
  data: {
   "interactable_objects": []
  },
  hided: true,
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
  clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 proceed_data_message = () => {
  let perf_data = get_system_state( "interact_sm")
  if (perf_data) this.setState({ "data": perf_data })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 onInteract = (target_id) => {
  send_command("ship.interact_sm", this.state.data.mark_id, "interact", { "target_id": target_id })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 get_interactable_objects = () => {
  let result = []
  for (let i in this.state.data.interactable_objects) {
  let iobj_id = this.state.data.interactable_objects[i]
  result.push(
   <span>
   <label>{iobj_id[0]}</label>
   <button onClick={(e) => { this.onInteract(iobj_id[0]) }}> {iobj_id[1]}</button>
   </span>
  )
  }
  return result
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 render() {
  return (
  <div
   className='SystemControlWidget'>
   <b>{get_locales("InteractionControl")}</b>
   {this.get_interactable_objects()}
  </div>
  )
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 }

###===###.\front01\src\modules\systems\launcher_sm.js
import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
import '../../styles/ShaftsControlWidget.css'
#==SPACE==#

export class ShaftsControlWidget extends React.Component {
  constructor(props) {
    super(props);
#==SPACE==#

    this.state = {
      data: null,
      vel_scalar: 0,
      vel_angle: 0
    }
  }
#==SPACE==#

  componentDidMount() {
    let timer_id = timerscounter.get(this.constructor.name)
    if (!timer_id) {
      clearInterval(timer_id)
    }
    timer_id = setInterval(this.proceed_data_message, 30)
    timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

  componentWillUnmount() {
    let timer_id = timerscounter.get(this.constructor.name)
    clearInterval(timer_id)
  }
#==SPACE==#

  proceed_data_message = () => {
    let system_state = get_system_state("launcher_sm")
#==SPACE==#

    this.setState({
      "data": system_state
    })
  }
#==SPACE==#

  get_shafts_section = () => {
    if (!this.state.data) return <div></div>
#==SPACE==#

    let shafts_controllers = []
#==SPACE==#

    for (let k in this.state.data['shafts']) {
      shafts_controllers.push(<LauncherShaftController
        shaft_state={this.state.data['shafts'][k]}
        shaft_id={k}
        mark_id={this.state.data.mark_id}
      />)
    }
    return <div className='shaftsSection'>{shafts_controllers}</div>
  }
#==SPACE==#

  onLaunch = () => {
    send_command("ship.launcher_sm", this.state.data.mark_id, "launch", {})
  }
#==SPACE==#

  onAim = () => {
    send_command("ship.launcher_sm", this.state.data.mark_id, "aim", {
      "vel_angle": this.state.vel_angle,
      "vel_scalar": this.state.vel_scalar
    })
  }
#==SPACE==#

  is_disabled = () => {
    if (this.state.data) {
      if ((this.state.data.status === "OK") && (this.state.data.mark_id)) return false
    }
    return true
  }
#==SPACE==#

  render() {
#==SPACE==#

    let shafts_controllers = []
    let auto_toogle = false
    let auto_reload = false
    if (!this.is_disabled()) {
      shafts_controllers = this.get_shafts_section()
      auto_toogle = this.state.data["auto_toggle"]
      auto_reload = this.state.data["auto_reload"]
    }
    return (
      <div className='LauncherController'>
#==SPACE==#

        <label><b>{get_locales("ProjectileLauncher Control")}</b> {get_locales("auto_toggle")}:
          <input type="checkbox" checked={auto_toogle} onChange={(e) => {
            send_command("ship.launcher_sm", this.state.data.mark_id, "auto_toggle", { "active": e.target.checked })
          }}></input>
#==SPACE==#

          {get_locales("auto_reload")}:
          <input type="checkbox" checked={auto_reload} onChange={(e) => {
            send_command("ship.launcher_sm", this.state.data.mark_id, "auto_reload", { "active": e.target.checked })
          }}></input>
        </label>
#==SPACE==#

        {shafts_controllers}
      </div>)
  }
#==SPACE==#

#==SPACE==#

}
#==SPACE==#

#==SPACE==#

#==SPACE==#

export class LauncherShaftController extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      projectile_type: null,
      launch_params: {},
    }
  }
#==SPACE==#

  send_launch_params = () => {
    send_command("ship.launcher_sm.shaft", this.props.mark_id + '..' + this.props.shaft_id, "set_projectile_params", this.state.launch_params)
  }
#==SPACE==#

  set_launch_params = (key, value) => {
    let tmp = this.state.launch_params
    tmp[key] = value
    this.setState({ launch_params: tmp }, this.send_launch_params())
  }
#==SPACE==#

  get_params_widget = (key) => {
    let min_value = this.props.shaft_state.launch_params[key][0]
    let max_value = this.props.shaft_state.launch_params[key][1]
    let step_value = this.props.shaft_state.launch_params[key][2]
    let init_value = this.props.shaft_state.launch_params[key][3]
#==SPACE==#

    if (!(key in this.state.launch_params)) {
      let tmp = this.state.launch_params
      tmp[key] = init_value
      this.setState({ launch_params: tmp })
    }
#==SPACE==#

    return <span className='projectile_param_widget'>
      {key}
      <input
#==SPACE==#

        type="range"
        min={min_value}
        max={max_value}
        step={step_value}
        class="slider"
        onChange={(e) => {
          this.set_launch_params(key, e.target.value)
        }}
        value={this.state.launch_params[key]}
#==SPACE==#

      />
      <output>{this.state.launch_params[key]}</output>
    </span>
  }
#==SPACE==#

  get_params_widgets = () => {
    let params_adjusters = []
    for (let k in this.props.shaft_state.launch_params) {
      params_adjusters.push(this.get_params_widget(k))
    }
    return params_adjusters
#==SPACE==#

  }
#==SPACE==#

#==SPACE==#

  get_available_projectiles_options = () => {
    let options = []
    for (let i in this.props.shaft_state.available_projectiles) {
      let option = this.props.shaft_state.available_projectiles[i]
      options.push(<option value={option}> {option} </option>)
    }
    return options
  }
#==SPACE==#

  load_projectile = () => {
    this.setState({ launch_params: {} })
    send_command("ship.launcher_sm.shaft", this.props.mark_id + '..' + this.props.shaft_id, "load_projectile", { "type": this.state.projectile_type })
  }
  unload_projectile = () => {
    this.setState({ launch_params: {} })
    send_command("ship.launcher_sm.shaft", this.props.mark_id + '..' + this.props.shaft_id, "load_projectile", { "type": null })
  }
#==SPACE==#

  select_shaft = () => {
    send_command("ship.launcher_sm", this.props.mark_id, "select_shaft", { "shaft_id": this.props.shaft_id })
  }
#==SPACE==#

  render() {
    let labels = []
    for (let k in this.props.shaft) {
      labels.push(<label>{k}:{this.props.shaft[k].Str}</label>)
    }
#==SPACE==#

    let shaftprogress_classname = ""
#==SPACE==#

    if (this.props.shaft_state["progress"] >= 100) {
      shaftprogress_classname = "LauncherShaftController_shaft_progress_ready"
    }
    else if ((this.props.shaft_state["progress"] > 0) && (this.props.shaft_state["progress"] <= 100)) {
      shaftprogress_classname = "LauncherShaftController_shaft_progress_in_progres"
    }
    let additional_ClassName = this.props.shaft_state["selected"] ? "LauncherShaftController_selected" : ""
    // <label>type: {this.props.shaft_state["loaded_type"]}</label>
    return (<div className={'LauncherShaftController ' + additional_ClassName}>
      <button onClick={() => { this.select_shaft() }}><b>{get_locales("SHAFT")}# {this.props.shaft_id} </b></button>
#==SPACE==#

      <div className={"LauncherShaftController_shaft_progress " + shaftprogress_classname}>
        <progress value={this.props.shaft_state["progress"]} max="100"></progress>
      </div>
      <select
        onChange={(e) => { this.setState({ projectile_type: e.target.value }) }}
      >
        <option default value={null}> {null}</option>
        {this.get_available_projectiles_options()}
      </select>
#==SPACE==#

      {this.get_params_widgets()}
      <button onClick={() => { this.load_projectile() }}> {get_locales("load")}</button>
      <button onClick={() => { this.unload_projectile() }}> {get_locales("unload")}</button>
#==SPACE==#

    </div>)
  }
}

###===###.\front01\src\modules\systems\med_sm.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

export class HospitalCrewWidget extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#
  
  this.state = {
  data: {
#==SPACE==#

  },
  hided: true,
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
  clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 proceed_data_message = () => {
  let med_data = get_system_state( "med_sm")
  if (med_data) this.setState({ "data": med_data })
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 render() {
  let data = <span></span>
  if (this.state.data){
  data = <label>{this.state.data.units}/{this.state.data.capacity}</label>
  }
  return (
  <div
   className='SystemControlWidget'>
   <b>Hospital Crew Control</b>
   {data}
  </div>
  )
 }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 }

###===###.\front01\src\modules\systems\projectile_builder.js
#==SPACE==#

import React from 'react'
import { send_command, get_http_address, current_mark_id } from '../network/connections';
import { get_locales } from '../locales/locales';
#==SPACE==#

export class ProjectileBuilderWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

 this.state = {
  "mark_id": null,
  "details_list": ["thruster", "timer", "inhibitor", "explosive", "emp", "entities_detection", "projectiles_detection", "buster", "detonator", "decoy"],
  "stats_list": ["speed_up", "activation_time", "ttl_time", "explosion_radius/damage", "emp_radius", "ship_detection_radius", "projectiles_detection_radius", "velocity_penalty", "cost"],
  "blueprints": {
#==SPACE==#

  },
  "edited_blueprint": {
  "thruster": 0,
  "timer": 0,
  "inhibitor": 0,
  "explosive": 0,
  "emp": 0,
  "entities_detection": 0,
  "projectiles_detection": 0,
  "buster": 0,
  "detonator": 0,
  "decoy":0,
  },
  "stats": {
  "activation_time": 0,
  "cost": 0,
  "emp_radius": 0,
  "explosion_radius/damage": 0,
  "projectiles_detection_radius": 0,
  "ship_detection_radius": 0,
  "speed_up": 1,
  "ttl_time": 0,
  "details": 0,
  "velocity_penalty": 1
  },
  "selected": "new_blueprint_name"
 }
 }
#==SPACE==#

 componentDidMount() {
 var myInit = {
  method: "GET",
  headers: {
  },
 }
#==SPACE==#

 return fetch(get_http_address() + "projectile_constructor/" + current_mark_id + "/blueprints", myInit)
  .then(response => {
  let code = response.status;
#==SPACE==#

  switch (code) {
   case 200:
   let data = response.json()
   return data
   default:
   break;
  }
  })
  .then(data => {
#==SPACE==#

  this.setState({
   blueprints: data
  })
  })
  .catch(error => {
#==SPACE==#

  });
 }
#==SPACE==#

 onComponentChange = (comp_name, step) => {
 let value = this.state.edited_blueprint[comp_name] + step
 if (value < 0) return
 let tmp_bp = this.state.edited_blueprint
 tmp_bp[comp_name] = value
 this.setState({ "edited_blueprint": tmp_bp }, this.updateStats)
 }
#==SPACE==#

 updateStats = () => {
 var myInit = {
  method: "GET",
  headers: {
  "blueprint": JSON.stringify(this.state.edited_blueprint)
  },
 }
#==SPACE==#

 return fetch(get_http_address() + "/projectile_constructor/stats", myInit)
  .then(response => {
  let code = response.status;
#==SPACE==#

  switch (code) {
   case 200:
   let data = response.json()
   return data
   default:
   break;
  }
  })
  .then(data => {
#==SPACE==#

  this.setState({
   stats: data
  })
  })
  .catch(error => {
#==SPACE==#

  });
 }
#==SPACE==#

 get_components_selector = () => {
 let result = []
 for (let i in this.state.details_list) {
  let comp_name = this.state.details_list[i]
  result.push(
  <div className='component_controller'>
   <label>{get_locales(comp_name)}</label>
   <button onClick={(e) => { this.onComponentChange(comp_name, -1) }}> - </button>
   <label>{this.state.edited_blueprint[comp_name]}</label>
   <button onClick={(e) => { this.onComponentChange(comp_name, +1) }}> + </button>
  </div>
  )
 }
 return <div className="components_selector">{result}</div>
 }
#==SPACE==#

 get_stats_panel = () => {
 let result = []
 for (let i in this.state.stats_list) {
  let stat_name = this.state.stats_list[i]
  result.push(
  <div className='component_controller'>
   <label>{get_locales(stat_name)}:{this.state.stats[stat_name]}</label>
  </div>
  )
 }
 return <div className="components_selector">{result}</div>
 }
#==SPACE==#

 onLoadSelected = (bp_name) => {
 let tmp_bp = this.state.blueprints[bp_name]
 this.setState({
  "selected": bp_name,
  "edited_blueprint": tmp_bp
 }, this.updateStats)
 }
#==SPACE==#

 onSaveCurrent = () => {
 send_command("ship.resources_sm", current_mark_id, "save_projectile_blueprint", {
  "bp_name": this.state.selected,
  "bp_content": this.state.edited_blueprint
 })
 let tmp_bps = this.state.blueprints
 tmp_bps[this.state.selected] = this.state.edited_blueprint
 this.setState({ "blueprints": tmp_bps })
 }
#==SPACE==#

 onDeleteCurrent = () => {
 send_command("ship.resources_sm", current_mark_id, "delete_projectile_blueprint", {
  "bp_name": this.state.selected,
 })
 let tmp_bps = this.state.blueprints
 delete tmp_bps[this.state.selected]
 this.setState({ "blueprints": tmp_bps })
 }
#==SPACE==#

 get_saveload_panel = () => {
 let blueprints = []
 for (let bp_name in this.state.blueprints) {
  blueprints.push(
  <label className={this.state.selected === bp_name ? "selected" : ""} onClick={() => { this.onLoadSelected(bp_name) }} >{bp_name}</label>
  )
 }
 return <div
  className='FileLoader'
 >
  <div className='map_selector'>{blueprints} </div>
  <input onChange={(e) => {
  if (e.target.value.length < 20) {
   this.setState({ "selected": e.target.value })
  }
  }} value={this.state.selected}></input>
  <button onClick={this.onSaveCurrent}>{get_locales("SAVE")}</button>
  <button onClick={this.onDeleteCurrent}>{get_locales("DELETE")}</button>
 </div>
#==SPACE==#

 }
#==SPACE==#

 render() {
 return (
  <div className='SystemControlWidget'>
  <label><b>{get_locales("Projectile constructor")}</b></label>
  <div className='ProjectileBuilderWidget'>
   {this.get_saveload_panel()}
   <div className="DesignSection">
   {this.get_components_selector()}
   {this.get_stats_panel()}
   </div>
  </div>
  </div>
 )
 }
#==SPACE==#

}

###===###.\front01\src\modules\systems\radar_sm.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state, get_observer_id } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { NumericControlWidjet, NumericStepControlWidjet } from '../widgets/NumericControlWidget';
import '../../styles/RadarControlWidget.css'
import { get_locales } from '../locales/locales';
export class RadarControlWidget extends React.Component {
 on_set_radar_arc = (value) => {
 send_command("ship.radar_sm", get_observer_id(), "set_radar_arc", { "radar_arc": value })
 }
#==SPACE==#

 on_set_radar_dir = (value) => {
 send_command("ship.radar_sm", get_observer_id(), "set_radar_dir", { "radar_dir": -value + 90 })
 }
#==SPACE==#

#==SPACE==#

 render() {
 return (
  <div
  className='SystemControlWidget'>
  <b>{get_locales("Radar control")}</b>
  <NumericStepControlWidjet
#==SPACE==#

   label={"distant_arc"}
   init_value={10}
   min={5}
   max={360}
   step={1}
   onChange={this.on_set_radar_arc}
  />
  <NumericStepControlWidjet
   label={"distant_dir"}
   init_value={0}
   min={-1800}
   max={+1800}
   step={3}
   onChange={this.on_set_radar_dir}
  />
  </div>
 )
 }
#==SPACE==#

}
#==SPACE==#

#==SPACE==#

export class RadarStatsWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

#==SPACE==#

 this.state = {
  data: {
  },
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.proceed_data_message, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
 let data = get_system_state("radar_sm")
 if (data) this.setState({ "data": data })
 }
#==SPACE==#

 render() {
 return (
  <div className='RadarStatsWidget'>
  <label>{get_locales("close_range")}: {this.state.data.close_range}</label>
  <label>{get_locales("distant_range")}: {this.state.data.distant_range}</label>
  <label>{get_locales("distant_dir")}: {this.state.data.distant_dir}</label>
  <label>{get_locales("distant_arc")}: {this.state.data.distant_arc}</label>
  </div>)
 }
}

###===###.\front01\src\modules\systems\resources_sm.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { get_locales } from '../locales/locales';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

#==SPACE==#

#==SPACE==#

export class ResourcesControlWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

#==SPACE==#

 this.state = {
  data: {},
  hided: true,
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.proceed_data_message, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
 let perf_data = get_system_state("resources_sm")
 this.setState({ "data": perf_data })
 }
#==SPACE==#

 cancel_item = (e) => {
 send_command("ship.resources_sm", this.state.data.mark_id, "cancel_item_production", {})
 }
#==SPACE==#

 clear_production = (e) => {
 send_command("ship.resources_sm", this.state.data.mark_id, "clear_production", {})
 }
#==SPACE==#

 remove_item_from_queue = (item_name, item_idx) =>{
 send_command("ship.resources_sm", this.state.data.mark_id, "remove_item_from_production_queue", {"item_name":item_name, "item_idx":item_idx})
 }
#==SPACE==#

 get_resource_header = () => {
 let result = []
 for (let res_name in this.state.data.stockpile_raw) {
  result.push(<label>{get_locales(res_name)}($): {this.state.data.stockpile_raw[res_name].toFixed(2)}/{this.state.data.stockpile_raw_capacity}</label>)
 }
 result.push(<label>{get_locales("volume")}(◪): {this.state.data.stockpile_items_occupied}/{this.state.data.stockpile_items_capacity}</label>)
 return <div className='StockpileRaw'>
  {result}
 </div>
 }
#==SPACE==#

 produce = (item_name) => {
 send_command("ship.resources_sm", this.state.data.mark_id, "produce_item", { "item_name": item_name })
 }
#==SPACE==#

 get_items = () => {
 let render_array = []
 if (this.state.data) {
  for (let k in this.state.data.stockpile_items) {
  let cost = this.state.data.items_cost[k]
  let volume = this.state.data.items_volume[k]
  render_array.push(<label><button onClick={() => { this.produce(k) }}>{k} [{this.state.data.stockpile_items[k]}]</button>: ${cost} ◪{volume}</label>)
  }
 }
 return <div className='StockpileItems'>
  {render_array}
 </div>
 }
#==SPACE==#

 get_production_queue = () => {
 let render_array = []
 if (this.state.data) {
  for (let i in this.state.data.production_queue) {
  let item = this.state.data.production_queue[i]
  let item_name = item[0]
  let item_count = item[1]
  render_array.push(<button onClick={() => {this.remove_item_from_queue(item_name, i) }}>{item_name} [{item_count}]</button>)
  }
 }
 return <div className='ProductionQueueSection'>
  <div className='productionQueue'>
  {render_array}
  </div>
  <button onClick={this.clear_production}>{get_locales("clear_production")}</button>
 </div>
 }
#==SPACE==#

 get_production_progress = () => {
 return (
  <div className={"labeled_progress_bar"}>
  <label>{this.state.data.production_task}</label>
  <progress value={this.state.data.production_progress} max="1"></progress>
  <button onClick={this.cancel_item}> {get_locales("cancel_item")} </button>
  </div>)
 }
#==SPACE==#

 render() {
 if (!this.state.data) return (<div className='SystemControlWidget'> <label><b>{get_locales("Production_sm")}</b></label></div>)
 let render_array = []
 if (this.state.data) {
  for (let k in this.state.data.stockpile_raw) {
  render_array.push(<label>{k}: {this.state.data.stockpile_raw[k]}</label>)
  }
 }
 return (
#==SPACE==#

  <div className='SystemControlWidget ProductionSM'>
  <label><b>{get_locales("Production_sm")}</b></label>
#==SPACE==#

  {this.get_resource_header()}
  <div className="items_section">
   {this.get_items()}
   {this.get_production_queue()}
  </div>
#==SPACE==#

  {this.get_production_progress()}
  </div>
 )
 }
#==SPACE==#

}

###===###.\front01\src\modules\systems\RnD_sm.js
import React from 'react'
import { send_command, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

export class RnDControlWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

#==SPACE==#

 this.state = {
  data: {
  systems_upgrades: {}
  },
  hided: true,
 }
 }
 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.proceed_data_message, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
 let perf_data = get_system_state("RnD_sm")
 if (perf_data) this.setState({ "data": perf_data })
 }
#==SPACE==#

 onUpgrade = (system_name) => {
 send_command("ship.RnD_sm", this.state.data.mark_id, "upgrade_system", { "system": system_name })
 }
#==SPACE==#

 get_systems_upgrades = () => {
 let result = []
 for (let system_name in this.state.data.systems_upgrades) {
  let system_level = this.state.data.systems_upgrades[system_name]["current_level"]
  let level_widgets = []
  let i = 0
  for (i; i < Number.parseInt(system_level); i++) {
  level_widgets.push(<button disabled> {this.state.data.systems_upgrades[system_name]["cost"][i]} </button>)
  }
#==SPACE==#

  if (this.state.data.systems_upgrades[system_name]["current_level"] < this.state.data.systems_upgrades[system_name]["maximal_level"]) {
  level_widgets.push(<button onClick={(e) => { this.onUpgrade(system_name) }}>
   {this.state.data.systems_upgrades[system_name]["cost"][i]}
  </button>)
  }
#==SPACE==#

  result.push(
  <div className="systemUpgradeUnit">
   <label>{system_name}</label>
   <div>
   {level_widgets}
#==SPACE==#

   </div>
  </div>
  )
 }
 return result
 }
#==SPACE==#

 render() {
 return (
  <div
  className='SystemControlWidget'>
  <b>RnD control</b>
  {this.get_systems_upgrades()}
  </div>
 )
 }
#==SPACE==#

}

###===###.\front01\src\modules\utils\datastorage.js
#==SPACE==#

#==SPACE==#

#==SPACE==#

class DataStorage {
 constructor() {
  this.storage = {}
 }
 save_data = (key, data) => {
  if (!(key in this.storage)) {
   this.storage[key] = null
  }
  this.storage[key] = data
 }
#==SPACE==#

 get_data = (key, pathtovalue) => {
  if (!(key in this.storage)) {
   return null
  }
  if (!pathtovalue) return this.storage[key]
  let tmp = Object.assign({}, this.storage[key])
  let subkeys = pathtovalue.split('.')
  for (let i in subkeys) {
   tmp = tmp[subkeys[i]]
  }
  return tmp
 }
#==SPACE==#

}
#==SPACE==#

export let dataController = new DataStorage()

###===###.\front01\src\modules\utils\updatetimers.js
#==SPACE==#

#==SPACE==#

class UpdateTickTimerCounter{
 constructor(){
  this.timers = {}
 }
 add = (key, timer) =>{
  this.timers[key] = timer
 }
 get = (key) =>{
  return this.timers[key] 
 }
 }
#==SPACE==#

#==SPACE==#

export let timerscounter = new UpdateTickTimerCounter()

###===###.\front01\src\modules\widgets\AdminRadar.js
#==SPACE==#

import React from 'react'
import { get_navdata, get_solarflare, get_map_border } from '../network/connections';
#==SPACE==#

import { Canvas } from '@react-three/fiber'
#==SPACE==#

import { entityRenderer } from '../renderers/EntityRenderer';
import { entityRendererCursor } from '../renderers/CursorRenderer';
import { timerscounter } from '../utils/updatetimers';
import { radarRenderer } from '../renderers/RadarRenderer';
import { get_locales } from '../locales/locales';
#==SPACE==#

#==SPACE==#

export let global_observer_pos = [0, 0]
export function set_global_observer_pos(value){
    global_observer_pos = value
}
#==SPACE==#

export class AdminRadarWidget extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            scale_width: 600,
            scale_factor: 1,
#==SPACE==#

            controlled_observer_pos: [0, 0],
#==SPACE==#

            data: {
                "observer_pos": [0, 0],
                "hBodies": {},
                "lBodies": {},
                "aZones": {},
            },
            entities_list: [],
            entity_hovered: "",
            key_pressed: [0, 0],
            show_id_labels: true,
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
        let tmp_data = this.state.data
        tmp_data["observer_pos"] = global_observer_pos
        this.setState({ "data": tmp_data })
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    proceed_data_message = () => {
        let nav_data = get_navdata()
#==SPACE==#

        let o = global_observer_pos //this.state.controlled_observer_pos
        o[0] = o[0] + this.state.key_pressed[0]
        o[1] = o[1] + this.state.key_pressed[1]
#==SPACE==#

        nav_data["observer_pos"] = o
#==SPACE==#

        this.setState({
            "data": nav_data,
        })
    }
#==SPACE==#

    set_entity_hovered = (s) => {
        this.setState({ entity_hovered: s })
    }
#==SPACE==#

    move_observer = (axis, step) => {
        let o = this.state.controlled_observer_pos
        if (axis === 'X') o[0] = o[0] + step
        if (axis === 'Y') o[1] = o[1] + step
#==SPACE==#

        this.setState({
            "controlled_observer_pos": o
        })
    }
#==SPACE==#

    move_observer_step = (params) => {
        this.setState({
            "key_pressed": params
        })
    }
#==SPACE==#

#==SPACE==#

    onMouseMove = (mouse) => {
#==SPACE==#

        /*if ((mouse.x < treshhold_out) && (mouse.x > -treshhold_out)) {
         if (mouse.x > treshhold_in) this.move_observer("X", step)
         if (mouse.x < -treshhold_in) this.move_observer("X", -step)
        }
        if ((mouse.y < treshhold_out) && (mouse.y > -treshhold_out)) {
         if (mouse.y > treshhold_in) this.move_observer("Y", step)
         if (mouse.y < -treshhold_in) this.move_observer("Y", -step)
        }*/
#==SPACE==#

    }
#==SPACE==#

#==SPACE==#

#==SPACE==#

    get_buttons_block = () => {
        let step = 20
        return (<div
            className='AccelerationController_btnblock'>
            <button disabled> {"<<<<"} </button>
            <button
#==SPACE==#

                onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
                onMouseDown={(e) => { this.move_observer_step([0, step]) }}
            > Forw </button>
            <button disabled> {">>>>"} </button>
#==SPACE==#

            <button
#==SPACE==#

                onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
                onMouseDown={(e) => { this.move_observer_step([-step, 0]) }}
            > TLeft </button>
            <button
#==SPACE==#

                onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
                onMouseDown={(e) => { this.move_observer_step([0, -step]) }}
            > Back </button>
            <button
#==SPACE==#

                onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
                onMouseDown={(e) => { this.move_observer_step([step, 0]) }}
            > TRight </button>
        </div>)
    }
#==SPACE==#

#==SPACE==#

    render() {
        let objects = entityRenderer.get_objects_from_data(this.state.data, this.state.scale_factor, { "show_id_labels": this.state.show_id_labels, "map_border": get_map_border() })
        let aim_markers = entityRendererCursor.get_objects_from_data(this.onMouseMove, (e) => { })
        let selection_objects = entityRenderer.get_selection_marker(this.state.data, this.state.scale_factor, this.state.entity_hovered)
        let solar_flares = radarRenderer.get_solar_flares_shades(get_solarflare())
        return (<div className='PlayersRadar'
        >
            <div className="radarSection">
                <Canvas
                    //resize = {{ scroll: true, debounce: { scroll: 50, resize: 0 } }}
                    orthographic={true}
#==SPACE==#

                    style={{
                        'width': "600px",
                        'height': "600px",
                        'border': 'solid',
                        'background': 'black'
                    }}
                >
                    <ambientLight />
                    {objects}
                    {aim_markers}
                    {selection_objects}
                    {solar_flares}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

                </Canvas>
#==SPACE==#

                <div
                    style={{
                        "display": "flex",
                        "flex-direction": "row",
                        "justify-content": "space-between",
                        "color": "grey"
                    }}>
                    <label>SCALE: <input
                        type="range"
                        min={0.1}
                        max={2}
                        step={0.02}
                        class="slider"
                        id="valueForward"
                        value={this.state.scale_factor}
                        onChange={(e) => {
                            this.setState({ scale_factor: e.target.value })
#==SPACE==#

                        }}
                    //value={this.state.progradeAcc}
                    /> </label>
                    {parseFloat(this.state.scale_factor).toFixed(2)}
                    {this.get_buttons_block()}
                    <button onClick={() => { this.setState({ controlled_observer_pos: [0, 0] }) }}> CLEAR OFFSET</button>
                    <label> {get_locales("toogle_id_labels")} <input type="checkbox" checked={this.state.show_id_labels} onChange={(e) => { this.setState({ "show_id_labels": e.target.checked }) }}></input> </label>
                </div>
            </div >
        </div >)
    }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\src\modules\widgets\BodiesSelector.js
#==SPACE==#

import React from 'react'
import { send_command, get_navdata, get_http_address } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

export class HBodiesSelector extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            hbodies_data: {},
            lbodies_data: {},
            slots_in_row: 7,
#==SPACE==#

        }
    }
    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    proceed_data_message = () => {
        let nav_data = get_navdata()
        if (!nav_data) return
        let hbodies_data = {}
        let lbodies_data = {}
#==SPACE==#

        for (let k in nav_data["hBodies"]) {
            hbodies_data[k] = nav_data["hBodies"][k]
        }
#==SPACE==#

        for (let k in nav_data["lBodies"]) {
            lbodies_data[k] = nav_data["lBodies"][k]
        }
        this.setState({
            "hbodies_data": hbodies_data,
            "lbodies_data": lbodies_data
        })
#==SPACE==#

#==SPACE==#

#==SPACE==#

    }
#==SPACE==#

    take_control = (key) => {
        send_command("map_editor", "admin", "select_body", { 'mark_id': key })
        this.props.onBodySelect(key)
    }
    delete = (key) => {
        send_command("map_editor", "admin", "delete_body", { 'mark_id': key })
        this.props.onBodySelect(key)
    }
#==SPACE==#

    release_control = (key)=>{
        send_command("map_editor", "admin", "select_body", { 'mark_id': null })
        this.props.onBodySelect(key)
    }
#==SPACE==#

    copy_entity = (key) => {
        send_command("map_editor", "admin", "copy_body", { 'mark_id': key })
        this.props.onBodySelect(key)
    }
#==SPACE==#

#==SPACE==#

    get_control_widget = (key, data) => {
        return (
            <div
                className='bodySelectorWidget'
                onMouseEnter={(e) => { this.props.onBodyHighlight(key) }}
                onMouseLeave={(e) => { this.props.onBodyHighlight(null) }}
            >
                <label>{data["type"]}</label>
                <label>{key}</label>
#==SPACE==#

#==SPACE==#

                <button onClick={(e) => { this.take_control(key) }}> select </button>
                <button onClick={(e) => { this.release_control(key) }}> release </button>
                <button onClick={(e) => { this.copy_entity(key) }}> copy </button>
                <button onClick={(e) => { this.delete(key) }}> delete </button>
            </div>
#==SPACE==#

        )
    }
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    get_hbodies_list = () => {
        let percs = 100 / this.state.slots_in_row;
        let style_grid = ""
        for (let i = 0; i < this.state.slots_in_row; i++) {
            style_grid = style_grid + percs.toFixed(2).toString() + "% "
        }
        let hbodies = []
        for (let k in this.state.hbodies_data) {
            if (this.state.hbodies_data[k]) {
                hbodies.push(
                    this.get_control_widget(k, this.state.hbodies_data[k])
                )
            }
        }
        return <div className='BodiesSelector_section'
            style={{
                "grid-template-columns": style_grid
            }}
        >{hbodies}</div>
    }
#==SPACE==#

    get_lbodies_list = () => {
        let lbodies = []
        let percs = 100 / this.state.slots_in_row;
        let style_grid = ""
        for (let i = 0; i < this.state.slots_in_row; i++) {
            style_grid = style_grid + percs.toFixed(2).toString() + "% "
        }
#==SPACE==#

        for (let k in this.state.lbodies_data) {
#==SPACE==#

            if (this.state.lbodies_data[k]) {
                lbodies.push(
                    this.get_control_widget(k, this.state.lbodies_data[k])
                )
            }
        }
        return <div className='BodiesSelector_section'
            style={{
                "grid-template-columns": style_grid
            }}>{lbodies}</div>
    }
#==SPACE==#

    render() {
#==SPACE==#

        return (<div className='BodiesSelector div_vertical'>
            <b>"BodiesSelector"</b>
            <input type="number" onChange={(e) => { this.setState({ "slots_in_row": e.target.value }) }} value={this.state.slots_in_row}></input>
            {this.get_hbodies_list()}
#==SPACE==#

            {this.get_lbodies_list()}
        </div>)
#==SPACE==#

    }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

export class BodyEditor extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            selected_body_idx: null,
            selected_body_ref: {},
            selected_body_edit: {},
            selected_body_stats: {},
            forced: false
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    compare_selection_heavy = (body) => {
        for (let k in body) {
            if (k in this.state.selected_body_ref) {
                if (this.state.selected_body_ref[k] !== body[k]) {
                    return false
                }
            }
            else {
                return false
            }
        }
    }
#==SPACE==#

    //#region SELECTION UPDATE
    compare_selection = (body) => {
        let tmp1 = Object.assign({}, this.state.selected_body_ref)
        let tmp2 = Object.assign({}, body)
        delete tmp1["pos"]
        delete tmp1["vel"]
        delete tmp2["pos"]
        delete tmp2["vel"]
        return JSON.stringify(tmp1) === JSON.stringify(tmp2)
    }
#==SPACE==#

    find_in_navdata = (mark_id, navdata) => {
        let tmp = null
        if (mark_id in navdata["lBodies"]) {
            tmp = navdata["lBodies"][mark_id]
        }
        else if (mark_id in navdata["hBodies"]) {
            tmp = navdata["hBodies"][mark_id]
        }
        return tmp
    }
#==SPACE==#

    proceed_data_message = () => {
        let nav_data = get_navdata()
        if (!nav_data) return
        if (this.props.selected_body_idx) {
            let selected_body = this.find_in_navdata(this.props.selected_body_idx, nav_data)
            if (!this.compare_selection(selected_body)) {
#==SPACE==#

#==SPACE==#

#==SPACE==#

                this.setState({
                    selected_body_edit: Object.assign({}, selected_body),
                    selected_body_ref: Object.assign({}, selected_body),
                    selected_body_idx: this.props.selected_body_idx
                }, this.update_body_stats)
            }
        }
    }
    //#endregion
#==SPACE==#

#==SPACE==#

    //#region ATTRIBUTES
#==SPACE==#

    change_attribute = (key, value) => {
        let tmp_num = parseFloat(value)
        if (isNaN(tmp_num)) tmp_num = value
#==SPACE==#

        let edited_body_tmp = this.state.selected_body_edit
        edited_body_tmp[key] = tmp_num
        this.setState({ selected_body_edit: edited_body_tmp }, this.update_body_stats)
    }
#==SPACE==#

#==SPACE==#

    get_attributes = () => {
        let result = []
        for (let k in this.state.selected_body_edit) {
            if (!(["predictions", "vel"].includes(k))) result.push(<label>{k}: <input onChange={(e) => { this.change_attribute(k, e.target.value) }} value={this.state.selected_body_edit[k]}></input></label>)
#==SPACE==#

        }
        let k = "forced"
        result.push(<label>{k}: <input type="checkbox" onChange={(e) => {
            this.setState({ forced: e.target.value })
            //console.log("e.target.value", e.target)
        }} value={this.state.forced}></input></label>)
        return result
    }
#==SPACE==#

    commit_attribute = () => {
        send_command("map_editor", "admin", "change_body", { "descr": this.state.selected_body_edit, "forced": this.state.forced })
        this.setState({
            selected_body_idx: null
        })
    }
#==SPACE==#

    //#endregion
#==SPACE==#

#==SPACE==#

    update_body_stats = () => {
        if (this.state.selected_body_edit.length === 0) return;
        if (!("gr" in this.state.selected_body_edit)) return;
        let header_content = {
            "Content-Type": "application/json",
            "Body-Description": JSON.stringify(this.state.selected_body_edit)
        }
#==SPACE==#

        var myInit = {
            method: "GET",
            headers: header_content,
        }
#==SPACE==#

        return fetch(get_http_address() + "/utils/orbital_stats", myInit)
            .then(response => {
                let code = response.status;
#==SPACE==#

                switch (code) {
                    case 200:
                        let data = response.json()
                        return data
                    default:
                        break;
                }
            })
            .then(data => {
#==SPACE==#

                this.setState({
                    selected_body_stats: data
                })
            })
    }
#==SPACE==#

    get_body_stats = () => {
        let result = []
        for (let field in this.state.selected_body_stats) {
            result.push(
                <label>
                    {field}: {this.state.selected_body_stats[field]}
                </label>
            )
        }
        return result
#==SPACE==#

    }
#==SPACE==#

#==SPACE==#

    render() {
        return (
            <div className='BodyEditor'>
                <div
                    className='div_vertical'>
                    <b>BodyEditor</b>
                    {this.get_attributes()}
                    <button onClick={(e) => { this.commit_attribute() }}>Commit</button>
                </div>
                <div
                    className='div_vertical'>
                    <b>BodyStats</b>
                    {this.get_body_stats()}
                </div>
#==SPACE==#

            </div>)
    }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class BodySpawner extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            spawned_entity_type: "",
            spawned_entity_markId: "",
        }
    }
#==SPACE==#

#==SPACE==#

#==SPACE==#

    commit_spawn = () => {
        send_command("map_editor", "admin", "spawn_body", {
            "entity_type": this.state.spawned_entity_type,
            "mark_id": this.state.spawned_entity_markId,
        })
        this.setState({
            spawned_entity_markId: ""
        })
    }
#==SPACE==#

    get_entitytype_selector = () => {
        let options = [<option key={""} value={""}> {""} </option>]
        let options_list = ["ae_Ship", "NPC_Ship", "NPC_Kraken", "SpaceStation", "SpaceStationDebris", "hBody", "ResourceAsteroid", "Mine_type1", "Mine_type2", "WormHole", "MeteorsCloud", "QuantumShadow", "pjtl_Mine", "ShipDebris", "intact_Container"]
        for (let i in options_list) {
            let option = options_list[i]
            options.push(<option key={option} value={option}> {option} </option>)
        }
        return <select onChange={(e) => { this.setState({ "spawned_entity_type": e.target.value }) }}>{options}</select>
    }
#==SPACE==#

    render() {
        return (<div
            className='div_vertical'>
            <b>BodySpawner</b>
            {this.get_entitytype_selector()}
            <label>MarkID: <input onChange={(e) => { this.setState({ "spawned_entity_markId": e.target.value }) }} value={this.state.spawned_entity_markId}></input></label>
            <button onClick={(e) => { this.commit_spawn() }}>SPAWN</button>
        </div>)
    }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class MapLoader extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            map_list: [],
            map_name: ""
        }
    }
#==SPACE==#

#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get("MapLoader")
#==SPACE==#

        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.updateContent, 1000)
        timerscounter.add("MapLoader", timer_id)
        this.updateContent()
    }
#==SPACE==#

#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get("MapLoader")
        clearInterval(timer_id)
    }
#==SPACE==#

#==SPACE==#

    updateContent = () => {
        var myInit = {
            method: "GET",
            headers: {
            },
        }
#==SPACE==#

        return fetch(get_http_address() + "/admin/maps", myInit)
            .then(response => {
                let code = response.status;
#==SPACE==#

                switch (code) {
                    case 200:
                        let data = response.json()
                        return data
                    default:
                        break;
                }
            })
            .then(data => {
#==SPACE==#

                this.setState({
                    map_list: data
                })
            })
            .catch(error => {
#==SPACE==#

            });
    }
#==SPACE==#

    get_map_list = () => {
        let result = []
        for (let i in this.state.map_list) {
            let map = this.state.map_list[i]
            result.push(
                <label onClick={() => { this.onLoadSelected(map) }} >{map}</label>
            )
        }
        return <div className='map_selector'>{result} </div>
    }
#==SPACE==#

    onSaveCurrent = () => {
        send_command("map_editor", "admin", "save_map", { "map_name": this.state.map_name })
    }
#==SPACE==#

    onLoadSelected = (map_name) => {
        this.setState({ "map_name": map_name.split('.')[0] })
        send_command("map_loader", "admin", "load_map", { "map_name": map_name })
    }
#==SPACE==#

    render() {
        return (<div
            className='FileLoader'
        >
            <b>MapLoader</b>
            {this.get_map_list()}
#==SPACE==#

            <input onChange={(e) => { this.setState({ "map_name": e.target.value }) }} value={this.state.map_name}></input>
            <button onClick={this.onSaveCurrent}>SAVE</button>
        </div>)
    }
}

###===###.\front01\src\modules\widgets\CapMarksControlWidget.js
import React from 'react'
import { get_capmarks, get_observer_id, send_command } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
#==SPACE==#

export class CapMarksControlWidget extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

  this.state = {
   data: {
   },
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
  let data = get_capmarks("radar_sm")
  let mark_id = get_observer_id()
  if (data) this.setState({ "data": data, "mark_id": mark_id })
 }
#==SPACE==#

 onSelect = (char) => {
  send_command("ship.cap_marks", this.state.mark_id, "select_point", { "char": char })
 }
#==SPACE==#

 onDeactivate = (char) => {
  send_command("ship.cap_marks", this.state.mark_id, "deactivate_point", { "char": char })
 }
#==SPACE==#

 get_capmark_control = (char) => {
  return <tr>
   <td>
    {char}
   </td>
   <td>
    {this.state.data[char]["position"][0]}, {this.state.data[char]["position"][1]}
   </td>
   <td>
    {this.state.data[char]["active"] ? "true" : "false"}
   </td>
   <td>
    <button onClick={(e) => { this.onSelect(char) }}>{get_locales("select")}</button>
   </td>
   <td>
    <button onClick={(e) => { this.onDeactivate(char) }}>{get_locales("deaсtivate")}</button>
   </td>
  </tr>
 }
#==SPACE==#

 get_capmarks_table = () => {
  let result = []
  for (let char in this.state.data) {
   result.push(this.get_capmark_control(char))
  }
  return (
   <table>
    <thead>
     <th>{get_locales("MarkLetter")}</th>
     <th>{get_locales("Position")}</th>
     <th>{get_locales("Status")}</th>
#==SPACE==#

    </thead>
    <tbody>
     {result}
    </tbody>
   </table>
  )
 }
#==SPACE==#

#==SPACE==#

 render() {
  return (
   <div className='SystemControlWidget'>
    <b>{get_locales("CapPointsController")}</b>
    {this.get_capmarks_table()}
   </div>
  )
 }
#==SPACE==#

}

###===###.\front01\src\modules\widgets\CommandEditor.js
#==SPACE==#

import React from 'react'
#==SPACE==#

import '../../styles/CommandEditorWidget.css'
import { send_command, get_ships_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

const command_descriptions = {
 "takes_damage": {
  "target": "ship.damage_sm",
  "params": {
   "damage_value": 0,
   "damage_type": ["explosion", "emp", "collision"]
  },
 },
 "upgrade_system_admin": {
  "target": "ship.RnD_sm",
  "params": {
   "system": ["engine_sm", "launcher_sm", "energy_sm", "radar_sm", "resources_sm"]
  },
 },
#==SPACE==#

 "set_ship_level": {
  "target": "ship.RnD_sm",
  "params": {
   "value": [1, 2, 3]
  },
 },
#==SPACE==#

 "downgrade_system": {
  "target": "ship.RnD_sm",
  "params": {
   "system": ["engine_sm", "launcher_sm", "energy_sm", "radar_sm", "resources_sm"]
  },
 },
#==SPACE==#

#==SPACE==#

 "change_amount": {
  "target": "ship.resources_sm",
  "params": {
   "resource_name": ["metal", "pjtl_TimedExplosive", "pjtl_TriggerExplosive", "pjtl_Mine", "pjtl_TimedEMP", "io_Drone", "hp_RepairKit"],
   "resource_amount": 0
  },
 },
 "repair_system_admin": {
  "target": "ship.damage_sm",
  "params": {
   "system": ["engine_sm", "launcher_sm", "energy_sm", "radar_sm", "resources_sm"]
  },
 },
 "apply_wound":{
  "target": "ship.med_sm",
  "params": {
   "role": ["captain", "navigator", "cannoneer", "engineer"]
  },
 },
 "disable_user":{
  "target": "ship.med_sm",
  "params": {
   "role": ["captain", "navigator", "cannoneer", "engineer"]
  },
 },
 "restore_user":{
  "target": "ship.med_sm",
  "params": {
   "role": ["captain", "navigator", "cannoneer", "engineer"]
  },
 },
 "terminate_predictor_process":{
  "target": "predictor",
  "params": {},
 },
 "add_predictor_process":{
  "target": "predictor",
  "params": {},
 },
 "run_infection":{
  "target": "ship.med_sm.plague",
  "params": {},
 },
 "pause_infection":{
  "target": "ship.med_sm.plague",
  "params": {},
 },
 "terminate_infection":{
  "target": "ship.med_sm.plague",
  "params": {},
 },
 "set_period_duration":{
  "target": "ship.med_sm.plague",
  "params": {
   "value":10
  },
 }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class CommandEditorWidget extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

  this.state = {
   ships: [],
   command: null
  }
#==SPACE==#

 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
  let res = []
  for (let k in get_ships_state()) {
   res.push(k)
  }
  this.setState({ "ships": res })
 }
#==SPACE==#

 onSendCommand = (e) => {
  let level = this.state.target
  send_command(level, this.state.ship_id, this.state.command, this.state)
#==SPACE==#

 }
#==SPACE==#

 get_option_editor = (key, option_descr) => {
#==SPACE==#

  if (!key) return <span></span>
#==SPACE==#

#==SPACE==#

  let input = <input type="string" onChange={(e) => { this.setState({ [key]: e.target.value }) }}></input>
#==SPACE==#

#==SPACE==#

  if (typeof (option_descr) === typeof (0)) {
   input = <input type="number" onChange={(e) => { this.setState({ [key]: Number.parseFloat(e.target.value) }) }}></input>
  }
  else if (typeof (option_descr) == typeof ([])) {
   let option_lists = [<option></option>]
   for (let i in option_descr) {
    option_lists.push(<option >{option_descr[i]}</option>)
   }
   input = <select onChange={(e) => { this.setState({ [key]: e.target.value }) }}>{option_lists}</select>
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#

  return (<div className='commandParamsOption'>
   <label>{key}</label>
   {input}
  </div>)
 }
#==SPACE==#

 get_description = (key) => {
  if (!key) return <span></span>
  let result = []
  let command = command_descriptions[key]
  for (let option in command["params"]) {
   result.push(this.get_option_editor(option, command["params"][option]))
  }
  return (<div className='commandParamsSection'>
   {result}
  </div>)
#==SPACE==#

 }
#==SPACE==#

 get_command_panel = () => {
  let ships_options = [<option></option>]
#==SPACE==#

  for (let k in this.state.ships) {
   ships_options.push(<option value={this.state.ships[k]}>
    {this.state.ships[k]}
   </option>)
  }
  let command_options = [<option></option>]
  for (let k in command_descriptions) {
   command_options.push(<option value={k}>
    {k}
   </option>)
  }
  return (<div className='commandEditorUnit'>
   <select onChange={(e) => { this.setState({ "ship_id": e.target.value }) }}>{ships_options}</select>
   <select onChange={(e) => {
    let target = command_descriptions[e.target.value]["target"]
    this.setState({
     "command": e.target.value,
     "target": target
    })
#==SPACE==#

   }}>{command_options}</select>
   {this.get_description(this.state.command)}
   <button onClick={this.onSendCommand}> send </button>
  </div>)
 }
#==SPACE==#

 render() {
  return (<div className="CommandEditorWidget">
   {this.get_command_panel()}
#==SPACE==#

  </div>)
 }
}

###===###.\front01\src\modules\widgets\FlaresController.js
import React from 'react'
import { get_http_address } from '../network/connections'
import { timerscounter } from '../utils/updatetimers'
import { get_locales } from '../locales/locales'
import { get_solarflare } from '../network/connections'
import { send_command } from '../network/connections'
#==SPACE==#

export class FlaresController extends React.Component {
 constructor() {
 super()
 this.state = {
  sf_timer_value:0
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.onUpdate, 1000)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 onUpdate = () =>{
 this.forceUpdate()
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

 get_solarFlare_control = () => {
 let sf_state = get_solarflare()
 if (!sf_state) return <div></div>
 return (
  <div className='solarFlare_control'>
  <label>
   <b>Solar flare state:</b>{sf_state["state"].toString()}
  </label>
  <label>
   time2nextphase:{sf_state["time2nextphase"]}
  </label>
  <button onClick={() => { this.toogleSolarFlare(!sf_state["state"]) }}>TOOGLE ACTIVITY</button>
  <button onClick={() => { this.toogleSolarFlareTimer(!sf_state["timer_state"]) }}>TOOGLE TIMER</button>
  <input type='number' onChange={(e)=>{this.setState({"sf_timer_value":e.target.value})}}></input>
  <button onClick={() => { this.setSolarFlareTimer() }}>SET TIMER OF CURRENT PHASE</button>
  </div>
 )
 }
#==SPACE==#

#==SPACE==#
 
 toogleSolarFlare = (value) => {
 send_command("solar_flare", "admin", "set_solar_flare", { 'state': value })
 }
#==SPACE==#

 toogleSolarFlareTimer = (value) => {
 send_command("solar_flare", "admin", "set_timer_state", { 'state': value })
 }
#==SPACE==#

 setSolarFlareTimer = () => {
 send_command("solar_flare", "admin", "set_timer_value", { 'value': this.state.sf_timer_value })
 }
#==SPACE==#

 render() {
 let result = this.get_solarFlare_control()
 return result
 }
}

###===###.\front01\src\modules\widgets\MapEditorBrushes.js
#==SPACE==#

import React from 'react'
import { get_navdata, send_command } from '../network/connections';
#==SPACE==#

import { Canvas } from '@react-three/fiber'
#==SPACE==#

#==SPACE==#

import { entityRenderer } from '../renderers/EntityRenderer';
import { entityRendererCursor } from '../renderers/CursorRenderer';
import { timerscounter } from '../utils/updatetimers';
import { NumericControlWidjet } from './NumericControlWidget';
#==SPACE==#

export class MapEditorBrushesWidget extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      "mode": "deleter", //"creator"
      "active": false,
      "radius": 1000,
      "min_size": 140,
      "max_size": 150,
      "min_weight": 1,
      "max_weight": 5,
      "obstacles_type":"MeteorsCloud",
      "closer":false,
    }
#==SPACE==#

  }
#==SPACE==#

#==SPACE==#

#==SPACE==#

  onChangeParam = (key, value) => {
    let tmp = this.state
    tmp[key] = value
    this.props.onBrushChange(tmp)
    this.setState(tmp)
  }
#==SPACE==#

  get_mode_selector = () => {
    let result = []
    let options = ["deleter", "creator", "obstacles_creator", "obstacles_deleter", "selector", "cacher", "uncacher"]
    for (let tmp_i in options) {
      result.push(
        <button
          onClick={(e) => {
            this.onChangeParam("mode", options[tmp_i])
          }}
        >
          {options[tmp_i]}
        </button>
      )
    }
    return <div>
      {result}
    </div>
  }
#==SPACE==#

#==SPACE==#

  get_creator_params = () => {
    let inputs = []
    let keys = ["radius", "min_size", "max_size", "min_weight", "max_weight"]
    for (let tmp_i in keys) {
      let keyname = keys[tmp_i]
      inputs.push(
        <label> {keyname}: <input onChange={(e) => { this.onChangeParam(keyname, parseFloat(e.target.value)) }} value={this.state[keyname]}></input></label>
      )
    }
    let keyname = "closer"
    inputs.push(
      <label> {keyname}: <input type='checkbox' onChange={(e) => { this.onChangeParam(keyname, e.target.checked) }} value={this.state[keyname]}></input></label>
    )
    return <div style={
      {
        "display": "flex",
        "flex-direction": "column"
      }}>{inputs}</div>
  }
#==SPACE==#

  get_obstacles_creator_params = () => {
    let inputs = []
    let keys = ["radius"]
    for (let tmp_i in keys) {
      let keyname = keys[tmp_i]
      inputs.push(
        <label> {keyname}: <input onChange={(e) => { this.onChangeParam(keyname, parseFloat(e.target.value)) }} value={this.state[keyname]}></input></label>
      )
    }
#==SPACE==#

    let keyname2 = "obstacles_type"
    inputs.push(
      <label> {keyname2}: <select onChange={(e) => { this.onChangeParam(keyname2, e.target.value) }} value={this.state[keyname2]}>
        <option value={"MeteorsCloud"}>MeteorsCloud</option>
        <option value={"Mine_type1"}>Mine_type1</option>
        <option value={"Mine_type2"}>Mine_type2</option>
        <option value={"Mine_type1/Mine_type2"}>Mine_type1/Mine_type2</option>
        </select></label>
    )
#==SPACE==#

    keys = ["obstacles_min_count", "obstacles_max_count", "obstacles_probability"]
    for (let tmp_i in keys) {
      let keyname = keys[tmp_i]
      inputs.push(
        <label> {keyname}: <input onChange={(e) => { this.onChangeParam(keyname, parseFloat(e.target.value)) }} value={this.state[keyname]}></input></label>
      )
    }
#==SPACE==#

#==SPACE==#

    return <idv style={
      {
        "display": "flex",
        "flex-direction": "column"
      }
    }>{inputs}</idv>
  }
#==SPACE==#

  get_deleter_params = () => {
    let inputs = []
    let keys = ["radius"]
    for (let tmp_i in keys) {
      let keyname = keys[tmp_i]
      inputs.push(
        <label> {keyname}: <input onChange={(e) => { this.onChangeParam(keyname, parseFloat(e.target.value)) }} value={this.state[keyname]}></input></label>
      )
    }
    return <idv style={
      {
        "display": "flex",
        "flex-direction": "column"
      }
    }>{inputs}</idv>
  }
#==SPACE==#

  get_params_panel = () => {
    if (this.state.mode == "creator") {
      return (this.get_creator_params())
    }
    if (this.state.mode == "obstacles_creator") {
      return (this.get_obstacles_creator_params())
    }
    if (this.state.mode == "obstacles_deleter") {
      return (this.get_deleter_params())
    }
    if (this.state.mode == "deleter") {
      return (this.get_deleter_params())
    }
    if (this.state.mode == "selector") {
      return (this.get_deleter_params())
    }
    if (this.state.mode == "cacher") {
      return (this.get_deleter_params())
    }
    if (this.state.mode == "uncacher") {
      return (this.get_deleter_params())
    }
  }
#==SPACE==#

  render() {
    let inputs = [
      <label> State:<button onClick={(e) => { this.onChangeParam("active", !this.state.active) }}> {this.state.active.toString()} </button> </label>,
      this.get_mode_selector()
    ]
#==SPACE==#

#==SPACE==#

#==SPACE==#

    return (<div style={{
      "display": "flex",
      "flex-direction": "column"
    }}>
      <b>Brush Controller</b>
      {inputs}
      {this.get_params_panel()}
    </div>)
  }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\src\modules\widgets\MapEditorRadar.js
#==SPACE==#

import React from 'react'
import { get_navdata, send_command } from '../network/connections';
#==SPACE==#

import { Canvas } from '@react-three/fiber'
#==SPACE==#

#==SPACE==#

import { entityRenderer } from '../renderers/EntityRenderer';
import { entityRendererCursor } from '../renderers/CursorRenderer';
import { timerscounter } from '../utils/updatetimers';
import { get_brush_object } from '../renderers/CursorRenderer';
#==SPACE==#

export class MapEditorRadarWidget extends React.Component {
 constructor(props) {
 super(props);
#==SPACE==#

#==SPACE==#

 this.state = {
  radar_width: 600,
  scale_factor: 1,
#==SPACE==#

  controlled_observer_pos: [0, 0],
#==SPACE==#

  cursor_position_old: [0, 0],
#==SPACE==#

  data: {
  "observer_pos": [0, 0],
  "hBodies": {},
  "lBodies": {},
  "aZones": {},
  },
  key_pressed: [0, 0],
  clockwise: false,
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.proceed_data_message, 30)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
 let nav_data = get_navdata()
 if (!nav_data) return
 let o = this.state.controlled_observer_pos
 o[0] = o[0] + this.state.key_pressed[0]
 o[1] = o[1] + this.state.key_pressed[1]
#==SPACE==#

 nav_data["observer_pos"] = o
 this.setState({
  "data": nav_data,
  "controlled_observer_pos": o
 })
 }
#==SPACE==#

 move_observer = (axis, step) => {
 let o = this.state.controlled_observer_pos
 if (axis === 'X') o[0] = o[0] + step
 if (axis === 'Y') o[1] = o[1] + step
#==SPACE==#

 this.setState({
  "controlled_observer_pos": o
 })
 }
#==SPACE==#

 move_observer_step = (params) => {
 this.setState({
  "key_pressed": params
 })
 }
#==SPACE==#

#==SPACE==#

 onMouseMove = (mouse) => {
#==SPACE==#

 let mouse_position_x = (mouse.x * this.state.radar_width / 2) / this.state.scale_factor + this.state.controlled_observer_pos[0]
 let mouse_position_y = (mouse.y * this.state.radar_width / 2) / this.state.scale_factor + this.state.controlled_observer_pos[1]
 let cursor_position = [mouse_position_x, mouse_position_y]
 if ((this.state.cursor_position_old[0] !== mouse_position_x) && (this.state.cursor_position_old[1] !== mouse_position_y)) {
  this.setState({ "cursor_position_old": cursor_position })
  //console.log("onMouseMove clockwise", this.state.clockwise)
  send_command("map_editor", "marl_id", "cursor_move", { 'position': [mouse_position_x, mouse_position_y], "clockwise": this.state.clockwise })
 }
#==SPACE==#

 }
#==SPACE==#

 get_brush_params = (to_draw) =>{
  let tmp = Object.assign({}, this.props.brush_state)
  let mouse_position_x = this.state.cursor_position_old[0] 
  let mouse_position_y = this.state.cursor_position_old[1] 
  if (to_draw){
    mouse_position_x = mouse_position_x - this.state.controlled_observer_pos[0]
    mouse_position_y = mouse_position_y - this.state.controlled_observer_pos[1]
  }
  tmp["position"] = [mouse_position_x,mouse_position_y]
  return tmp
 }
#==SPACE==#

 onMouseClick = (e) => {
  if (this.props.brush_state["active"]){
    let tmp = this.get_brush_params(false)
    if (this.props.brush_state["mode"] == "creator"){
      send_command("map_editor", "admin", "brush_create", tmp)
    }
    else if (this.props.brush_state["mode"] == "obstacles_creator"){
      send_command("map_editor", "admin", "brush_spawn_obstacles", tmp)
    }
    else if (this.props.brush_state["mode"] == "obstacles_deleter"){
      send_command("map_editor", "admin", "brush_delete_obstacles", tmp)
    }
    else if (this.props.brush_state["mode"] == "selector"){
      send_command("map_editor", "admin", "brush_select_body", tmp)
    }
    else if (this.props.brush_state["mode"] == "cacher"){
      send_command("map_editor", "admin", "brush_cache", tmp)
    }
    else if (this.props.brush_state["mode"] == "uncacher"){
      send_command("map_editor", "admin", "brush_uncache", tmp)
    }
    else {
      send_command("map_editor", "admin", "brush_delete", tmp)
    }
  }
  else{
    send_command("map_editor", "admin", "select_body", { 'mark_id': null })
  }
 }
#==SPACE==#

#==SPACE==#

 get_buttons_block = () => {
 let step = 20
 return (<div
  className='AccelerationController_btnblock'>
  <button disabled> {"<<<<"} </button>
  <button
#==SPACE==#

  onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
  onMouseDown={(e) => { this.move_observer_step([0, step]) }}
  > Forw </button>
  <button disabled> {">>>>"} </button>
#==SPACE==#

  <button
#==SPACE==#

  onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
  onMouseDown={(e) => { this.move_observer_step([-step, 0]) }}
  > TLeft </button>
  <button
#==SPACE==#

  onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
  onMouseDown={(e) => { this.move_observer_step([0, -step]) }}
  > Back </button>
  <button
#==SPACE==#

  onMouseUp={(e) => { this.move_observer_step([0, 0]) }}
  onMouseDown={(e) => { this.move_observer_step([step, 0]) }}
  > TRight </button>
 </div>)
 }
#==SPACE==#

 render() {
 let objects = entityRenderer.get_objects_from_data(this.state.data, this.state.scale_factor, {"show_gravity":true})
 let selection_objects = entityRenderer.get_selection_marker(this.state.data, this.state.scale_factor, this.props.selected_body_idx)
 let highlighted_objects = entityRenderer.get_selection_marker(this.state.data, this.state.scale_factor, this.props.highlighted_body_idx)
 let aim_markers = entityRendererCursor.get_objects_from_data(this.onMouseMove, this.onMouseClick)
 let radar_size = this.state.radar_width.toString() + "px"
  let brush_objects = get_brush_object(this.get_brush_params(true),this.state.scale_factor)
#==SPACE==#

#==SPACE==#

 return (<div
  style={{
  'display': 'flex',
  'flex-direction': 'column',
  'align-items': 'center',
  'width': "620px",
  'height': "700px",
  'border': 'solid 1px',
#==SPACE==#

  }}
 >
  <Canvas
  //resize = {{ scroll: true, debounce: { scroll: 50, resize: 0 } }}
  orthographic={true}
#==SPACE==#

  style={{
   'width': radar_size,
   'height': radar_size,
   'border': 'solid',
   'background': 'black'
  }}
  >
  <ambientLight />
  {objects}
  {aim_markers}
  {selection_objects}
  {highlighted_objects}
  {brush_objects}
  </Canvas>
#==SPACE==#

  <div
  style={{
   "display": "flex",
   "flex-direction": "row",
   "justify-content": "space-between"
  }}>
  <label>SCALE: <input
   type="range"
   min={0.05}
   max={2}
   step={0.02}
   class="slider"
   id="valueForward"
   value={this.state.scale_factor}
   onChange={(e) => {
   this.setState({ scale_factor: e.target.value })
#==SPACE==#

   }}
  //value={this.state.progradeAcc}
  /> </label>
  {parseFloat(this.state.scale_factor).toFixed(2)}
  <label>
   "frame_id:"{this.state.frame_id}
  </label>
  {this.get_buttons_block()}
  <button onClick={() => { this.setState({ controlled_observer_pos: [0, 0] }) }}> CLEAR OFFSET</button>
  </div>
  <label>Clockwise:<input type="checkbox" value={this.state.clockwise} onChange={(e) => { this.setState({ "clockwise": e.target.checked }) }}></input></label>
 </div >)
 }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\src\modules\widgets\NumericControlWidget.js
#==SPACE==#

import React from 'react'
import '../../styles/NumericControlWidget.css'
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
export class NumericControlWidjet extends React.Component {
 constructor(props) {
  super(props);
  this.state = {
   "value": this.props.init_value
  }
 }
 onChange = (e) => {
  this.setState({ "value": e.target.value }, this.props.onChange(parseFloat(this.state.value)))
 }
 render() {
  return (<label>{get_locales(this.props.label)}:<input
   disabled={this.props.disabled}
   type="range"
   min={this.props.min}
   max={this.props.max}
   step={this.props.step}
   class="slider"
   value={this.state.value}
   onChange={this.onChange}
  //value={this.state.progradeAcc}
  />
   {parseFloat(this.state.value).toFixed(2)}
  </label>
  )
 }
}
#==SPACE==#

#==SPACE==#

export class NumericStepControlWidjet extends React.Component {
 constructor(props) {
  super(props);
  this.state = {
   "value": this.props.init_value,
   "step": 0,
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.step, 30)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 step = () => {
  let value = this.state.value + this.state.step
  if (value<this.props.min) return
  if (value > this.props.max) return
  if (value !== this.state.value) {
   this.setState({ "value": value }, this.props.onChange(value))
  }
 }
#==SPACE==#

 onChange = (e) => {
  this.setState({ "value": e.target.value })
 }
#==SPACE==#

 onChangeStep = (value) => {
  this.setState({ "step": value })
 }
#==SPACE==#

 render() {
  //console.log("NumericStepControlWidjet")
  return (
   <div className='NumericStepControlWidjet'>
    <label>{get_locales(this.props.label)}</label>
    <button
     onMouseDown={(e) => { this.onChangeStep(-this.props.step) }}
     onMouseUp={(e) => { this.onChangeStep(0) }}
     onMouseLeave={(e) => { this.onChangeStep(0) }}
    >{"<<"}</button>
#==SPACE==#

    <button
     onMouseDown={(e) => { this.onChangeStep(this.props.step) }}
     onMouseUp={(e) => { this.onChangeStep(0) }}
     onMouseLeave={(e) => { this.onChangeStep(0) }}
    >{">>"}</button>
    <label className='value_label'>{parseFloat(this.state.value).toFixed(2)}</label>
#==SPACE==#

   </div>
  )
 }
}

###===###.\front01\src\modules\widgets\PerformanceWidget.js
import React from 'react'
import { get_performance, get_system_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

const average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;
class Smoother {
 constructor() {
  this.maxLen = 30
  this.raw_data = {}
  this.frontfps_array = []
  this.last_timestamp = Date.now()
 }
#==SPACE==#

 add_data = (key, value) => {
  if (!(key in this.raw_data)) this.raw_data[key] = []
  this.raw_data[key].push(value)
  if (this.raw_data[key].length > this.maxLen) this.raw_data[key] = this.raw_data[key].slice(1)
 }
#==SPACE==#

 add_timestamp = () => {
  let t = Date.now()
  let dt = t - this.last_timestamp
  if (dt === 0) return
#==SPACE==#

  this.add_data("FPS", 1000/dt)
  this.last_timestamp = Date.now()
 }
#==SPACE==#

 get_last_values = () => {
  let result = {}
  for (let k in this.raw_data) {
   result[k] = this.raw_data[k][this.raw_data[k].length - 1]
  }
  return result
 }
#==SPACE==#

 get_avg_stats = () => {
#==SPACE==#

  let result = {}
  for (let k in this.raw_data) {
   result[k] = average(this.raw_data[k]).toFixed(2)
  }
  return result
 }
#==SPACE==#

 get_persec_stats = () => {
  let result = {}
  for (let k in this.raw_data) {
   result[k] = (1000 / average(this.raw_data[k])).toFixed(2)
  }
  return result
 }
}
#==SPACE==#

const smoother = new Smoother()
#==SPACE==#

export class PerformanceViewer extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

  this.state = {
   data: {},
   hided: false,
   system_state: {}
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
  }
#==SPACE==#

  proceed_data_message = () => {
  let perf_data = get_performance()
  this.setState({ "data": perf_data })
  for (let k in perf_data) {
   smoother.add_data(k, perf_data[k])
  }
  smoother.add_timestamp()
  this.setState({"system_state":get_system_state})
 }
#==SPACE==#

 render() {
  let stats = []
  if (!this.state.hided) {
   let last_vals = smoother.get_last_values()
   //let avg_stats = smoother.get_avg_stats()
   //let persec_stats = smoother.get_persec_stats()
#==SPACE==#

   for (let k in last_vals) {
    stats.push(<label> {k}: {last_vals[k].toFixed(4)}</label>)
    //stats.push(<label> {k}(Avg): {avg_stats[k]}</label>)
    //stats.push(<label> {k}(PSc): {persec_stats[k]}</label>)
   }
  }
#==SPACE==#

  return (<div className='AdminSystemViewer'>
   <label onClick={()=>{this.setState({hided:!this.state.hided});}}><b>PERFORMANCE</b></label>
   {stats}
  </div>)
 }
}

###===###.\front01\src\modules\widgets\PlayerRadar.js
import React from 'react'
import { send_command, get_navdata, get_capmarks, get_solarflare, is_taking_damage,get_map_border } from '../network/connections';
#==SPACE==#

import { Canvas } from '@react-three/fiber'
#==SPACE==#

#==SPACE==#

import { entityRenderer } from '../renderers/EntityRenderer';
import { radarRenderer } from '../renderers/RadarRenderer';
#==SPACE==#

import { entityRendererCursor } from '../renderers/CursorRenderer';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
import { ShipOvervieweWidget } from './ShipOverview';
export class PlayersRadarWidget extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      scale_width: 600,
      scale_factor: 1,
      radar_width: 600,
      data: {
        "mark_id": "",
        "observer_pos": [0, 0],
        "hBodies": {},
        "lBodies": {},
      },
#==SPACE==#

      entities_list: [],
      entity_hovered: "",
#==SPACE==#

      mouse_pos: 0,
      show_id_labels: true
    }
  }
#==SPACE==#

  componentDidMount() {
    let timer_id = timerscounter.get(this.constructor.name)
    if (!timer_id) {
      clearInterval(timer_id)
    }
    timer_id = setInterval(this.proceed_data_message, 30)
    timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

  componentWillUnmount() {
    let timer_id = timerscounter.get(this.constructor.name)
    clearInterval(timer_id)
  }
#==SPACE==#

  proceed_data_message = () => {
#==SPACE==#

    let nav_data = get_navdata()
#==SPACE==#

    let cap_marks = get_capmarks()
    this.setState({
      "data": nav_data,
      "cap_marks": cap_marks
    })
#==SPACE==#

#==SPACE==#

#==SPACE==#

  }
#==SPACE==#

  set_entity_hovered = (s) => {
    this.setState({ entity_hovered: s })
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

  onMouseMove = (mouse) => {
    if ((this.state.mouse_pos[0] !== mouse.x) && (this.state.mouse_pos[0] !== mouse.y)) {
      this.setState({ "mouse_pos": [mouse.x, mouse.y] })
#==SPACE==#

      if (!this.props.can_aim) return
#==SPACE==#

      let vel_angle = mouse.angle() * 180 / 3.14
      let vel_salar = Math.min(mouse.length(), 1)
#==SPACE==#

      send_command("ship.launcher_sm", this.state.data.mark_id, "aim", {
        "vel_angle": vel_angle,
        "vel_scalar": vel_salar
      })
    }
  }
#==SPACE==#

  onMouseClick = () => {
#==SPACE==#

    if (this.props.cap_control) {
      this.onSetMark()
    }
    else {
      this.onLaunch()
    }
  }
#==SPACE==#

  onLaunch = () => {
    if (this.props.can_aim)
      send_command("ship.launcher_sm", this.state.data.mark_id, "launch", {})
  }
#==SPACE==#

  onSetMark = () => {
#==SPACE==#

#==SPACE==#

#==SPACE==#

    let offset = this.state.data["observer_pos"]
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    let mouse_position_x = (this.state.mouse_pos[0] * this.state.radar_width / 2) / this.state.scale_factor + offset[0]
    let mouse_position_y = (this.state.mouse_pos[1] * this.state.radar_width / 2) / this.state.scale_factor + offset[1]
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    let position = [Math.round(mouse_position_x, 2), Math.round(mouse_position_y, 2)]
    send_command("ship.cap_marks", this.state.data.mark_id, "make_point", { "position": position })
#==SPACE==#

#==SPACE==#

#==SPACE==#

  }
#==SPACE==#

  get_cursor_position = () => {
    let offset = this.state.data["observer_pos"]
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    let mouse_position_x = (this.state.mouse_pos[0] * this.state.radar_width / 2) / this.state.scale_factor + offset[0]
    let mouse_position_y = (this.state.mouse_pos[1] * this.state.radar_width / 2) / this.state.scale_factor + offset[1]
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

    let position = [Math.round(mouse_position_x, 2), Math.round(mouse_position_y, 2)]
    return position
  }
#==SPACE==#

  get_solar_flare_timer = () => {
    let solar_flare_state = get_solarflare()
    if (solar_flare_state) {
      return (
        <label>
          {get_locales("time_to_next_sf_phase")}: {solar_flare_state["time2nextphase"]}
        </label>
      )
    }
  }
#==SPACE==#

  render() {
    let aim_markers = entityRendererCursor.get_objects_from_data(this.onMouseMove, this.onMouseClick)
    if (aim_markers.length === 0) aim_markers = this.props.cap_control ? entityRendererCursor.get_objects_from_data(this.onMouseMove, this.onSetMark) : []
    let cap_markers = radarRenderer.get_capmarks(this.state.cap_marks, this.state.data, this.state.scale_factor)
    let scan_markers = radarRenderer.get_objects_from_data(this.state.data, this.state.scale_factor)
    let objects = entityRenderer.get_objects_from_data(this.state.data, this.state.scale_factor, { "show_id_labels": this.state.show_id_labels, 'arrow_scaling': this.props.arrow_scaling, "map_border":get_map_border() })
    let selection_objects = entityRenderer.get_selection_marker(this.state.data, this.state.scale_factor, this.state.entity_hovered)
    let solar_flares = radarRenderer.get_solar_flares_shades(get_solarflare())
    let damage_shades = radarRenderer.get_damage_shades(is_taking_damage())
#==SPACE==#

    //if (scan_params) radar_arcs= getDistantScanArc(scan_params.close_range, scan_params.distant_range, scan_params.distant_arc, scan_params.distant_dir, [0,0], this.state.scale_factor)
#==SPACE==#

#==SPACE==#

#==SPACE==#

    let cursor_position = this.get_cursor_position()
    return (<div className='PlayersRadar'
    >
#==SPACE==#

      <div className="radarSection">
        <Canvas
          id={"MyCanvas"}
          //resize = {{ scroll: true, debounce: { scroll: 50, resize: 0 } }}
          orthographic={true}
#==SPACE==#

#==SPACE==#

          style={{
            'width': "600px",
            'height': "600px",
            'border': 'solid',
            'background': 'black'
          }}
        >
          <ambientLight />
          {aim_markers}
          {objects}
          {scan_markers}
          {selection_objects}
          {cap_markers}
          {solar_flares}
          {damage_shades}
          onClick = {this.state.onMouseMove}
        </Canvas>
        <div className='RadarShipInfoLayer'>
          <ShipOvervieweWidget
            onSystemSelection={(e) => { }}
          ></ShipOvervieweWidget>
          <div className='ShipNavigationInfo'>
            <label>{get_locales("SCALE")}: <input
              type="range"
              min={0.1}
              max={2}
              step={0.02}
              class="slider"
              id="valueForward"
              value={this.state.scale_factor}
              onChange={(e) => {
                this.setState({ scale_factor: e.target.value })
#==SPACE==#

              }}
            //value={this.state.progradeAcc}
            /> {parseFloat(this.state.scale_factor).toFixed(2)}</label>
            <label>{get_locales("POS")}: {this.state.data.observer_pos[0].toFixed(0)},{this.state.data.observer_pos[1].toFixed(0)}</label>
            <label>{get_locales("CURSOR_POS")}: {cursor_position[0].toFixed(0)},{cursor_position[1].toFixed(0)}</label>
            <label> {get_locales("toogle_id_labels")} <input type="checkbox" checked={this.state.show_id_labels} onChange={(e) => { this.setState({ "show_id_labels": e.target.checked }) }}></input> </label>
            {this.get_solar_flare_timer()}
          </div>
        </div>
      </div>
    </div >)
  }
}

###===###.\front01\src\modules\widgets\QuestPointsController.js
#==SPACE==#

import React from 'react'
import { send_command, get_system_state, get_observer_id, get_http_address } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

#==SPACE==#

export class QuestPointsController extends React.Component {
 constructor(props) {
  super(props);
  this.state = {
   data: {
#==SPACE==#

   },
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 1000)
  timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
  let url = get_http_address()+"/quest_controller/get_state"
  var myInit = {
   method: "GET",
  }
#==SPACE==#

  ////////console.log("params",params)
  let message_code = 0
  return fetch(url, myInit)
   .then(response => {
    message_code = response.status;
    return (response.json())
   },)
   .then(data => {
    switch (message_code) {
     case 200:
      this.setState({"data":data})
      break;
     default:
      break;
    }
   })
   .catch(e=>{
#==SPACE==#

#==SPACE==#

#==SPACE==#
     
   })
 }
#==SPACE==#

 toogle_qp_state = (qp_name) =>{
  send_command("qp_controller", get_observer_id, "toogle_qp_state", {"qp_name":qp_name})
 }
#==SPACE==#

 get_quest_point_list = () =>{
  let result = []
  for(let qp_name in this.state.data){
   result.push(
    <div>
     {qp_name}: {this.state.data[qp_name].toString()} <button onClick={(e)=>{this.toogle_qp_state(qp_name)}}> toogle_state </button>
    </div>
   )
  }
  return <div>{result}</div>
 }
#==SPACE==#

 render() {
  return (
   <div
    className='SystemControlWidget'>
    {this.get_quest_point_list()}
   </div>
  )
 }
#==SPACE==#

}

###===###.\front01\src\modules\widgets\RolesManager.js
import React from 'react'
import { get_http_address } from '../network/connections'
import { timerscounter } from '../utils/updatetimers'
import { get_locales } from '../locales/locales'
#==SPACE==#

export class RoleManagerWidget extends React.Component {
 constructor() {
 super()
 this.state = {
  data: {
  "captain": {}
  }
 }
 }
#==SPACE==#

 componentDidMount() {
 let timer_id = timerscounter.get(this.constructor.name)
 if (!timer_id) {
  clearInterval(timer_id)
 }
 timer_id = setInterval(this.onUpdate, 1000)
 timerscounter.add(this.constructor.name, timer_id)
 }
#==SPACE==#

 componentWillUnmount() {
 let timer_id = timerscounter.get(this.constructor.name)
 clearInterval(timer_id)
 }
#==SPACE==#

#==SPACE==#

 onUpdate = () => {
 var myInit = {
  method: "GET",
  headers: {}
 }
#==SPACE==#

 return fetch(get_http_address() + "/users/roles/table", myInit)
  .then(response => {
  let code = response.status;
  if (code === 200) {
   return response.json()
  }
#==SPACE==#

  }).then(data => {
  if (data) {
   this.setState({ 'data': data })
#==SPACE==#

  }
  }).catch(error => {
  console.error('There is some error', error);
 });
 }
#==SPACE==#

 onAssignRole = (username, role, state) => {
 var myInit = {
  method: "PUT",
  headers: {
  'Username': username,
  'Role': role,
  'State': state
  }
 }
#==SPACE==#

 return fetch(get_http_address() + "/users/roles/role", myInit)
  .then(response => {
  let code = response.status;
  if (code === 200) {
   return response.json()
  }
#==SPACE==#

  }).then(data => {
  if (data) {
   this.setState({ 'data': data })
#==SPACE==#

  }
  })
 }
#==SPACE==#

 is_module_accesable = (username, modulename) => {
 if (this.state.data)
  if (this.state.data[username])
  if (this.state.data[username][modulename])
   return this.state.data[username][modulename]
 else return false
 }
#==SPACE==#

 get_assigned_roles_row = (username) => {
 let result = [
  <td>
  {get_locales(username)}
  </td>
 ]
 let available_modules = ['captain','navigator', 'cannoneer', 'engineer']
 for (let i in available_modules) {
  let modulename = available_modules[i]
  result.push(<td>
  <td><input type='checkbox' disabled = {((modulename==="captain")&&(username==="captain"))}onClick={(e) => {
#==SPACE==#

   this.onAssignRole(username, modulename, e.target.checked)
  }} checked={this.is_module_accesable(username, modulename)} /></td>
  </td>)
 }
 return <tr>{result}</tr>
 }
#==SPACE==#

 get_roles_table = () => {
 let result = []
 let usernames = ["captain", "navigator", "cannoneer", "engineer"]
 for (let i in usernames) {
  let username = usernames[i]
  result.push(this.get_assigned_roles_row(username))
 }
 return <table>
  <thead>
  <th>{get_locales("")}</th>
  <th>{get_locales("captain")}</th>
  <th>{get_locales("navigator")}</th>
  <th>{get_locales("cannoneer")}</th>
  <th>{get_locales("engineer")}</th>
  </thead>
  <tbody>
  {result}
  </tbody>
 </table>
 }
#==SPACE==#

 render() {
 return <div>
  {this.get_roles_table()}
 </div>
 }
}

###===###.\front01\src\modules\widgets\ShipOverview.js
#==SPACE==#

import React from 'react'
import { get_system_state, send_command } from '../network/connections';
#==SPACE==#

import { Canvas } from '@react-three/fiber'
#==SPACE==#

#==SPACE==#

import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

import { useLoader } from '@react-three/fiber'
import { useRef } from 'react'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { get_locales } from '../locales/locales';
import { RepairTeamWidget } from '../systems/crew_sm.js'
import { EnergyControlWidget } from '../systems/energy_sm';
import { ResourcesControlWidget } from '../systems/resources_sm';
import { CrewControlWidget } from '../systems/crew_sm.js';
import { RadarControlWidget } from '../systems/radar_sm';
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class EngineerControllerWidget extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            selected_sm: null
        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
    render() {
        return (<div className='EngineerControllerWidget'>
            <ShipOvervieweWidgetLayer role={this.props.role} />
            <div className='EngineerSystemsLayer'>
                <CrewControlWidget />
                <ResourcesControlWidget />
                <EnergyControlWidget />
                <RadarControlWidget />
            </div>
        </div>)
    }
#==SPACE==#

}
#==SPACE==#

#==SPACE==#

export class ShipOvervieweWidgetLayer extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
            selected_sm: null
        }
    }
    render() {
        return (
            <div className="OverviewWidget">
                <ShipOvervieweWidget
                    onSystemSelection={(sm_name) => { this.setState({ "selected_sm": sm_name }) }}
                    selected_sm={this.state.selected_sm}
                />
                <SystemOvervieweWidget
                    role={this.props.role}
                    sm_name={this.state.selected_sm}
                />
            </div>
        )
    }
}
#==SPACE==#

export class ShipOvervieweWidget extends React.Component {
    constructor(props) {
        super(props);
#==SPACE==#

#==SPACE==#

        this.state = {
#==SPACE==#

        }
    }
#==SPACE==#

    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    proceed_data_message = () => {
        let damage_sm = get_system_state("damage_sm")
        this.setState({ "damage_sm": damage_sm })
    }
#==SPACE==#

    proceed_system_selection = (sm_name) => {
        if (["cone_sm", "hull_sm"].includes(sm_name)) return
        this.props.onSystemSelection(sm_name)
    }
#==SPACE==#

    get_hp_color = (sm_name) => {
        if (!("damage_sm" in this.state)) return 0xffffff
        if (!(this.state.damage_sm)) return 0xffffff
        if (!(sm_name in this.state.damage_sm.systems_hp)) return 0xffffff
        let perc_hp = this.state.damage_sm.systems_hp[sm_name].current_hp / this.state.damage_sm.systems_hp[sm_name].max_hp
        if (perc_hp < 1) {
            let perc_hp_step = 0.2
            perc_hp = perc_hp - perc_hp % perc_hp_step
            perc_hp = perc_hp * 0.5
        }
#==SPACE==#

        let R = 255 - 255 * (perc_hp - 0.5) / 0.5
        let G = 255
        if (perc_hp < 0.5) {
            R = 255
            G = 255 * perc_hp / 0.5
        }
#==SPACE==#

#==SPACE==#

        let color_string = "0x" + this.format2leading_zero_hex(R) + this.format2leading_zero_hex(G) + "00"
#==SPACE==#

        let result = Number(color_string)
#==SPACE==#

        return result
    }
#==SPACE==#

    format2leading_zero_hex = (value) => {
        let res = Math.round(value).toString(16)
        if (res.length === 1) {
            res = "0" + res
        }
        return res
#==SPACE==#

    }
#==SPACE==#

    render() {
        let objects = []
        for (let sp_name in ship_parts_render_params) {
            objects.push(<ShipsPartMesh part_name={sp_name}
                onClick={(e) => { this.proceed_system_selection(sp_name + "_sm") }}
                color={this.get_hp_color(sp_name + "_sm")}
            ></ShipsPartMesh>)
        }
#==SPACE==#

        if (this.props.selected_sm) {
            objects.push(<ShipsPartMesh part_name={this.props.selected_sm.split('_')[0]}
                selected={true}
                onClick={(e) => { }}
            //color = {0x00ffff}
            ></ShipsPartMesh>)
        }
#==SPACE==#

#==SPACE==#

        return (<div className='ShipOvervieweWidget'>
#==SPACE==#

            <div className="ShipSection">
                <Canvas
                    id={"ShipCanvas"}
                    //resize = {{ scroll: true, debounce: { scroll: 50, resize: 0 } }}
                    orthographic={true}
#==SPACE==#

                    style={{
                        'width': "300px",
                        'height': "200px",
                        'border': 'solid',
                        'background': 'black'
                    }}
#==SPACE==#

                >
                    <ambientLight />
                    {objects}
#==SPACE==#

#==SPACE==#

                </Canvas>
            </div >
        </div>)
    }
}
#==SPACE==#

#==SPACE==#

const ship_scaling_factor = 0.25
const ship_offsetX_factor = -40
#==SPACE==#

const ship_parts_render_params = {
    'hull': {
        "pos": [0, 0, 0],
        "size": [530, 303, 1]
    },
#==SPACE==#

    'cone': {
        "pos": [112, 0, 0],
        "size": [341, 266, 1]
    },
    'radar': {
        "pos": [8, 55, 0],
        "size": [231, 118, 1]
    },
    'launcher': {
        "pos": [20, -55, 0],
        "size": [322, 114, 1]
    },
    'engine': {
        "pos": [-65, 0, 0],
        "size": [239, 246, 1]
    },
    'energy': {
        "pos": [5, 0, 0],
        "size": [208, 208, 1]
    },
    'resources'
        : {
        "pos": [77, 0, 0],
        "size": [250, 171, 1]
    },
}
#==SPACE==#

#==SPACE==#

export function ShipsPartMesh(props) {
#==SPACE==#

    let texture_name = 'ship/' + props.part_name + '.png'
    if (props.selected) texture_name = 'ship/' + props.part_name + '_selected.png'
    const texture = useLoader(TextureLoader, texture_name)
#==SPACE==#

#==SPACE==#

    //const texture = useLoader(TextureLoader, 'markers/crosschair.png')
    const meshRef = useRef()
    let geometry = [ship_parts_render_params[props.part_name]["size"][0], ship_parts_render_params[props.part_name]["size"][1], ship_parts_render_params[props.part_name]["size"][2]]
#==SPACE==#

    geometry[0] = geometry[0] * ship_scaling_factor
    geometry[1] = geometry[1] * ship_scaling_factor
#==SPACE==#

    let position = [ship_parts_render_params[props.part_name]["pos"][0], ship_parts_render_params[props.part_name]["pos"][1], ship_parts_render_params[props.part_name]["pos"][2]]
    position[0] = position[0] + ship_offsetX_factor
#==SPACE==#

    // Subscribe this component to the render-loop, rotate the mesh every frame
#==SPACE==#

    return (
        <mesh
            {...props}
            ref={meshRef}
            position={position}
            onClick={(event) => (props.onClick())}
        >
            <boxGeometry args={geometry} />
            <meshStandardMaterial map={texture} color={props.color ? props.color : 0xffffff} transparent={true} />
        </mesh>
    )
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class SystemOvervieweWidget extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
#==SPACE==#

        }
    }
    componentDidMount() {
        let timer_id = timerscounter.get(this.constructor.name)
        if (!timer_id) {
            clearInterval(timer_id)
        }
        timer_id = setInterval(this.proceed_data_message, 30)
        timerscounter.add(this.constructor.name, timer_id)
    }
#==SPACE==#

    componentWillUnmount() {
        let timer_id = timerscounter.get(this.constructor.name)
        clearInterval(timer_id)
    }
#==SPACE==#

    proceed_data_message = () => {
        if (!this.props.sm_name) return
        let sm_name = this.props.sm_name
        let damage_sm = get_system_state("damage_sm")
        if (!damage_sm) return
        let crew_sm = get_system_state("crew_sm")
        let sm_info = get_system_state(sm_name)
        let current_hp = damage_sm.systems_hp[sm_name].current_hp
        let max_hp = damage_sm.systems_hp[sm_name].max_hp
        let current_team = crew_sm.systems[sm_name]
        let upgrade_level = sm_info.upgrade_level
#==SPACE==#

#==SPACE==#

#==SPACE==#

        let upgrade_sm = get_system_state("RnD_sm")
        let upgrade_cost = upgrade_sm.systems_upgrades[sm_name]["cost"][upgrade_level]
        let teams = crew_sm.teams
#==SPACE==#

        this.setState({
            "sm_name": sm_name,
            "mark_id": damage_sm.mark_id,
            "current_hp": current_hp.toFixed(1),
            "max_hp": max_hp,
            "current_team": current_team,
            "upgrade_level": upgrade_level,
            "upgrade_cost": upgrade_cost,
            "teams": teams
        })
    }
#==SPACE==#

#==SPACE==#

    on_assign_team = (team_name) => {
#==SPACE==#

        send_command("ship.crew_sm", this.state.mark_id, "assign_team", { "team_name": team_name, "sm_name": this.state.sm_name })
    }
#==SPACE==#

    get_team_assigner = () => {
        let result = []
        if (this.state.current_team) {
            result = [<button onClick={(e) => { this.on_assign_team("") }}>{get_locales("Release_team")}</button>]
        }
        else {
            for (let team_name in this.state.teams) {
                result.push(<button onClick={(e) => { this.on_assign_team(team_name) }}>{get_locales(team_name)}</button>)
            }
        }
#==SPACE==#

#==SPACE==#

        return <div className='teamAssignBtnBlock'>{result}</div>
    }
#==SPACE==#

#==SPACE==#

    on_system_upgrade = (e) => {
        send_command("ship.RnD_sm", this.state.mark_id, "upgrade_system", { "system": this.state.sm_name })
    }
#==SPACE==#

    render() {
        //if (!this.state.current_hp === undefined) return (<div></div>)
#==SPACE==#

#==SPACE==#

#==SPACE==#

        return (<div className='SystemOvervieweWidget'>
            <b>{get_locales(this.props.sm_name)}</b>
            <label>{get_locales("hp")}: {this.state.current_hp}/{this.state.max_hp}</label>
            <label>{get_locales("upgrade_level")}: {this.state.upgrade_level}</label>
#==SPACE==#

            {["admin", "captain"].includes(this.props.role) ?
                <button disabled={!this.state.upgrade_cost} onClick={this.on_system_upgrade}>{get_locales("upgrade")}{this.state.upgrade_cost ? '[' + this.state.upgrade_cost.toString() + "]" : ""}</button> :
                <span></span>
#==SPACE==#

            }
#==SPACE==#

            {["admin", "engineer"].includes(this.props.role) ?
#==SPACE==#

                <div className='teamAssignController'>
                    <label>{get_locales("assign_team")}:</label>
                    {this.get_team_assigner()}
                </div> :
                <span></span>}
#==SPACE==#

#==SPACE==#

            {this.state.current_team ?
                <RepairTeamWidget
                    mode='engineer'
                    mark_id={this.state.mark_id}
                    team_data={this.state.teams[this.state.current_team]}
                ></RepairTeamWidget> :
                <span></span>}
#==SPACE==#

        </div>)
    }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\src\modules\widgets\ShipsDisplay.js
#==SPACE==#

import React from 'react'
import { get_navdata, get_solarflare, get_ships_state, get_stations_state, send_command } from '../network/connections';
#==SPACE==#

import { Canvas } from '@react-three/fiber'
#==SPACE==#

import { entityRenderer } from '../renderers/EntityRenderer';
import { entityRendererCursor } from '../renderers/CursorRenderer';
import { timerscounter } from '../utils/updatetimers';
import { radarRenderer } from '../renderers/RadarRenderer';
import { get_locales } from '../locales/locales';
#==SPACE==#

import { set_global_observer_pos } from './AdminRadar';
#==SPACE==#

export class ShipsDisplay extends React.Component {
  constructor(props) {
    super(props);
#==SPACE==#

#==SPACE==#

    this.state = {
      data: {}
    }
  }
#==SPACE==#

  componentDidMount() {
    let timer_id = timerscounter.get(this.constructor.name)
    if (!timer_id) {
      clearInterval(timer_id)
    }
    timer_id = setInterval(this.proceed_data_message, 30)
    timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

  componentWillUnmount() {
    let timer_id = timerscounter.get(this.constructor.name)
    clearInterval(timer_id)
  }
#==SPACE==#

  proceed_data_message = () => {
    let data = get_ships_state()
    this.setState({ "data": data })
  }
#==SPACE==#

#==SPACE==#

  get_shipCards_block = () => {
    let result = []
    for (let mark_id in this.state.data) {
      result.push(
        <ShipCard
          on_module_selection={this.props.on_module_selection}
          mark_id={mark_id}
          data={this.state.data[mark_id]}
        ></ShipCard>
      )
    }
    return result
  }
#==SPACE==#

#==SPACE==#

  render() {
#==SPACE==#

    let ships_card = this.get_shipCards_block()
    return (<div className='ShipsDisplay'>
      {ships_card}
    </div>)
  }
}
#==SPACE==#

class ShipCard extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      "command": ""
    }
  }
  get_RnD_block = () => {
    let result = []
    for (let system_name in this.props.data["RnD"]) {
      result.push(<label>{system_name}:{this.props.data["RnD"][system_name]}</label>)
    }
    return (
      <div>
        {result}
      </div>
    )
  }
#==SPACE==#

  take_control = (key) => {
    send_command("connection", key, "take_control_on_entity", { 'target_id': key })
    //this.props.on_ship_selected(key)
    if (key) this.props.on_module_selection("NPC_pilot")
  }
#==SPACE==#

  move_view = (key) =>{
    set_global_observer_pos(this.props.data["pos"])
  }
#==SPACE==#

  get_HP_block = () => {
    return (
      <div>
        hp:{this.props.data["hp"]}
      </div>
    )
  }
#==SPACE==#

  render() {
    return (
      <div className='ShipCard'>
        <b>{this.props.mark_id}</b>
        {this.get_HP_block()}
        {this.get_RnD_block()}
        <button onClick={(e) => { this.take_control(this.props.mark_id) }}>take control</button>
        <button onClick={(e) => { this.move_view(this.props.mark_id) }}>move view</button>
      </div>
    )
  }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class StationsDisplay extends React.Component {
  constructor(props) {
    super(props);
#==SPACE==#

#==SPACE==#

    this.state = {
      data: {}
    }
  }
#==SPACE==#

  componentDidMount() {
    let timer_id = timerscounter.get(this.constructor.name)
    if (!timer_id) {
      clearInterval(timer_id)
    }
    timer_id = setInterval(this.proceed_data_message, 30)
    timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

  componentWillUnmount() {
    let timer_id = timerscounter.get(this.constructor.name)
    clearInterval(timer_id)
  }
#==SPACE==#

  proceed_data_message = () => {
    let data = get_stations_state()
    this.setState({ "data": data })
  }
#==SPACE==#

#==SPACE==#

  get_shipCards_block = () => {
    let result = []
    for (let mark_id in this.state.data) {
      result.push(
        <StationCard
          mark_id={mark_id}
          data={this.state.data[mark_id]}
        ></StationCard>
      )
    }
    return result
  }
#==SPACE==#

#==SPACE==#

  render() {
#==SPACE==#

    let ships_card = this.get_shipCards_block()
    return (<div className='ShipsDisplay'>
      {ships_card}
    </div>)
  }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

class StationCard extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      "command": ""
    }
  }
  get_RnD_block = () => {
    let result = []
    for (let system_name in this.props.data["RnD"]) {
      result.push(<label>{system_name}:{this.props.data["RnD"][system_name]}</label>)
    }
    return (
      <div>
        {result}
      </div>
    )
  }
#==SPACE==#

  activate_defence = () =>{
    send_command("station_controller", this.props.mark_id, "activate_station_defence", {"target":this.props.mark_id}, true)
  }
#==SPACE==#

#==SPACE==#
   
  destroy = () =>{
    send_command("station_controller", this.props.mark_id, "destroy_station", {"target":this.props.mark_id}, true)
  }
#==SPACE==#

#==SPACE==#

  get_stats_block = () => {
    return (
      <div style={{
        "display":"flex",
        "flex-direction":"column"
      }}>
        <label>hp: {this.props.data["hp"]}</label>
        <label>pos: {this.props.data["pos"][0]}, {this.props.data["pos"][1]}</label>
      </div>
    )
  }
#==SPACE==#

  render() {
    return (
      <div className='ShipCard'>
        <b>{this.props.mark_id}</b>
        {this.get_stats_block()}
        <button onClick={(e)=>{this.activate_defence()}}>activate defence</button>
        <button onClick={(e)=>{this.destroy()}}>destroy</button>
      </div>
    )
  }
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\src\modules\widgets\ShipsStateWidget.js
import React from 'react'
import { get_ships_state, send_command } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

export class ShipsStateWidget extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

  this.state = {
   data: {},
   hided: false,
   ships_state: {}
  }
 }
#==SPACE==#

 componentDidMount() {
  this.take_control(null)
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 take_control = (key) => {
  send_command("connection", key, "take_control_on_entity", { 'target_id': key })
  this.props.on_ship_selected(key)
  if (key) this.props.on_module_selection("pilot")
 }
#==SPACE==#

 proceed_data_message = () => {
  this.setState({ "ships_state": get_ships_state() })
 }
#==SPACE==#

 get_ship_widget = (key, descr) => {
  let result = [<button onClick={(e) => { this.take_control(key) }}><b>{key}</b></button>]
  for (let k in descr) {
   result.push(
    <label>{k}: {descr[k]}</label>
   )
  }
  return <div className='AdminShipStateWidget'>{result}</div>
 }
#==SPACE==#

 get_ship_widgets_list = () => {
  let result = []
  for (let k in this.state.ships_state) {
   result.push(
    this.get_ship_widget(k, this.state.ships_state[k])
   )
  }
  return <div className='ShipsSection'>{result}</div>
 }
#==SPACE==#

 render() {
#==SPACE==#

#==SPACE==#

#==SPACE==#

  return (
   <div className='ShipStateViewer'>
    <label onClick={() => { this.setState({ hided: !this.state.hided }); }}><b>SHIPS STATE</b></label>
    {this.get_ship_widgets_list()}
   </div>
  )
 }
#==SPACE==#

}

###===###.\front01\src\modules\widgets\SystemsStateWidget.js
import React from 'react'
import {get_server_systems_state } from '../network/connections';
import { timerscounter } from '../utils/updatetimers';
import { get_locales } from '../locales/locales';
#==SPACE==#

#==SPACE==#

export class SystemStateViewer extends React.Component {
 constructor(props) {
  super(props);
#==SPACE==#

#==SPACE==#

  this.state = {
   data: {},
   hided: false,
   system_state: {}
  }
 }
#==SPACE==#

 componentDidMount() {
  let timer_id = timerscounter.get(this.constructor.name)
  if (!timer_id) {
   clearInterval(timer_id)
  }
  timer_id = setInterval(this.proceed_data_message, 30)
  timerscounter.add(this.constructor.name, timer_id)
  }
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 componentWillUnmount() {
  let timer_id = timerscounter.get(this.constructor.name)
  clearInterval(timer_id)
 }
#==SPACE==#

 proceed_data_message = () => {
  this.setState({ "system_state": get_server_systems_state() })
 }
 render() {
#==SPACE==#

#==SPACE==#

#==SPACE==#
   
  let states = []
  for (let k in this.state.system_state) {
   states.push(<label> {k}: {this.state.system_state[k]}</label>)
#==SPACE==#

  }
#==SPACE==#

  return (
   <div className='AdminSystemViewer'>
    <label onClick={() => { this.setState({ hided: !this.state.hided }); }}><b>{get_locales("SYSTEM STATE")}</b></label>
    {states}
   </div>
  )
 }
#==SPACE==#

}

###===###.\front01\src\index.css

###===###.\front01\src\styles\Administration.css
.Administration {
 display: flex;
 flex-direction: column;
 border: solid 1px;
 width: 100%;
 padding-left: 20px;
 padding-right: 20px;
 height: 95vh;
}
#==SPACE==#

.SystemsSection {
 display: flex;
 flex-direction: column;
 width: 100%;
}
#==SPACE==#

.SystemsSectionPart{
 width: 50%;
}
#==SPACE==#

.AdminControlPanel{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 margin-bottom: 5px;
}
#==SPACE==#

.solarFlare_control{
  display: flex;
  flex-direction: row;
}
#==SPACE==#

.solarFlare_control *{
 margin-right: 10px;
}
#==SPACE==#

.solarFlare_control button{
 width: 150px;
 height: 40px;
}

###===###.\front01\src\styles\AdminSystemViewer.css
.AdminSystemViewer{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 margin: 5px;
 height: 300px;
 overflow: scroll
}
#==SPACE==#

.AdminShipStateWidget{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 margin: 5px;
}
#==SPACE==#

.ShipStateViewer{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 margin: 5px;
 height: 300px;
 overflow: scroll;
 width: fit-content
}
#==SPACE==#

.ShipsSection{
#==SPACE==#

 height: 75vh;
 }
#==SPACE==#

.AdminShipStateWidget>button{
 width: fit-content
}
#==SPACE==#

.SystemsSectionLevel{
 display: flex;
 flex-direction: row;
}

###===###.\front01\src\styles\App.css
#==SPACE==#

html{
 width: 100%;
 height: 100%;
 box-sizing: border-box;
}
*, *:before, *:after {
 box-sizing: inherit;
}
body{
 width: 100%;
 height: 100%;
 margin: 0px;
}
#==SPACE==#

.App{
 display: flex;
 flex-direction: column;
 width: 100%;
 height: 100%;
 padding: 5px;
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
#==SPACE==#

.Navigation{
 display: flex;
 flex-direction: row;
 padding: 10px;
 border: 1px solid black;
 margin-bottom: 10px;
}
#==SPACE==#

.Navigation_item{
 cursor: pointer;
 margin-left: 10px;
 margin-right: 10px;
}
#==SPACE==#

.Navigation_item:hover {
 color: red;
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

.LoginWindow{
 display: flex;
#==SPACE==#

 width: 100%;
 flex-direction: column;
 align-items: center;
}
#==SPACE==#

.LoginWindow>label{
 margin-top: 10px;
}
#==SPACE==#

.LoginWindow>button{
 margin-top: 10px;
}
#==SPACE==#

#==SPACE==#

table td{
 text-align: center
}
#==SPACE==#

table{
 border: 1px solid black;
}

###===###.\front01\src\styles\basic.css
button{
 width: 100px;
 margin: 1px;
}
#==SPACE==#

.div_vertical{
 display: flex;
 flex-direction: column;
}
#==SPACE==#

.NumericControlWidjet{
 display: flex;
 flex-direction: row;
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

.AccelerationController{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 padding: 5px;
 width: fit-content;
}
.AccelerationController span{
 display: flex;
 flex-direction: row;
 justify-content:end
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

.AccelerationHeatbar progress{
 background-color: rgb(255, 255, 255);
}
#==SPACE==#

.AccelerationHeatbar progress::-webkit-progress-bar {
 background-color: #5a8fc489;
}
#==SPACE==#

.AccelerationHeatbar progress::-webkit-progress-value {
 background-color: #d72717;
}
#==SPACE==#

#==SPACE==#


###===###.\front01\src\styles\CommandEditorWidget.css
.CommandEditorWidget{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 padding: 5px;
}
#==SPACE==#

.commandEditorUnit{
 display: flex;
 flex-direction: row;
}
#==SPACE==#

.commandParamsSection{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 padding: 5px;
}
.commandParamsOption{
 display: flex;
 flex-direction: row;
}
#==SPACE==#

.commandParamsOption>label{
 margin-right: 5px;
}

###===###.\front01\src\styles\common.css
.labeled_progress_bar{
 display: flex;
 flex-direction: row;
 height: fit-content;
 min-width: 100%;
 margin-bottom: 5px;
 padding-left: 5px;
 padding-right: 5px;
 padding-top: 2px;
 padding-bottom: 2px;
 border: 1px solid black;
 align-items: center;
}
#==SPACE==#

.labeled_progress_bar>label{
 margin-right: 5px;
}
#==SPACE==#

#==SPACE==#

.back_green{
 background-color: green;
 color: white
}
.back_red{
 background-color: red;
 color: white
}

###===###.\front01\src\styles\ConfigEditor.css
.ConfigEditor{
 display: flex;
 flex-direction: row;
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
#==SPACE==#

.configContent{
 display: grid;
 grid-template-columns: 50% 50%;
#==SPACE==#

}
#==SPACE==#

#==SPACE==#

#==SPACE==#

.configSection{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 padding: 5px;
 width: 100%
}

###===###.\front01\src\styles\CrewControlWidget.css
.RepairTeamWidget img{
 height: 60px;
 width: 60px;
 border: 1px solid black;
 margin-right: 10px;
}
#==SPACE==#

.RepairTeamWidget{
 display: flex;
 flex-direction: row;
}
.RepairTeamWidget button{
 height: 25px;
 width: 25px;
}
#==SPACE==#

.RepairTeamWidget_data{
 display: flex;
 flex-direction: column;
}

###===###.\front01\src\styles\EngineerControllerWidget.css
#==SPACE==#

.EngineerControllerWidget{
 display: flex;
 flex-direction: column;
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
#==SPACE==#

.OverviewWidget{
 display: flex;
 flex-direction: row;
}
.SystemOvervieweWidget{
 display: flex;
 flex-direction: column;
}
#==SPACE==#

.teamAssignController{
 display: flex;
 flex-direction: column;
}
.teamAssignBtnBlock{
 display: grid;
 grid-template-columns: 25% 25% 25% 25%
}
#==SPACE==#

.ShipOvervieweWidget{
 margin-right: 10px;
}
#==SPACE==#

.EngineerSystemsLayer{
 display: grid;
 grid-template-columns: 50% 50%;
 border: 1px solid black;
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}

###===###.\front01\src\styles\InteractionControlWidget.css

###===###.\front01\src\styles\MapEditor.css
.BodiesSelector{
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 display: flex;
 flex-direction: column;
 width: 100%;
}
#==SPACE==#

.BodiesSelector_section{
 display: grid;
#==SPACE==#

 overflow: scroll;
 height: 200px;
#==SPACE==#

}
#==SPACE==#

.BodyEditor{
 display: flex;
 flex-direction: row;
 width: 100%;
}
#==SPACE==#

.FileLoader{
 display: flex;
 flex-direction: column;
 align-items: center;
 border: 1px solid black;
 width: 150px;
}
#==SPACE==#

.FileLoader button{
 width: 100%;
}
#==SPACE==#

.FileLoader input{
 width: 100%;
}
#==SPACE==#

.FileLoader .map_selector{
 display: flex;
 flex-direction: column;
 height: 500px;
 overflow: scroll;
 overflow-x: hidden;
 width: 150px;
}
#==SPACE==#

.map_selector .selected{
 text-decoration: underline;
}
#==SPACE==#

.map_selector label{
 text-overflow: ellipsis;
 white-space:nowrap;
 width: 100%
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

.FileLoader .map_selector label:hover{
 color: red
}
#==SPACE==#

.BodiesInteractorSection{
 width: 100%;
 border: 1px solid red;
}
#==SPACE==#

.bodySelectorWidget{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 padding: 5px;
 width: fit-content;
 height: fit-content;
}

###===###.\front01\src\styles\MedicStation.css

###===###.\front01\src\styles\NumericControlWidget.css
.NumericStepControlWidjet{
 display: flex;
 flex-direction: row;
 align-items: center;
}
#==SPACE==#

.NumericStepControlWidjet>button{
 width: 35px;
 height: 35px;
}
#==SPACE==#

.NumericStepControlWidjet>input{
 width: 80px;
#==SPACE==#

}
#==SPACE==#

.NumericStepControlWidjet>.value_label{
 width: 60px;
}

###===###.\front01\src\styles\PilotStation.css
#==SPACE==#

.PilotStation{
 display: flex;
 flex-direction: row;
 width: 100%;
 height: calc(100% - 50px);
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
#==SPACE==#

.PilotStationControlSection{
 display: flex;
 flex-direction: column;
 margin-left: 10px;
 padding: 5px;
 border: 1px solid black;
 width: 100%;
 height: 100%;
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
#==SPACE==#

.SystemsLayer{
 display: grid;
 grid-template-columns: 50% 50%;
 width: 100%;
 height: 100%;
 border: 1px solid black;
 margin-bottom: 5px;
 padding: 5px;
 overflow: scroll;
}
#==SPACE==#

.SystemsLayerShort{
 height: 40% !important; 
}
#==SPACE==#

.SystemControlWidget{
 display: flex;
 flex-direction: column;
 overflow: scroll;
 border: 1px solid black
}
#==SPACE==#

.SystemsLayer .SystemControlWidget{
 height: 200px;
}
#==SPACE==#

.ControlLayer{
 display: flex;
 flex-direction: column;
#==SPACE==#

}
#==SPACE==#

.Stockpile{
 display: flex;
 flex-direction: column;
 border: 1px solid black;
 margin-bottom: 5px;
 padding: 5px;
}
#==SPACE==#

.Stockpile>label>button{
 width: fit-content;
}
#==SPACE==#

.engineControlSection{
 display: flex;
 flex-direction: row;
}
#==SPACE==#

#==SPACE==#

.PlayersRadar{
 display: flex;
 flex-direction: row;
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 border: solid 1px;
}
#==SPACE==#

.PlayersRadar>.radarSection{
 display: flex;
 flex-direction: column;
 align-items: center;
 background-color: black;
}
#==SPACE==#

.PlayersRadar>.detectedShips{
 display: flex;
 flex-direction: column;
 width:60px;
}
#==SPACE==#

.PlayersRadar>.detectedShips label:hover{
 color: red
}
#==SPACE==#

.is_taking_damage_class{
 border: 10px solid red;
}
#==SPACE==#

#==SPACE==#

#==SPACE==#

.modal_page {
 display: flex;
 flex-direction: column;
 position: fixed;
 width: 100%;
 height: 100%;
 top: 0%;
 left: 0%;
 justify-content: center;
 align-items: center;
}
#==SPACE==#

.modalcontent {
 width: 800px;
 height: fit-content;
 background: #F5F5F5;
 border: 1px solid #95B4A9;
 padding: 30px;
}
#==SPACE==#

.ModalInfo{
 display: flex;
 flex-direction: column;
}
#==SPACE==#

#==SPACE==#

.PilotStation_light_MP_fatigue *{
 opacity: 0.9;
}
#==SPACE==#

.PilotStation_hard_MP_fatigue *{
 opacity: .8;
 border: grey
}
#==SPACE==#

.PilotStation_crit_MP_fatigue *{
 opacity: 0.7;
 border: white
}
#==SPACE==#

.CommonRadarStation{
    display: flex;
    flex-direction: row;
    background-color: black;
    justify-content: center;
    height: 100%;
}
###===###.\front01\src\styles\ProductionSM.css
.ProductionSM .items_section{
 display: grid;
 grid-template-columns: 50% 50%;
}
#==SPACE==#

.ProductionSM .StockpileRaw{
 display: flex;
 flex-direction: row;
 justify-content: space-around;
 border: 1px solid black;
 margin-bottom: 2px;
}
#==SPACE==#

.ProductionSM .StockpileItems, .ProductionSM .ProductionQueueSection{
 border: 1px solid black;
 display: flex;
 flex-direction: column;
 height: 160px;
}
#==SPACE==#

.ProductionSM .StockpileItems{
 overflow: scroll;
}
#==SPACE==#

.ProductionSM .StockpileItems button{
 width: 70%
}
#==SPACE==#

.ProductionQueueSection{
 display: flex;
 flex-direction: column;
}
#==SPACE==#

.ProductionQueueSection>button{
 width:95%;
}
#==SPACE==#

#==SPACE==#

.ProductionQueueSection .productionQueue{
 display: flex;
 flex-direction: column;
 overflow: scroll;
 height: 100%;
}
#==SPACE==#

.ProductionQueueSection .productionQueue button{
 width:95%;
}

###===###.\front01\src\styles\ProjectileBuilderWidget.css
.ProjectileBuilderWidget{
 display: flex;
 flex-direction: row;
 height: 250px;
 width: 100%;
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
.ProjectileBuilderWidget .components_selector{
 width: 50%
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
}
#==SPACE==#

.ProjectileBuilderWidget .components_selector .component_controller{
 display: flex;
 flex-direction: row;
 width: 100%;
 border: 1px solid black;
 height: 30px;
 align-items: center;
 justify-content: end;
}
#==SPACE==#

.ProjectileBuilderWidget .components_selector .component_controller button{
 height: 25px;
 width: 25px;
}
#==SPACE==#

.DesignSection{
 display: flex;
 flex-direction: row;
 width: 100%;
}

###===###.\front01\src\styles\QuestPointsController.css

###===###.\front01\src\styles\RadarControlWidget.css
.RadarStatsWidget {
    display: flex;
    flex-direction: column;
}
#==SPACE==#

#==SPACE==#

.RadarShipInfoLayer {
    display: flex;
    flex-direction: row;
    background-color: black;
}
#==SPACE==#

.ShipNavigationInfo{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border: 1px solid green;
    color: grey;
    margin: 5px;
    padding: 10px;
}
#==SPACE==#

.radarSection->.Canvas{
    border: 1px solid green;
}
#==SPACE==#

.ShipSection{
    border: 1px solid green;
    margin: 5px;
}
###===###.\front01\src\styles\ResourceWIdget.css

###===###.\front01\src\styles\RndControlWidget.css
.systemUpgradeUnit button{
 height: 30px;
 width: 30px;
}

###===###.\front01\src\styles\ShaftsControlWidget.css
#==SPACE==#

.LauncherController{
 display: flex;
 flex-direction: column;
 border: solid 1px;
 width: 100%;
 padding-left: 20px;
 padding-right: 20px;
 padding-bottom: 10px;
 height: 360px;
 }
#==SPACE==#

 .LauncherShaftController{
 padding: 5px;
 display: flex;
 flex-direction: column;
 border: solid 1px;
 width: 100%;
 height: 165px;
 align-items: flex-start;
 }
#==SPACE==#

 .LauncherShaftController>button{
 width: 100%;
 height: 30px;
 }
#==SPACE==#

 .shaftsSection{
 display: grid;
 grid-template-columns: 33% 33% 34%;
 width: 100%;
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 }
#==SPACE==#

 .LauncherShaftController_selected{
 outline: 4px solid red;
 }
#==SPACE==#

 .projectile_param_widget{
 width: 150px;
 }
#==SPACE==#

 .LauncherShaftController select{
 width: 100%;
 }
#==SPACE==#

 .LauncherShaftController_shaft_progress{
 display: flex;
 flex-direction: row;
 height: fit-content;
 margin-top: 5px;
 margin-bottom: 5px;
 padding-top: 2px;
 padding-bottom: 2px;
 }
#==SPACE==#

#==SPACE==#

 .LauncherShaftController_shaft_progress {
 width: 100%;
 }
#==SPACE==#

 .LauncherShaftController_shaft_progress progress{
 width: 100%;
 }
#==SPACE==#

 .LauncherShaftController_shaft_progress_ready{
 background-color: green;
 }
#==SPACE==#

 .LauncherShaftController_shaft_progress_in_progres{
 background-color: orange;
#==SPACE==#

 }

###===###.\front01\src\styles\ShipsDisplay.css
.ShipsDisplay{
  display: flex;
  flex-direction: row;
}
#==SPACE==#

.ShipCard{
  display: flex;
  flex-direction: column;
  border: 1px solid black;
  margin-right: 5px;
  padding: 5px;
}
#==SPACE==#

#==SPACE==#

.ShipCard div{
  display: flex;
  flex-direction: column;
}

###===###.\front01\src\styles\Widgets.css
#==SPACE==#

.AccelerationController_btnblock{
 display: grid;
 grid-template-columns: 50px 50px 50px;
 margin-bottom: 10px;
}
#==SPACE==#

#==SPACE==#

.AccelerationController_btnblock>button{
 width: 40px;
 height: 40px;
}
#==SPACE==#

#==SPACE==#

.WASD_btnblock{
 display: grid;
 grid-template-columns: 50px 50px 50px;
 margin-bottom: 10px;
}
#==SPACE==#

.WASD_btnblock>button{
 width: 40px;
 height: 40px;
}

###===###.\back01\modules\templates\index.html
<div>
  helloworld
</div>

###===###.\back01\modules\templates\medic.html
<html>
#==SPACE==#

<head>
#==SPACE==#

</head>
#==SPACE==#

<body>
  <div>
    <label>hospital: {{hospital.units}}/{{hospital.capacity}}</label>
  </div>
  {% for role, state in roles.items() %}
  <div style="display: flex; flex-direction: column;">
    <label><b>{{role}}</b></label>
    <label>HP: {{state.HP}}</label>
    <label>MP: {{state.MP}}</label>
    <label>Можно лечить: {{state.can_be_cured}}</label>
    <p></p>
  </div>
#==SPACE==#

#==SPACE==#
   
  {% endfor %}
</body>
#==SPACE==#

</html>

###===###.\front01\public\index.html
<!DOCTYPE html>
<html lang="en">
 <head>
 <meta charset="utf-8" />
 <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
 <meta name="viewport" content="width=device-width, initial-scale=1" />
 <meta name="theme-color" content="#000000" />
 <meta
  name="description"
  content="Web site created using create-react-app"
 />
 <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
 <!--
  manifest.json provides metadata used when your web app is installed on a
  user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
 -->
 <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
 <!--
  Notice the use of %PUBLIC_URL% in the tags above.
  It will be replaced with the URL of the `public` folder during the build.
  Only files inside the `public` folder can be referenced from the HTML.
#==SPACE==#

  Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
  work correctly both with client-side routing and a non-root public URL.
  Learn how to configure a non-root public URL by running `npm run build`.
 -->
 <title>React App</title>
 </head>
 <body id="root">
#==SPACE==#

#==SPACE==#

#==SPACE==#
  
 <!--
  This HTML file is a template.
  If you open it directly in the browser, you will see an empty page.
#==SPACE==#

  You can add webfonts, meta tags, or analytics to this file.
  The build step will place the bundled scripts into the <body> tag.
#==SPACE==#

  To begin the development, run `npm start` or `yarn start`.
  To create a production bundle, use `npm run build` or `yarn build`.
 -->
 </body>
</html>

###===###.\back01\configs\config.ini
[damage]
emp_damage = 1
emp_duration = 15
#==SPACE==#

#1.6 ~ 100/60 ~ - примерно сто хитов на за 1 минуту
energyoverlock_damage_per_sec = 0.2
#==SPACE==#

#explosive
#единичка урона в секунду за радиус,
#т.е. в эпицентре - 60 единиц за 2 секунды
explosion_damage_per_sec = 1
explosive_duration = 2
#==SPACE==#

#разовое столкновение
hbody_collision_damage = 15
#==SPACE==#

meteors_coud_damage_per_sec = 1.6
solarflare_damage_per_sec = 3.2
#==SPACE==#

[solar_flares]
activity_period_sec = 5
sleep_period_sec = 20
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#

[mines]
mine_type1_detection_radius = 40
mine_type1_explosion_radius = 30
#==SPACE==#

mine_type2_detection_radius = 100
mine_type2_explosion_radius = 40
mine_type2_detonation_radius = 20
mine_type2_ttl = 10
#==SPACE==#

#==SPACE==#

[materials_lodout]
metal = 10000
#==SPACE==#

[projectile_builder]
buster_acceleration = 30
exp_radius_step = 30
radius_step = 10
time_step = 10
#==SPACE==#

[projectile_builder_cost]
buster = 3
detonator = 1
emp = 1
entities_detection = 1
explosive = 3
inhibitor = 1
one_detail_time_production = 0.5
projectiles_detection = 1
thruster = 3
timer = 1
decoy = 3
#==SPACE==#

[projectile_builder_velpenalty]
busters = 0.19
detail_penalty = 0.01
sensors = 0.00
thrusters = 0.14
explosives = 0.04
#==SPACE==#

[projectile_cost]
hp_repairkit = 8.35
io_drone = 100
pjtl_hominglrmissile = 50
pjtl_mine = 30
pjtl_timedemp = 30
pjtl_timedexplosive = 25
pjtl_timedtorpedo = 50
pjtl_triggerexplosive = 10
#==SPACE==#

[projectile_loadout]
hp_repairkit = 50
io_drone = 100
pjtl_hominglrmissile = 200
pjtl_mine = 50
pjtl_timedemp = 50
pjtl_timedexplosive = 200
pjtl_timedtorpedo = 200
pjtl_triggerexplosive = 200
#==SPACE==#

[projectile_params]
pjtl_hominglrmissile_expactrad = 20
pjtl_hominglrmissile_exprad = 30
pjtl_hominglrmissile_guidance_acceleration = 40
pjtl_hominglrmissile_guidance_speed = 65
pjtl_hominglrmissile_targetdetectionrange = 100
pjtl_hominglrmissile_ttl = 10
pjtl_hominglrmissile_velpenalty = 0.2
pjtl_mine_exprad = 40
pjtl_mine_velpenalty = 0.2
pjtl_timedemp_exprad = 70
pjtl_timedexplosive_exprad = 50
pjtl_timedexplosive_velpenalty = 0.8
pjtl_timedtorpedo_exprad = 100
pjtl_timedtorpedo_velpenalty = 0.2
pjtl_triggerexplosive_exprad = 20
pjtl_triggerexplosive_ttl = 5
#==SPACE==#

[sm_RnD]
energy_sm = 3 4 200 300 400 500 
engine_sm = 3 3 200 300 400  
launcher_sm = 3 6 200 250 300 350 400 450
radar_sm = 3 4 200 300 400 500
resources_sm = 3 3 200 300 400
damage_sm = 1 3
#==SPACE==#

[sm_damage]
hp_repairkit_points = 10
#==SPACE==#

[sm_engine]
burning_period = 3
cooling_period = 15
reverse_penalty = 0.2
rotation360time_levels = 10 8 6 5 4
thrust_levels = 0.5 0.75 1.0 1.25 1.5
#==SPACE==#

[sm_crew]
crew_acceleration = 1
#==SPACE==#

[sm_launcher]
launch_speed = 20
reloading_period_sec = 10
#==SPACE==#

[sm_radar]
add_close_range_per_upgrade_level = 25
basic_close_range = 175
ping_time = 2
basic2distant_coef = 3
#==SPACE==#

[sm_resources]
production_period_sec = 10
capacity_levels = 500 1000 2500 5000
#==SPACE==#

[sm_med]
wound_disability_period = 10
cure_reabilitation_period_min = 15
unvulnerability_period_min = 15
capacity_levels = 3 5 10 15
plague_time_step_mins = 20
fatigue_phase_min = 15
fatigue_phase_degradation = 1
plague_phase_min = 20
plague_phase_degradation = 1
critical_state_duration_min = 20
crew_unit_healing_duration = 15
#==SPACE==#

[system]
http_port = 
ip = 0.0.0.0
ws_port = 5000
#==SPACE==#

[world]
critical_r_percentage = 0.25
#процент гравитационного колодца 
#после которого начинается линейное затухание гравитации
#нужен для гладкого перехода между разными астероидами без "скачков" траектории
gravity_well_linear_percentage = 0.8
gravity_constant = 1000
map_step = 300
mass_coeff = 0.05
mining_r_percentage = 0.3
predictor_timedelay = 1
#==SPACE==#

#==SPACE==#

#==SPACE==#

#==SPACE==#


###===###.\front01\public\picts.svg
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
#==SPACE==#

<svg
   width="210mm"
   height="297mm"
   viewBox="0 0 210 297"
   version="1.1"
   id="svg1"
   inkscape:version="1.3.2 (091e20e, 2023-11-25, custom)"
   sodipodi:docname="picts.svg"
   xml:space="preserve"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview
     id="namedview1"
     pagecolor="#000000"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#424242"
     inkscape:document-units="mm"
     showgrid="true"
     inkscape:zoom="0.5"
     inkscape:cx="904"
     inkscape:cy="1425"
     inkscape:window-width="2560"
     inkscape:window-height="1017"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1"
     showguides="false"><inkscape:grid
       id="grid1"
       units="mm"
       originx="0"
       originy="0"
       spacingx="0.5"
       spacingy="0.5"
       empcolor="#0099e5"
       empopacity="0.30196078"
       color="#0099e5"
       opacity="0.14901961"
       empspacing="5"
       dotted="false"
       gridanglex="30"
       gridanglez="30"
       visible="true" /></sodipodi:namedview><defs
     id="defs1"><marker
       style="overflow:visible"
       id="DartArrow"
       refX="0"
       refY="0"
       orient="auto-start-reverse"
       inkscape:stockid="Dart arrow"
       markerWidth="0.5"
       markerHeight="0.5"
       viewBox="0 0 1 1"
       inkscape:isstock="true"
       inkscape:collect="always"
       preserveAspectRatio="none"><path
         style="fill:context-stroke;fill-rule:evenodd;stroke:none"
         d="M 0,0 5,-5 -12.5,0 5,5 Z"
         transform="scale(-0.5)"
         id="path6" /></marker><linearGradient
       id="linearGradient14"
       inkscape:collect="always"><stop
         style="stop-color:#ffffff;stop-opacity:1;"
         offset="0"
         id="stop15" /><stop
         style="stop-color:#ffffff;stop-opacity:0;"
         offset="1"
         id="stop16" /></linearGradient><linearGradient
       id="linearGradient9"
       inkscape:collect="always"><stop
         style="stop-color:#ffffff;stop-opacity:0;"
         offset="0"
         id="stop9" /><stop
         style="stop-color:#ffffff;stop-opacity:0;"
         offset="1"
         id="stop10" /></linearGradient><linearGradient
       id="linearGradient17"
       inkscape:collect="always"><stop
         style="stop-color:#ffffff;stop-opacity:1;"
         offset="0"
         id="stop17" /><stop
         style="stop-color:#ffffff;stop-opacity:0;"
         offset="1"
         id="stop18" /></linearGradient><linearGradient
       id="linearGradient20"
       inkscape:label="123"><stop
         style="stop-color:#000000;stop-opacity:1;"
         offset="0"
         id="stop3" /><stop
         style="stop-color:#000000;stop-opacity:0;"
         offset="1"
         id="stop4" /></linearGradient><clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath33"><rect
         style="fill:#000000;stroke:none;stroke-width:0.999995;stroke-linecap:butt;stroke-linejoin:bevel;paint-order:stroke markers fill;stop-color:#000000"
         id="rect33"
         width="46.19186"
         height="80.006783"
         x="74.999985"
         y="399.99661" /></clipPath><radialGradient
       inkscape:collect="always"
       xlink:href="#linearGradient17"
       id="radialGradient18"
       cx="145"
       cy="230"
       fx="145"
       fy="230"
       r="55"
       gradientTransform="translate(0,1.595237e-5)"
       gradientUnits="userSpaceOnUse" /><linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient9"
       id="linearGradient10"
       x1="261.93628"
       y1="126.91434"
       x2="279.52511"
       y2="126.91434"
       gradientUnits="userSpaceOnUse" /><linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient14"
       id="linearGradient16"
       x1="261.93628"
       y1="126.91434"
       x2="279.52512"
       y2="126.91434"
       gradientUnits="userSpaceOnUse" /></defs><g
     inkscape:label="Слой 1"
     inkscape:groupmode="layer"
     id="layer1"><path
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.398;stroke-dasharray:none;stroke-opacity:1"
       d="m 70.35308,69.809825 c 0,0 0,0 27.31798,-49.793538 27.31798,49.793539 27.31798,49.793539 27.31798,49.793539 -54.989038,0.190172 -54.989038,0.190172 -54.989038,0.190172"
       id="path11" /><path
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.398;stroke-dasharray:none;stroke-opacity:1"
       d="m 97.671058,20.016287 c -27.671056,49.98371 -27.671056,49.98371 -27.671056,49.98371 v 0"
       id="path13" /><path
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.846407;stroke-dasharray:none;stroke-opacity:1"
       d="M 65.087693,140.95831 C 90.087691,95.958332 90.087691,95.958332 90.087691,95.958332 c -49.999998,0 -49.999998,0 -49.999998,0 25,44.999998 25,44.999998 25,44.999998"
       id="path15"
       inkscape:export-filename="markers\projectile.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><rect
       style="fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.098;stroke-dasharray:none;stroke-opacity:1"
       id="rect17"
       width="50.087692"
       height="50.205528"
       x="15"
       y="165"
       ry="14.999997"
       inkscape:export-filename="markers\interactable.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       style="fill:none;fill-opacity:0;stroke:#000000;stroke-width:3.607;stroke-dasharray:none;stroke-opacity:1;stroke-linecap:round"
       d="M 25.000001,204.33764 C 55.927223,175 55.927223,175 55.927223,175"
       id="path17-8" /><path
       style="fill:none;fill-opacity:0;stroke:#000000;stroke-width:3.607;stroke-dasharray:none;stroke-opacity:1;stroke-linecap:round"
       d="m 25.000001,175 c 30.927222,29.33764 30.927222,29.33764 30.927222,29.33764"
       id="path16" /><ellipse
       style="fill:url(#radialGradient18);fill-opacity:1;stroke:none;stroke-width:3.60701;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
       id="path17"
       cx="145"
       cy="230"
       rx="55"
       ry="54.999996"
       inkscape:export-filename="markers\explosion.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><rect
       style="fill:#ffffff;fill-opacity:0;stroke:#ffffff;stroke-width:1.165;stroke-dasharray:none;stroke-opacity:1"
       id="rect1"
       width="30.000002"
       height="30.000002"
       x="186.52547"
       y="-117.53043"
       transform="rotate(44.999982)"
       inkscape:export-filename="markers\radar\pole.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:3.175px;fill:none;fill-opacity:0;stroke:none;stroke-width:1;stroke-dasharray:none;stroke-opacity:1"
       x="295.00003"
       y="128.51366"
       id="text2"><tspan
         sodipodi:role="line"
         id="tspan2"
         style="fill:none;stroke:none;stroke-width:1"
         x="295.00003"
         y="128.51366">Aasdasdasd</tspan></text><text
       xml:space="preserve"
       style="font-size:25.1587px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:1.0293;stroke-dasharray:none;stroke-opacity:1"
       x="203.35013"
       y="79.874611"
       id="text3"
       transform="scale(1.0104113,0.98969596)"><tspan
         sodipodi:role="line"
         id="tspan3"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:1.0293;stroke-dasharray:none;stroke-opacity:1"
         x="203.35013"
         y="79.874611">N</tspan></text><rect
       style="fill:#ffffff;fill-opacity:0;stroke:#ffffff;stroke-width:1.165;stroke-dasharray:none;stroke-opacity:1"
       id="rect1-7"
       width="30.000002"
       height="30.000002"
       x="228.95189"
       y="-159.09895"
       transform="rotate(44.999982)"
       inkscape:export-filename="markers\radar\resource.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:25.1907px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:1.03061;stroke-dasharray:none;stroke-opacity:1"
       x="262.48865"
       y="79.9814"
       id="text3-5"
       transform="scale(1.0117706,0.98836635)"><tspan
         sodipodi:role="line"
         id="tspan3-1"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:1.03061;stroke-dasharray:none;stroke-opacity:1"
         x="262.48865"
         y="79.9814">R</tspan></text><rect
       style="fill:#ffffff;fill-opacity:0;stroke:#ffffff;stroke-width:1.165;stroke-dasharray:none;stroke-opacity:1"
       id="rect1-3"
       width="30.000002"
       height="30.000002"
       x="226.83147"
       y="-80.668137"
       transform="rotate(44.999982)"
       inkscape:export-filename="markers\radar\hbody.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:23.392px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:0.957019;stroke-dasharray:none;stroke-opacity:1"
       x="224.83382"
       y="125.0628"
       id="text3-56"
       transform="scale(0.93572092,1.0686947)"><tspan
         sodipodi:role="line"
         id="tspan3-0"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:0.957019;stroke-dasharray:none;stroke-opacity:1"
         x="224.83382"
         y="125.0628">B</tspan></text><rect
       style="fill:#ffffff;fill-opacity:0;stroke:#ffffff;stroke-width:1.165;stroke-dasharray:none;stroke-opacity:1"
       id="rect1-9"
       width="30.000002"
       height="30.000002"
       x="267.84274"
       y="-120.20807"
       transform="rotate(44.999982)"
       inkscape:export-filename="markers\radar\activity.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:25.1587px;fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:1.0293;stroke-dasharray:none;stroke-opacity:1"
       x="262.96689"
       y="136.06015"
       id="text3-0"
       transform="scale(1.0104113,0.98969597)"><tspan
         sodipodi:role="line"
         id="tspan3-7"
         style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:1.0293;stroke-dasharray:none;stroke-opacity:1"
         x="262.96689"
         y="136.06015">A</tspan></text><ellipse
       style="fill:none;stroke-width:1.765;stroke:#ffffff;stroke-opacity:1;stroke-dasharray:none"
       id="path1"
       cx="330"
       cy="219.99998"
       rx="40"
       ry="39.999996"
       inkscape:export-filename="markers\circle_bold.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><ellipse
       style="fill:#ffffff;fill-opacity:0;stroke:none;stroke-width:1.73052;stroke-dasharray:none;stroke-opacity:1"
       id="path1-6"
       cx="-60"
       cy="105.533"
       rx="38.971859"
       ry="39.466988"
       inkscape:export-filename="markers\direction.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       style="fill:#ffffff;fill-opacity:0.153527;stroke:#ffffff;stroke-width:3.50387;stroke-dasharray:none;stroke-opacity:1;marker-end:url(#DartArrow)"
       d="m -59.999998,105.533 c 0,-30.533002 0,-30.533002 0,-30.533002"
       id="path2" /><path
       d="m -315.13219,135.13697 c -8.23398,0 -14.86265,2.16929 -14.86265,4.86327 v 4.99298 a 69.607112,34.803832 0 0 1 34.79839,30.13924 69.607112,34.803832 0 0 1 -34.79839,30.13873 v 4.9935 c 0,2.69398 6.62867,4.86275 14.86265,4.86275 h 110.1323 c 8.23398,0 14.86266,-2.16877 14.86266,-4.86275 v -10.10792 h -10.00818 c -8.23541,0 -14.86576,-3.72206 -14.86576,-8.34522 v -33.33182 c 0,-4.62316 6.63035,-8.34522 14.86576,-8.34522 h 10.00818 v -10.13427 c 0,-2.69398 -6.62868,-4.86327 -14.86266,-4.86327 z m 59.96224,9.86658 a 30.169838,29.996605 0 0 1 30.16973,29.99662 30.169838,29.996605 0 0 1 -30.16973,29.99662 30.169838,29.996605 0 0 1 -30.16974,-29.99662 30.169838,29.996605 0 0 1 30.16974,-29.99662 z"
       style="fill:#ffffff;stroke:#ffffff;stroke-width:0.274414;fill-opacity:1"
       id="path14" /><rect
       style="fill:none;stroke:#ffffff;stroke-width:0.240457;stroke-opacity:1"
       id="rect7-9"
       width="59.874592"
       height="49.892059"
       x="290.12543"
       y="305"
       ry="8.3233948"
       rx="8.3716516" /><path
       d="m -185.00008,150.13451 h 30.00024 c 8.23542,0 14.86524,3.72206 14.86524,8.34522 v 33.33182 c 0,4.62316 -6.62982,8.34522 -14.86524,8.34522 h -30.00024 v 9.84333 h 33.11736 l 56.882834,-15.00012 v -34.99993 l -55.000264,-19.99981 h -34.99993 z"
       style="fill:#ffffff;stroke:#ffffff;stroke-width:0.264583;fill-opacity:1"
       id="path18" /><path
       d="m -225.02477,217.64394 h -59.83097 a 29.922199,29.922199 0 0 0 29.91549,29.85606 29.922199,29.922199 0 0 0 29.91548,-29.85606 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.287887"
       id="path12" /><path
       d="m -225.52775,131.59562 a 29.922199,29.922199 0 0 0 0.007,-0.0661 29.922199,29.922199 0 0 0 -29.9222,-29.92221 29.922199,29.922199 0 0 0 -29.92221,29.92221 29.922199,29.922199 0 0 0 0.007,0.0661 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:1.28049"
       id="path10" /><rect
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.285875;stroke-opacity:1"
       id="rect12"
       width="69.727783"
       height="10.071967"
       x="-269.72778"
       y="222.5" /><rect
       style="fill:#ffffff;stroke:#ffffff;stroke-width:0.274414;stroke-opacity:1;fill-opacity:1"
       id="rect2-3"
       width="139.85788"
       height="79.990158"
       x="-339.85788"
       y="-24.99016"
       ry="4.8627892"
       rx="14.862798" /><ellipse
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.241663;stroke-opacity:1"
       id="path3-3"
       cx="-255.05788"
       cy="174.94086"
       rx="27.434206"
       ry="27.438307" /><path
       d="m -360.73228,142.71428 v 64.83584 a 62.988531,32.418072 0 0 0 62.98874,-32.41761 62.988531,32.418072 0 0 0 -62.98874,-32.41823 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.360488"
       id="path5-8" /><rect
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.244318;stroke-opacity:1"
       id="rect7-8"
       width="68.535255"
       height="44.998028"
       x="-212.43719"
       y="152.50098"
       ry="7.5069337"
       rx="13.60648"
       inkscape:export-filename="ship\resources.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1"
       d="m -155,-4.9999999 35,10e-6 v 0 L -65.000004,15.00001 V 50 L -121.88271,65 H -155"
       id="path7-4"
       sodipodi:nodetypes="ccccccc" /><path
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1"
       d="m -188.64587,130.53513 c 0,-70.000001 0,-70.000001 0,-70.000001"
       id="path8-2" /><path
       d="m -234.94731,59.872626 h -59.83097 a 29.922199,29.922199 0 0 0 29.91549,29.85606 29.922199,29.922199 0 0 0 29.91548,-29.85606 z"
       style="fill:#ffffff;stroke:#ffffff;stroke-width:0.287887;fill-opacity:1"
       id="path12-1" /><rect
       style="fill:#ffffff;stroke:#ffffff;stroke-width:0.285875;stroke-opacity:1;fill-opacity:1"
       id="rect12-5"
       width="69.727783"
       height="10.071967"
       x="-279.59058"
       y="64.728683" /><path
       d="m -235.00701,-29.933899 a 29.922199,29.922199 0 0 0 0.007,-0.0661 29.922199,29.922199 0 0 0 -29.9222,-29.92221 29.922199,29.922199 0 0 0 -29.92221,29.92221 29.922199,29.922199 0 0 0 0.007,0.0661 z"
       style="fill:#ffffff;stroke:#ffffff;stroke-width:1.28049;fill-opacity:1"
       id="path10-7" /><path
       d="m -350.03634,300.07615 c -8.23398,0 -14.86265,2.16929 -14.86265,4.86327 v 4.99298 a 69.607112,34.803832 0 0 1 34.79839,30.13924 69.607112,34.803832 0 0 1 -34.79839,30.13873 v 4.9935 c 0,2.69398 6.62867,4.86275 14.86265,4.86275 h 110.1323 c 8.23398,0 14.86266,-2.16877 14.86266,-4.86275 v -10.10792 h -10.00818 c -8.23541,0 -14.86576,-3.72206 -14.86576,-8.34522 v -33.33182 c 0,-4.62316 6.63035,-8.34522 14.86576,-8.34522 h 10.00818 v -10.13427 c 0,-2.69398 -6.62868,-4.86327 -14.86266,-4.86327 z m 59.96224,9.86658 a 30.169838,29.996605 0 0 1 30.16973,29.99662 30.169838,29.996605 0 0 1 -30.16973,29.99662 30.169838,29.996605 0 0 1 -30.16974,-29.99662 30.169838,29.996605 0 0 1 30.16974,-29.99662 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.274414"
       id="path14-6"
       inkscape:export-filename="ship\hull.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -219.90423,315.07369 h 30.00024 c 8.23542,0 14.86524,3.72206 14.86524,8.34522 v 33.33182 c 0,4.62316 -6.62982,8.34522 -14.86524,8.34522 h -30.00024 v 9.84333 h 33.11736 l 56.88284,-15.00012 v -34.99993 l -55.00027,-19.99981 h -34.99993 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.264583"
       id="path18-3"
       inkscape:export-filename="ship\cone.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -259.92892,382.58312 h -59.83097 a 29.922199,29.922199 0 0 0 29.91549,29.85606 29.922199,29.922199 0 0 0 29.91548,-29.85606 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.287887"
       id="path12-6"
       inkscape:export-filename="ship\launcher.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -260.4319,296.5348 a 29.922199,29.922199 0 0 0 0.007,-0.0661 29.922199,29.922199 0 0 0 -29.9222,-29.92221 29.922199,29.922199 0 0 0 -29.92221,29.92221 29.922199,29.922199 0 0 0 0.007,0.0661 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:1.28049"
       id="path10-3"
       inkscape:export-filename="radar.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><rect
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.285875;stroke-opacity:1"
       id="rect12-8"
       width="69.727783"
       height="10.071967"
       x="-304.63193"
       y="387.43918" /><path
       d="m -432.98875,307.58176 v 64.83584 a 62.988531,32.418072 0 0 0 62.98874,-32.41761 62.988531,32.418072 0 0 0 -62.98874,-32.41823 z"
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.360488"
       id="path5-8-2"
       inkscape:export-filename="ship\engine.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><ellipse
       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.241663;stroke-opacity:1"
       id="path3-3-9"
       cx="0.038363412"
       cy="369.92996"
       rx="27.434206"
       ry="27.438307"
       inkscape:export-filename="energy.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       sodipodi:type="star"
       style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-dasharray:none"
       id="path3"
       inkscape:flatsided="true"
       sodipodi:sides="6"
       sodipodi:cx="-660"
       sodipodi:cy="35"
       sodipodi:r1="35"
       sodipodi:r2="30.310888"
       sodipodi:arg1="0"
       sodipodi:arg2="0.52359878"
       inkscape:rounded="0"
       inkscape:randomized="0"
       d="m -625,35 -17.5,30.310889 -35,0 L -695,35 l 17.5,-30.3108891 35,0 z"
       inkscape:transform-center-x="-8.3149606e-06"
       inkscape:export-filename="capmarks\A.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:50.6595px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
       x="-681.39819"
       y="53.200825"
       id="text3-3"
       transform="scale(0.99385173,1.0061863)"><tspan
         sodipodi:role="line"
         id="tspan3-3"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
         x="-681.39819"
         y="53.200825">A</tspan></text><path
       sodipodi:type="star"
       style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-dasharray:none"
       id="path3-2"
       inkscape:flatsided="true"
       sodipodi:sides="6"
       sodipodi:cx="-660"
       sodipodi:cy="35"
       sodipodi:r1="35"
       sodipodi:r2="30.310888"
       sodipodi:arg1="0"
       sodipodi:arg2="0.52359878"
       inkscape:rounded="0"
       inkscape:randomized="0"
       d="m -625,35 -17.5,30.310889 -35,0 L -695,35 l 17.5,-30.3108891 35,0 z"
       inkscape:transform-center-x="-8.3149606e-06"
       transform="translate(-1.5186132e-5,70.310887)"
       inkscape:export-filename="capmarks\B.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:50.6595px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
       x="-680.54968"
       y="123.07942"
       id="text3-3-7"
       transform="scale(0.99385173,1.0061863)"><tspan
         sodipodi:role="line"
         id="tspan3-3-4"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
         x="-680.54968"
         y="123.07942">B</tspan></text><path
       sodipodi:type="star"
       style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-dasharray:none"
       id="path3-7"
       inkscape:flatsided="true"
       sodipodi:sides="6"
       sodipodi:cx="-660"
       sodipodi:cy="35"
       sodipodi:r1="35"
       sodipodi:r2="30.310888"
       sodipodi:arg1="0"
       sodipodi:arg2="0.52359878"
       inkscape:rounded="0"
       inkscape:randomized="0"
       d="m -625,35 -17.5,30.310889 -35,0 L -695,35 l 17.5,-30.3108891 35,0 z"
       inkscape:transform-center-x="-8.3149606e-06"
       transform="translate(-1.5186102e-5,145.31088)"
       inkscape:export-filename="capmarks\C.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:50.6595px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
       x="-683.08032"
       y="198.04939"
       id="text3-3-4"
       transform="scale(0.99385173,1.0061863)"><tspan
         sodipodi:role="line"
         id="tspan3-3-9"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
         x="-683.08032"
         y="198.04939">C</tspan></text><path
       d="m -349.68925,493.52965 c -8.23398,0 -14.86265,2.16929 -14.86265,4.86327 v 4.99298 a 69.607112,34.803832 0 0 1 34.79839,30.13924 69.607112,34.803832 0 0 1 -34.79839,30.13873 v 4.9935 c 0,2.69398 6.62867,4.86275 14.86265,4.86275 h 110.1323 c 8.23398,0 14.86266,-2.16877 14.86266,-4.86275 v -10.10792 h -10.00818 c -8.23541,0 -14.86576,-3.72206 -14.86576,-8.34522 v -33.33182 c 0,-4.62316 6.63035,-8.34522 14.86576,-8.34522 h 10.00818 v -10.13427 c 0,-2.69398 -6.62868,-4.86327 -14.86266,-4.86327 z m 59.96224,9.86658 a 30.169838,29.996605 0 0 1 30.16973,29.99662 30.169838,29.996605 0 0 1 -30.16973,29.99662 30.169838,29.996605 0 0 1 -30.16974,-29.99662 30.169838,29.996605 0 0 1 30.16974,-29.99662 z"
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:1.36;stroke-dasharray:none"
       id="path14-6-3"
       inkscape:export-filename="ship\hull.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -219.55714,508.52719 h 30.00024 c 8.23542,0 14.86524,3.72206 14.86524,8.34522 v 33.33182 c 0,4.62316 -6.62982,8.34522 -14.86524,8.34522 h -30.00024 v 9.84333 h 33.11736 l 56.88284,-15.00012 v -34.99993 l -55.00027,-19.99981 h -34.99993 z"
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:1.36;stroke-dasharray:none"
       id="path18-3-5"
       inkscape:export-filename="ship\cone.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -319.41254,576.03667 a 29.922199,29.922199 0 0 0 29.91548,29.85606 29.922199,29.922199 0 0 0 25.81031,-14.92829 h -40.59804 v -10.07173 h 44.25725 a 29.922199,29.922199 0 0 0 0.44545,-4.85604 z"
       style="fill:none;stroke:#ffffff;stroke-width:1.36"
       id="path5" /><path
       d="m -260.08481,489.9883 a 29.922199,29.922199 0 0 0 0.007,-0.0661 29.922199,29.922199 0 0 0 -29.9222,-29.92221 29.922199,29.922199 0 0 0 -29.92221,29.92221 29.922199,29.922199 0 0 0 0.007,0.0661 z"
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.56;stroke-dasharray:none"
       id="path10-3-9"
       inkscape:export-filename="radar_selected.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -260.02754,580.89271 a 29.922199,29.922199 0 0 1 -3.65921,10.07173 h 29.12949 v -10.07173 z"
       style="fill:none;stroke:#ffffff;stroke-width:1.36"
       id="path7" /><path
       d="m -260.02754,580.89271 h -44.25725 v 10.07173 h 40.59804 a 29.922199,29.922199 0 0 0 3.65921,-10.07173 z"
       style="fill:none;stroke:#ffffff;stroke-width:1.36"
       id="path4" /><path
       d="m -432.64166,501.03526 v 64.83584 a 62.988531,32.418072 0 0 0 62.98874,-32.41761 62.988531,32.418072 0 0 0 -62.98874,-32.41823 z"
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.56;stroke-dasharray:none"
       id="path5-8-2-6"
       inkscape:export-filename="ship\engine_selected.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><ellipse
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.56;stroke-opacity:1;stroke-dasharray:none"
       id="path3-3-9-1"
       cx="0.38545656"
       cy="563.38342"
       rx="27.434206"
       ry="27.438307"
       inkscape:export-filename="energy_selected.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       sodipodi:type="star"
       style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-dasharray:none"
       id="path3-7-7"
       inkscape:flatsided="true"
       sodipodi:sides="6"
       sodipodi:cx="-660"
       sodipodi:cy="35"
       sodipodi:r1="35"
       sodipodi:r2="30.310888"
       sodipodi:arg1="0"
       sodipodi:arg2="0.52359878"
       inkscape:rounded="0"
       inkscape:randomized="0"
       d="m -625,35 -17.5,30.310889 -35,0 L -695,35 l 17.5,-30.3108891 35,0 z"
       inkscape:transform-center-x="-8.3149606e-06"
       transform="translate(-1.5186163e-5,220.31088)"
       inkscape:export-filename="capmarks\D.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:50.6595px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
       x="-683.08032"
       y="272.58829"
       id="text3-3-4-2"
       transform="scale(0.99385173,1.0061863)"><tspan
         sodipodi:role="line"
         id="tspan3-3-9-4"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
         x="-683.08032"
         y="272.58829">D</tspan></text><path
       sodipodi:type="star"
       style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-dasharray:none"
       id="path3-7-9"
       inkscape:flatsided="true"
       sodipodi:sides="6"
       sodipodi:cx="-660"
       sodipodi:cy="35"
       sodipodi:r1="35"
       sodipodi:r2="30.310888"
       sodipodi:arg1="0"
       sodipodi:arg2="0.52359878"
       inkscape:rounded="0"
       inkscape:randomized="0"
       d="m -625,35 -17.5,30.310889 -35,0 L -695,35 l 17.5,-30.3108891 35,0 z"
       inkscape:transform-center-x="-8.3149606e-06"
       transform="translate(-2.5000148,295.31088)"
       inkscape:export-filename="capmarks\E.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><text
       xml:space="preserve"
       style="font-size:50.6595px;fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
       x="-683.67871"
       y="345.59708"
       id="text3-3-4-5"
       transform="scale(0.99385173,1.0061863)"><tspan
         sodipodi:role="line"
         id="tspan3-3-9-48"
         style="fill:#ffffff;fill-opacity:1;stroke:#dedede;stroke-width:2.0726;stroke-dasharray:none;stroke-opacity:1"
         x="-683.67871"
         y="345.59708">E</tspan></text><rect
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.56;stroke-opacity:1;stroke-dasharray:none"
       id="rect7-8-9"
       width="68.535255"
       height="44.998028"
       x="-217.36534"
       y="432.45132"
       ry="7.5069337"
       rx="13.60648"
       inkscape:export-filename="ship\resources_selected.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -421.86523,591.6447 c 0.0365,16.49712 13.41832,29.8524 29.91548,29.85606 10.64658,-0.0299 20.47537,-5.71477 25.81031,-14.92829 h 29.12949 v -10.07173 h -25.47028 c 0.28035,-1.60386 0.42933,-3.22794 0.44545,-4.85604 z"
       style="fill:none;stroke:#ffffff;stroke-width:3.56;stroke-dasharray:none"
       id="path5-4"
       sodipodi:nodetypes="cccccccc"
       inkscape:export-filename=".\launcher_selected.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       d="m -292.62307,670.96312 a 29.922199,29.922199 0 0 1 -3.65921,10.07173 h 29.12949 v -10.07173 z"
       style="fill:none;stroke:#ffffff;stroke-width:1.36"
       id="path7-5" /><path
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.398;stroke-dasharray:none;stroke-opacity:1"
       d="m 196.48747,26.443675 c 0,0 0,0 27.31798,-49.793538 27.31798,49.793539 27.31798,49.793539 27.31798,49.793539 -54.98904,0.190172 -54.98904,0.190172 -54.98904,0.190172"
       id="path11-2" /><path
       style="fill:none;stroke:#ffffff;stroke-width:3.60294199;stroke-linecap:round;stroke-dasharray:none"
       d="M 302.68018,-5.5507896 C 317.82413,22.318207 317.82413,22.318207 317.82413,22.318207"
       id="path8"
       inkscape:export-filename="markers\ship_debris.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       style="fill:none;stroke:#ffffff;stroke-width:3.61034;stroke-linecap:round;stroke-dasharray:none"
       d="M 291.2851,-5.5470925 C 275.12881,22.322228 275.12881,22.322228 275.12881,22.322228"
       id="path9"
       inkscape:export-filename="markers\ship_debris.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       style="fill:none;stroke:#ffffff;stroke-width:4.27774172;stroke-linecap:round;stroke-dasharray:none"
       d="m 281.33473,32.507501 c 31.39978,0 31.39978,0 31.39978,0"
       id="path19" /><path
       style="fill:none;fill-opacity:1;stroke:#ffffff;stroke-width:3.398;stroke-dasharray:none;stroke-opacity:1"
       d="m 46.46872,-83.463765 c 0,0 0,0 27.31798,-49.793535 27.31798,49.793536 27.31798,49.793536 27.31798,49.793536 -54.98904,0.190172 -54.98904,0.190172 -54.98904,0.190172"
       id="path11-2-2" /><path
       style="fill:none;stroke:#ffffff;stroke-width:4.27773;stroke-linecap:round"
       d="m 450.00001,9.9999997 c 90,-149.9999897 90,-149.9999897 90,-149.9999897 119.6256,-1.51668 119.6256,-1.51668 119.6256,-1.51668"
       id="path20"
       inkscape:export-filename="markers\ship_name.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><path
       sodipodi:type="star"
       style="fill:none;stroke:#ffffff;stroke-width:13.22190207;stroke-linecap:round;fill-opacity:1;stroke-dasharray:none"
       id="path21"
       inkscape:flatsided="true"
       sodipodi:sides="6"
       sodipodi:cx="590"
       sodipodi:cy="-159.99998"
       sodipodi:r1="58.309521"
       sodipodi:r2="50.497528"
       sodipodi:arg1="0.54041948"
       sodipodi:arg2="1.0640183"
       inkscape:rounded="0"
       inkscape:randomized="0"
       d="m 640,-129.99998 -50.98076,28.30127 -50,-30 0.98076,-58.30127 50.98076,-28.30128 50,30 z"
       inkscape:transform-center-x="3.0654753e-06"
       transform="matrix(0.53941913,0,0,0.51961522,-145.75728,-32.155798)"
       inkscape:export-filename="space_station.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /><rect
       style="fill:#ffffff;stroke:none;stroke-width:4.27773;stroke-linecap:round;fill-opacity:0.28089887"
       id="rect3"
       width="33.137497"
       height="31.857595"
       x="296.86249"
       y="375.07156"
       inkscape:export-filename="markers\damage_shade.png"
       inkscape:export-xdpi="96"
       inkscape:export-ydpi="96" /></g></svg>

###===###.\front01\public\markers\drone.svg
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
#==SPACE==#

<svg
  width="50.087692mm"
  height="50.205528mm"
  viewBox="0 0 50.087692 50.205528"
  version="1.1"
  id="svg1"
  inkscape:version="1.3.2 (091e20e, 2023-11-25, custom)"
  sodipodi:docname="markers,svg.svg"
  xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
  xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:svg="http://www.w3.org/2000/svg">
 <sodipodi:namedview
   id="namedview1"
   pagecolor="#000000"
   bordercolor="#000000"
   borderopacity="0.25"
   inkscape:showpageshadow="2"
   inkscape:pageopacity="0.0"
   inkscape:pagecheckerboard="0"
   inkscape:deskcolor="#424242"
   inkscape:document-units="mm"
   showgrid="true"
   inkscape:zoom="0.73139029"
   inkscape:cx="397.18876"
   inkscape:cy="572.19792"
   inkscape:window-width="2560"
   inkscape:window-height="1017"
   inkscape:window-x="-8"
   inkscape:window-y="-8"
   inkscape:window-maximized="1"
   inkscape:current-layer="layer1">
  <inkscape:grid
    id="grid1"
    units="mm"
    originx="-14.956156"
    originy="-225"
    spacingx="0.99999998"
    spacingy="1"
    empcolor="#0099e5"
    empopacity="0.30196078"
    color="#0099e5"
    opacity="0.14901961"
    empspacing="5"
    dotted="false"
    gridanglex="30"
    gridanglez="30"
    visible="true" />
 </sodipodi:namedview>
 <defs
   id="defs1" />
 <g
   inkscape:label="Слой 1"
   inkscape:groupmode="layer"
   id="layer1"
   transform="translate(-14.956156,-224.99999)">
  <rect
    style="fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.098;stroke-dasharray:none;stroke-opacity:1"
    id="rect17-2"
    width="50.087692"
    height="50.205528"
    x="14.956157"
    y="225"
    ry="14.999997"
    inkscape:export-filename="markers\drone.svg"
    inkscape:export-xdpi="96"
    inkscape:export-ydpi="96" />
  <path
    style="fill:none;stroke:#000000;stroke-width:4.49792;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
    d="m 25,265 c 0,-30.00001 0,-30.00001 0,-30.00001"
    id="path2" />
  <path
    style="fill:none;stroke:#000000;stroke-width:4.49792;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"
    d="m 25,234.99999 c 30,0 30,0 30,0 10e-7,30 10e-7,30 10e-7,30"
    id="path3" />
 </g>
</svg>

###===###.\front01\public\markers\markers.svg
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
#==SPACE==#

<svg
  width="210mm"
  height="297mm"
  viewBox="0 0 210 297"
  version="1.1"
  id="svg5"
  inkscape:version="1.1.2 (b8e25be833, 2022-02-05)"
  sodipodi:docname="markers.svg"
  xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
  xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:svg="http://www.w3.org/2000/svg">
 <sodipodi:namedview
   id="namedview7"
   pagecolor="#000000"
   bordercolor="#666666"
   borderopacity="1.0"
   inkscape:pageshadow="2"
   inkscape:pageopacity="0"
   inkscape:pagecheckerboard="0"
   inkscape:document-units="mm"
   showgrid="true"
   inkscape:zoom="0.74029882"
   inkscape:cx="570.04008"
   inkscape:cy="975.28185"
   inkscape:window-width="1920"
   inkscape:window-height="1017"
   inkscape:window-x="-8"
   inkscape:window-y="-8"
   inkscape:window-maximized="1"
   inkscape:current-layer="layer1">
  <inkscape:grid
    units="mm"
    type="xygrid"
    id="grid1872" />
 </sodipodi:namedview>
 <defs
   id="defs2" />
 <g
   inkscape:label="Слой 1"
   inkscape:groupmode="layer"
   id="layer1">
  <path
    style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
    d="m 50,50 c 100,0 100,0 100,0 v 0"
    id="path892"
    inkscape:export-filename="C:\Users\ktess\WorkFolder\VoidSector\debug\front01\public\markers\ship.png"
    inkscape:export-xdpi="96"
    inkscape:export-ydpi="96" />
  <path
    style="fill:none;stroke:#ffffff;stroke-width:3.465;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
    d="m 50,50 c 50,-89.999999 50,-89.999999 50,-89.999999 C 150,50 150,50 150,50"
    id="path894"
    inkscape:export-filename="C:\Users\ktess\WorkFolder\VoidSector\debug\front01\public\markers\ship.png"
    inkscape:export-xdpi="96"
    inkscape:export-ydpi="96" />
  <path
    style="fill:none;stroke:#ffffff;stroke-width:3.20257;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:0.27309236"
    d="m 140,69.999999 c 0,0 0,0 -70.000001,0 C 60,70 60,70 60,70 c 40,70 40,70 40,70"
    id="path1089"
    inkscape:export-filename="C:\Users\ktess\WorkFolder\VoidSector\debug\front01\public\markers\projectile.png"
    inkscape:export-xdpi="96"
    inkscape:export-ydpi="96" />
  <path
    style="fill:none;stroke:#ffffff;stroke-width:3.20257;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:0.27309236"
    d="M 140,69.999999 C 100,140 100,140 100,140"
    id="path1091"
    inkscape:export-filename="C:\Users\ktess\WorkFolder\VoidSector\debug\front01\public\markers\projectile.png"
    inkscape:export-xdpi="96"
    inkscape:export-ydpi="96" />
  <ellipse
    style="fill:none;stroke:#ffffff;stroke-width:0.49214;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
    id="path2113"
    cx="56.543316"
    cy="148.65163"
    inkscape:export-filename="C:\Users\ktess\WorkFolder\VoidSector\debug\front01\public\markers\circle.png"
    inkscape:export-xdpi="96"
    inkscape:export-ydpi="96"
    rx="32.040581"
    ry="38.831196" />
  <rect
    style="fill:none;stroke:#ffffff;stroke-width:0.146;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"
    id="rect1757"
    width="40"
    height="20"
    x="90"
    y="250" />
 </g>
</svg>

###===###.\front01\src\logo.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

###===###.\back01\quest_points\quest_points.json
{
 "SiroccoInstallsQuantumDetector":{
  "initiator":"Sirocco",
  "type":"interact",
  "params":{
   "target": "Selena"
  }
 },
 "VanEicFiredByEMP":{
  "initiator":"Sirocco",
  "type":"damage2target",
  "params":{
   "target": "VanEick",
   "damage_type":"emp"
  },
  "depends_on":"SiroccoInstallsQuantumDetector"
 }
}

###===###.\front01\public\manifest.json
{
 "short_name": "React App",
 "name": "Create React App Sample",
 "icons": [
 {
  "src": "favicon.ico",
  "sizes": "64x64 32x32 24x24 16x16",
  "type": "image/x-icon"
 },
 {
  "src": "logo192.png",
  "type": "image/png",
  "sizes": "192x192"
 },
 {
  "src": "logo512.png",
  "type": "image/png",
  "sizes": "512x512"
 }
 ],
 "start_url": ".",
 "display": "standalone",
 "theme_color": "#000000",
 "background_color": "#ffffff"
}
