Полезные команды для Docker и Docker Compose
Быстрая проверка, что Docker запущен
docker info 
Если нет клиента Docker, то консоль скажет, что такой программы нет. Если клиент есть, но сам Docker не запущен, то вы увидите сообщение, похожее на это:
Client:
 Context:    default
 Debug Mode: false
 Plugins:
  buildx: Docker Buildx (Docker Inc., v0.8.2)
  compose: Docker Compose (Docker Inc., v2.5.1)
  sbom: View the packaged-based Software Bill Of Materials (SBOM) for an image (Anchore Inc., 0.6.0)
  scan: Docker Scan (Docker Inc., v0.17.0)

Server:
ERROR: Error response from daemon: dial unix /some/path/to/file/docker.raw.sock: connect: connection refused
errors pretty printing info 
Если Docker запущен, то секция Server будет содержать информацию о запущенном Docker-сервере.
Смотрим состояние всех контейнеров
docker ps -a 
Флаг -a позволяет увидеть состояние даже остановленных контейнеров.
Docker Compose — запуск и остановка с полной очисткой
Запуск Docker с пересборкой:
docker-compose up -d --build 
Данная команда запускает контейнеры в «отвязанном» режиме (detached) и заново собирает контейнеры. Отвязанный режим позволяет не зависеть запущенным контейнерам от работы консоли. Даже если её закрыть, то контейнеры продолжат работать. 
Сборка контейнеров позволяет пересобрать их, если код сервиса поменялся. Если не пересобирать контейнер, то возможен запуск предыдущей версии кода и долгий поиск проблемы.
Для запуска конкретных контейнеров можно напрямую указать, какие сервисы запускать:
docker-compose up -d --build postgres service1 
Запуск остановленных контейнеров:
docker-compose start 
Остановка запущенных контейнеров:
docker-compose stop 
Останавливает текущие контейнеры без их удаления. Осторожнее с этой командой: если вы изменение код, то при повторном запуске поднимется старый контейнер со старым кодом. По возможности лучше использовать связку up/down, хоть она и выполняется дольше.
Полное удаление запущенных контейнеров с удалением именованных volume:
docker-compose down -v 
Завершает (stop) и удаляет все контейнеры (rm -f) в рамках текущего docker-compose-файла.
Опция -v удаляет все именованные volume при остановке Docker Compose. Это необходимо, чтобы старые данные не мешали повторному запуску контейнеров.
Удаление всех неиспользуемых образов
docker image prune -a 
При интенсивном использовании Docker может сложиться ситуация, когда образы сильно засоряют память. Такое возможно, если вы установили много разных версий сервиса. Команда prune -a позволяет почистить уже неиспользуемые образы, не трогая те, которые нужны для работы текущих контейнеров.
Просмотр логов запущенного Docker-контейнера и Docker Compose
docker-compose logs 
Команда позволяет вывести все логи от всех запущенных в данный момент контейнеров через Docker Compose.
Бывает так, что нужно посмотреть логи конкретного контейнера в Docker Compose. Тогда нужно совершить эти действия:
docker compose ls — для вывода всех запущенных контейнеров с их названиями.
docker-compose logs <название контейнера> — для просмотра логов конкретного контейнера.
docker-compose logs -f <название контейнера> — для просмотра логов конкретного контейнера в реальном времени.
Если надо подружить два контейнера на уровне сети
Если есть два контейнера не в рамках docker-compose, то их желательно самостоятельно связать через сеть. Бывают ситуации, когда два контейнера, которые по идее должны видеть друг друга, не могут посылать запросы друг другу. А ещё бывает, что запущенные контейнеры не видны со стороны хост-машины — вашего компьютера.
Если у вас есть контейнер с названием container1, который слушает запросы на 8000 порту, то проверить сетевую связность с этим контейнером можно при помощи контейнера, который содержит команду curl: curlimages/curl.
Проще всего будет работать такая связка:
docker network create my-network
docker run -it --rm -d --network my-network container1
docker run -it --rm --network my-network curlimages/curl -i http://container1:8000 
Если не привязывать сеть к обоим контейнерам, то они друг друга не увидят.
Также можно связать отдельный контейнер с Docker Compose через именованную сеть. Нужно прописать настройки сети:
networks:
  my-network:
    external: True 
external говорит, что Docker Compose возьмёт уже существующую сеть. Также нужно добавить к своим контейнерам в рамках docker-compose привязку к этой сети:
postgres:
  ...
  networks:
    - my-network 
Тогда можно подключать любые контейнеры к сети my-network, даже не в docker-compose. Также такой способ явного указания сети позволяет решать возможные проблемы с сетями на некоторых ОС.